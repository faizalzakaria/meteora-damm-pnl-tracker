import { Program, IdlAccounts, BN, IdlTypes } from '@coral-xyz/anchor';
import { PublicKey, Transaction, Connection, TransactionInstruction, AddressLookupTableAccount, Commitment, GetProgramAccountsFilter } from '@solana/web3.js';
import { Mint } from '@solana/spl-token';
import Decimal from 'decimal.js';

/**
 * Program IDL in camelCase format in order to be used in JS/TS.
 *
 * Note that this is only a type helper and is not the actual IDL. The original
 * IDL can be found at `target/idl/cp_amm.json`.
 */
type CpAmm$1 = {
    address: "cpamdpZCGKUy5JxQXB4dcpGPiikHawvSWAd6mEn1sGG";
    metadata: {
        name: "cpAmm";
        version: "0.1.3";
        spec: "0.1.0";
        description: "Created with Anchor";
    };
    instructions: [
        {
            name: "addLiquidity";
            discriminator: [181, 157, 89, 67, 143, 182, 52, 72];
            accounts: [
                {
                    name: "pool";
                    writable: true;
                    relations: ["position"];
                },
                {
                    name: "position";
                    writable: true;
                },
                {
                    name: "tokenAAccount";
                    docs: ["The user token a account"];
                    writable: true;
                },
                {
                    name: "tokenBAccount";
                    docs: ["The user token b account"];
                    writable: true;
                },
                {
                    name: "tokenAVault";
                    docs: ["The vault token account for input token"];
                    writable: true;
                    relations: ["pool"];
                },
                {
                    name: "tokenBVault";
                    docs: ["The vault token account for output token"];
                    writable: true;
                    relations: ["pool"];
                },
                {
                    name: "tokenAMint";
                    docs: ["The mint of token a"];
                    relations: ["pool"];
                },
                {
                    name: "tokenBMint";
                    docs: ["The mint of token b"];
                    relations: ["pool"];
                },
                {
                    name: "positionNftAccount";
                    docs: ["The token account for nft"];
                },
                {
                    name: "owner";
                    docs: ["owner of position"];
                    signer: true;
                },
                {
                    name: "tokenAProgram";
                    docs: ["Token a program"];
                },
                {
                    name: "tokenBProgram";
                    docs: ["Token b program"];
                },
                {
                    name: "eventAuthority";
                    pda: {
                        seeds: [
                            {
                                kind: "const";
                                value: [
                                    95,
                                    95,
                                    101,
                                    118,
                                    101,
                                    110,
                                    116,
                                    95,
                                    97,
                                    117,
                                    116,
                                    104,
                                    111,
                                    114,
                                    105,
                                    116,
                                    121
                                ];
                            }
                        ];
                    };
                },
                {
                    name: "program";
                }
            ];
            args: [
                {
                    name: "params";
                    type: {
                        defined: {
                            name: "addLiquidityParameters";
                        };
                    };
                }
            ];
        },
        {
            name: "claimPartnerFee";
            discriminator: [97, 206, 39, 105, 94, 94, 126, 148];
            accounts: [
                {
                    name: "poolAuthority";
                    address: "HLnpSz9h2S4hiLQ43rnSD9XkcUThA7B8hQMKmDaiTLcC";
                },
                {
                    name: "pool";
                    writable: true;
                },
                {
                    name: "tokenAAccount";
                    docs: ["The treasury token a account"];
                    writable: true;
                },
                {
                    name: "tokenBAccount";
                    docs: ["The treasury token b account"];
                    writable: true;
                },
                {
                    name: "tokenAVault";
                    docs: ["The vault token account for input token"];
                    writable: true;
                    relations: ["pool"];
                },
                {
                    name: "tokenBVault";
                    docs: ["The vault token account for output token"];
                    writable: true;
                    relations: ["pool"];
                },
                {
                    name: "tokenAMint";
                    docs: ["The mint of token a"];
                    relations: ["pool"];
                },
                {
                    name: "tokenBMint";
                    docs: ["The mint of token b"];
                    relations: ["pool"];
                },
                {
                    name: "partner";
                    signer: true;
                    relations: ["pool"];
                },
                {
                    name: "tokenAProgram";
                    docs: ["Token a program"];
                },
                {
                    name: "tokenBProgram";
                    docs: ["Token b program"];
                },
                {
                    name: "eventAuthority";
                    pda: {
                        seeds: [
                            {
                                kind: "const";
                                value: [
                                    95,
                                    95,
                                    101,
                                    118,
                                    101,
                                    110,
                                    116,
                                    95,
                                    97,
                                    117,
                                    116,
                                    104,
                                    111,
                                    114,
                                    105,
                                    116,
                                    121
                                ];
                            }
                        ];
                    };
                },
                {
                    name: "program";
                }
            ];
            args: [
                {
                    name: "maxAmountA";
                    type: "u64";
                },
                {
                    name: "maxAmountB";
                    type: "u64";
                }
            ];
        },
        {
            name: "claimPositionFee";
            discriminator: [180, 38, 154, 17, 133, 33, 162, 211];
            accounts: [
                {
                    name: "poolAuthority";
                    address: "HLnpSz9h2S4hiLQ43rnSD9XkcUThA7B8hQMKmDaiTLcC";
                },
                {
                    name: "pool";
                    relations: ["position"];
                },
                {
                    name: "position";
                    writable: true;
                },
                {
                    name: "tokenAAccount";
                    docs: ["The user token a account"];
                    writable: true;
                },
                {
                    name: "tokenBAccount";
                    docs: ["The user token b account"];
                    writable: true;
                },
                {
                    name: "tokenAVault";
                    docs: ["The vault token account for input token"];
                    writable: true;
                    relations: ["pool"];
                },
                {
                    name: "tokenBVault";
                    docs: ["The vault token account for output token"];
                    writable: true;
                    relations: ["pool"];
                },
                {
                    name: "tokenAMint";
                    docs: ["The mint of token a"];
                    relations: ["pool"];
                },
                {
                    name: "tokenBMint";
                    docs: ["The mint of token b"];
                    relations: ["pool"];
                },
                {
                    name: "positionNftAccount";
                    docs: ["The token account for nft"];
                },
                {
                    name: "owner";
                    docs: ["owner of position"];
                    signer: true;
                },
                {
                    name: "tokenAProgram";
                    docs: ["Token a program"];
                },
                {
                    name: "tokenBProgram";
                    docs: ["Token b program"];
                },
                {
                    name: "eventAuthority";
                    pda: {
                        seeds: [
                            {
                                kind: "const";
                                value: [
                                    95,
                                    95,
                                    101,
                                    118,
                                    101,
                                    110,
                                    116,
                                    95,
                                    97,
                                    117,
                                    116,
                                    104,
                                    111,
                                    114,
                                    105,
                                    116,
                                    121
                                ];
                            }
                        ];
                    };
                },
                {
                    name: "program";
                }
            ];
            args: [];
        },
        {
            name: "claimProtocolFee";
            discriminator: [165, 228, 133, 48, 99, 249, 255, 33];
            accounts: [
                {
                    name: "poolAuthority";
                    address: "HLnpSz9h2S4hiLQ43rnSD9XkcUThA7B8hQMKmDaiTLcC";
                },
                {
                    name: "pool";
                    writable: true;
                },
                {
                    name: "tokenAVault";
                    docs: ["The vault token account for input token"];
                    writable: true;
                    relations: ["pool"];
                },
                {
                    name: "tokenBVault";
                    docs: ["The vault token account for output token"];
                    writable: true;
                    relations: ["pool"];
                },
                {
                    name: "tokenAMint";
                    docs: ["The mint of token a"];
                    relations: ["pool"];
                },
                {
                    name: "tokenBMint";
                    docs: ["The mint of token b"];
                    relations: ["pool"];
                },
                {
                    name: "tokenAAccount";
                    docs: ["The treasury token a account"];
                    writable: true;
                    pda: {
                        seeds: [
                            {
                                kind: "const";
                                value: [
                                    48,
                                    9,
                                    89,
                                    123,
                                    106,
                                    114,
                                    131,
                                    251,
                                    50,
                                    173,
                                    254,
                                    250,
                                    10,
                                    80,
                                    160,
                                    84,
                                    143,
                                    100,
                                    81,
                                    249,
                                    134,
                                    112,
                                    30,
                                    213,
                                    50,
                                    166,
                                    239,
                                    78,
                                    53,
                                    175,
                                    188,
                                    85
                                ];
                            },
                            {
                                kind: "account";
                                path: "tokenAProgram";
                            },
                            {
                                kind: "account";
                                path: "tokenAMint";
                            }
                        ];
                        program: {
                            kind: "const";
                            value: [
                                140,
                                151,
                                37,
                                143,
                                78,
                                36,
                                137,
                                241,
                                187,
                                61,
                                16,
                                41,
                                20,
                                142,
                                13,
                                131,
                                11,
                                90,
                                19,
                                153,
                                218,
                                255,
                                16,
                                132,
                                4,
                                142,
                                123,
                                216,
                                219,
                                233,
                                248,
                                89
                            ];
                        };
                    };
                },
                {
                    name: "tokenBAccount";
                    docs: ["The treasury token b account"];
                    writable: true;
                    pda: {
                        seeds: [
                            {
                                kind: "const";
                                value: [
                                    48,
                                    9,
                                    89,
                                    123,
                                    106,
                                    114,
                                    131,
                                    251,
                                    50,
                                    173,
                                    254,
                                    250,
                                    10,
                                    80,
                                    160,
                                    84,
                                    143,
                                    100,
                                    81,
                                    249,
                                    134,
                                    112,
                                    30,
                                    213,
                                    50,
                                    166,
                                    239,
                                    78,
                                    53,
                                    175,
                                    188,
                                    85
                                ];
                            },
                            {
                                kind: "account";
                                path: "tokenBProgram";
                            },
                            {
                                kind: "account";
                                path: "tokenBMint";
                            }
                        ];
                        program: {
                            kind: "const";
                            value: [
                                140,
                                151,
                                37,
                                143,
                                78,
                                36,
                                137,
                                241,
                                187,
                                61,
                                16,
                                41,
                                20,
                                142,
                                13,
                                131,
                                11,
                                90,
                                19,
                                153,
                                218,
                                255,
                                16,
                                132,
                                4,
                                142,
                                123,
                                216,
                                219,
                                233,
                                248,
                                89
                            ];
                        };
                    };
                },
                {
                    name: "claimFeeOperator";
                    docs: ["Claim fee operator"];
                },
                {
                    name: "operator";
                    docs: ["Operator"];
                    signer: true;
                    relations: ["claimFeeOperator"];
                },
                {
                    name: "tokenAProgram";
                    docs: ["Token a program"];
                },
                {
                    name: "tokenBProgram";
                    docs: ["Token b program"];
                },
                {
                    name: "eventAuthority";
                    pda: {
                        seeds: [
                            {
                                kind: "const";
                                value: [
                                    95,
                                    95,
                                    101,
                                    118,
                                    101,
                                    110,
                                    116,
                                    95,
                                    97,
                                    117,
                                    116,
                                    104,
                                    111,
                                    114,
                                    105,
                                    116,
                                    121
                                ];
                            }
                        ];
                    };
                },
                {
                    name: "program";
                }
            ];
            args: [
                {
                    name: "maxAmountA";
                    type: "u64";
                },
                {
                    name: "maxAmountB";
                    type: "u64";
                }
            ];
        },
        {
            name: "claimReward";
            discriminator: [149, 95, 181, 242, 94, 90, 158, 162];
            accounts: [
                {
                    name: "poolAuthority";
                    address: "HLnpSz9h2S4hiLQ43rnSD9XkcUThA7B8hQMKmDaiTLcC";
                },
                {
                    name: "pool";
                    writable: true;
                    relations: ["position"];
                },
                {
                    name: "position";
                    writable: true;
                },
                {
                    name: "rewardVault";
                    docs: ["The vault token account for reward token"];
                    writable: true;
                },
                {
                    name: "rewardMint";
                },
                {
                    name: "userTokenAccount";
                    writable: true;
                },
                {
                    name: "positionNftAccount";
                    docs: ["The token account for nft"];
                },
                {
                    name: "owner";
                    docs: ["owner of position"];
                    signer: true;
                },
                {
                    name: "tokenProgram";
                },
                {
                    name: "eventAuthority";
                    pda: {
                        seeds: [
                            {
                                kind: "const";
                                value: [
                                    95,
                                    95,
                                    101,
                                    118,
                                    101,
                                    110,
                                    116,
                                    95,
                                    97,
                                    117,
                                    116,
                                    104,
                                    111,
                                    114,
                                    105,
                                    116,
                                    121
                                ];
                            }
                        ];
                    };
                },
                {
                    name: "program";
                }
            ];
            args: [
                {
                    name: "rewardIndex";
                    type: "u8";
                },
                {
                    name: "skipReward";
                    type: "u8";
                }
            ];
        },
        {
            name: "closeClaimFeeOperator";
            discriminator: [38, 134, 82, 216, 95, 124, 17, 99];
            accounts: [
                {
                    name: "claimFeeOperator";
                    writable: true;
                },
                {
                    name: "rentReceiver";
                    writable: true;
                },
                {
                    name: "admin";
                    signer: true;
                },
                {
                    name: "eventAuthority";
                    pda: {
                        seeds: [
                            {
                                kind: "const";
                                value: [
                                    95,
                                    95,
                                    101,
                                    118,
                                    101,
                                    110,
                                    116,
                                    95,
                                    97,
                                    117,
                                    116,
                                    104,
                                    111,
                                    114,
                                    105,
                                    116,
                                    121
                                ];
                            }
                        ];
                    };
                },
                {
                    name: "program";
                }
            ];
            args: [];
        },
        {
            name: "closeConfig";
            discriminator: [145, 9, 72, 157, 95, 125, 61, 85];
            accounts: [
                {
                    name: "config";
                    writable: true;
                },
                {
                    name: "admin";
                    writable: true;
                    signer: true;
                },
                {
                    name: "rentReceiver";
                    writable: true;
                },
                {
                    name: "eventAuthority";
                    pda: {
                        seeds: [
                            {
                                kind: "const";
                                value: [
                                    95,
                                    95,
                                    101,
                                    118,
                                    101,
                                    110,
                                    116,
                                    95,
                                    97,
                                    117,
                                    116,
                                    104,
                                    111,
                                    114,
                                    105,
                                    116,
                                    121
                                ];
                            }
                        ];
                    };
                },
                {
                    name: "program";
                }
            ];
            args: [];
        },
        {
            name: "closePosition";
            discriminator: [123, 134, 81, 0, 49, 68, 98, 98];
            accounts: [
                {
                    name: "positionNftMint";
                    docs: ["positionNftMint"];
                    writable: true;
                },
                {
                    name: "positionNftAccount";
                    docs: ["The token account for nft"];
                    writable: true;
                },
                {
                    name: "pool";
                    writable: true;
                    relations: ["position"];
                },
                {
                    name: "position";
                    writable: true;
                },
                {
                    name: "poolAuthority";
                    address: "HLnpSz9h2S4hiLQ43rnSD9XkcUThA7B8hQMKmDaiTLcC";
                },
                {
                    name: "rentReceiver";
                    writable: true;
                },
                {
                    name: "owner";
                    docs: ["Owner of position"];
                    signer: true;
                },
                {
                    name: "tokenProgram";
                    docs: [
                        "Program to create NFT mint/token account and transfer for token22 account"
                    ];
                    address: "TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb";
                },
                {
                    name: "eventAuthority";
                    pda: {
                        seeds: [
                            {
                                kind: "const";
                                value: [
                                    95,
                                    95,
                                    101,
                                    118,
                                    101,
                                    110,
                                    116,
                                    95,
                                    97,
                                    117,
                                    116,
                                    104,
                                    111,
                                    114,
                                    105,
                                    116,
                                    121
                                ];
                            }
                        ];
                    };
                },
                {
                    name: "program";
                }
            ];
            args: [];
        },
        {
            name: "closeTokenBadge";
            discriminator: [108, 146, 86, 110, 179, 254, 10, 104];
            accounts: [
                {
                    name: "tokenBadge";
                    writable: true;
                },
                {
                    name: "admin";
                    writable: true;
                    signer: true;
                },
                {
                    name: "rentReceiver";
                    writable: true;
                },
                {
                    name: "eventAuthority";
                    pda: {
                        seeds: [
                            {
                                kind: "const";
                                value: [
                                    95,
                                    95,
                                    101,
                                    118,
                                    101,
                                    110,
                                    116,
                                    95,
                                    97,
                                    117,
                                    116,
                                    104,
                                    111,
                                    114,
                                    105,
                                    116,
                                    121
                                ];
                            }
                        ];
                    };
                },
                {
                    name: "program";
                }
            ];
            args: [];
        },
        {
            name: "createClaimFeeOperator";
            discriminator: [169, 62, 207, 107, 58, 187, 162, 109];
            accounts: [
                {
                    name: "claimFeeOperator";
                    writable: true;
                    pda: {
                        seeds: [
                            {
                                kind: "const";
                                value: [99, 102, 95, 111, 112, 101, 114, 97, 116, 111, 114];
                            },
                            {
                                kind: "account";
                                path: "operator";
                            }
                        ];
                    };
                },
                {
                    name: "operator";
                },
                {
                    name: "admin";
                    writable: true;
                    signer: true;
                },
                {
                    name: "systemProgram";
                    address: "11111111111111111111111111111111";
                },
                {
                    name: "eventAuthority";
                    pda: {
                        seeds: [
                            {
                                kind: "const";
                                value: [
                                    95,
                                    95,
                                    101,
                                    118,
                                    101,
                                    110,
                                    116,
                                    95,
                                    97,
                                    117,
                                    116,
                                    104,
                                    111,
                                    114,
                                    105,
                                    116,
                                    121
                                ];
                            }
                        ];
                    };
                },
                {
                    name: "program";
                }
            ];
            args: [];
        },
        {
            name: "createConfig";
            docs: ["ADMIN FUNCTIONS /////"];
            discriminator: [201, 207, 243, 114, 75, 111, 47, 189];
            accounts: [
                {
                    name: "config";
                    writable: true;
                    pda: {
                        seeds: [
                            {
                                kind: "const";
                                value: [99, 111, 110, 102, 105, 103];
                            },
                            {
                                kind: "arg";
                                path: "index";
                            }
                        ];
                    };
                },
                {
                    name: "admin";
                    writable: true;
                    signer: true;
                },
                {
                    name: "systemProgram";
                    address: "11111111111111111111111111111111";
                },
                {
                    name: "eventAuthority";
                    pda: {
                        seeds: [
                            {
                                kind: "const";
                                value: [
                                    95,
                                    95,
                                    101,
                                    118,
                                    101,
                                    110,
                                    116,
                                    95,
                                    97,
                                    117,
                                    116,
                                    104,
                                    111,
                                    114,
                                    105,
                                    116,
                                    121
                                ];
                            }
                        ];
                    };
                },
                {
                    name: "program";
                }
            ];
            args: [
                {
                    name: "index";
                    type: "u64";
                },
                {
                    name: "configParameters";
                    type: {
                        defined: {
                            name: "staticConfigParameters";
                        };
                    };
                }
            ];
        },
        {
            name: "createDynamicConfig";
            discriminator: [81, 251, 122, 78, 66, 57, 208, 82];
            accounts: [
                {
                    name: "config";
                    writable: true;
                    pda: {
                        seeds: [
                            {
                                kind: "const";
                                value: [99, 111, 110, 102, 105, 103];
                            },
                            {
                                kind: "arg";
                                path: "index";
                            }
                        ];
                    };
                },
                {
                    name: "admin";
                    writable: true;
                    signer: true;
                },
                {
                    name: "systemProgram";
                    address: "11111111111111111111111111111111";
                },
                {
                    name: "eventAuthority";
                    pda: {
                        seeds: [
                            {
                                kind: "const";
                                value: [
                                    95,
                                    95,
                                    101,
                                    118,
                                    101,
                                    110,
                                    116,
                                    95,
                                    97,
                                    117,
                                    116,
                                    104,
                                    111,
                                    114,
                                    105,
                                    116,
                                    121
                                ];
                            }
                        ];
                    };
                },
                {
                    name: "program";
                }
            ];
            args: [
                {
                    name: "index";
                    type: "u64";
                },
                {
                    name: "configParameters";
                    type: {
                        defined: {
                            name: "dynamicConfigParameters";
                        };
                    };
                }
            ];
        },
        {
            name: "createPosition";
            discriminator: [48, 215, 197, 153, 96, 203, 180, 133];
            accounts: [
                {
                    name: "owner";
                },
                {
                    name: "positionNftMint";
                    docs: ["positionNftMint"];
                    writable: true;
                    signer: true;
                },
                {
                    name: "positionNftAccount";
                    docs: ["position nft account"];
                    writable: true;
                    pda: {
                        seeds: [
                            {
                                kind: "const";
                                value: [
                                    112,
                                    111,
                                    115,
                                    105,
                                    116,
                                    105,
                                    111,
                                    110,
                                    95,
                                    110,
                                    102,
                                    116,
                                    95,
                                    97,
                                    99,
                                    99,
                                    111,
                                    117,
                                    110,
                                    116
                                ];
                            },
                            {
                                kind: "account";
                                path: "positionNftMint";
                            }
                        ];
                    };
                },
                {
                    name: "pool";
                    writable: true;
                },
                {
                    name: "position";
                    writable: true;
                    pda: {
                        seeds: [
                            {
                                kind: "const";
                                value: [112, 111, 115, 105, 116, 105, 111, 110];
                            },
                            {
                                kind: "account";
                                path: "positionNftMint";
                            }
                        ];
                    };
                },
                {
                    name: "poolAuthority";
                    address: "HLnpSz9h2S4hiLQ43rnSD9XkcUThA7B8hQMKmDaiTLcC";
                },
                {
                    name: "payer";
                    docs: ["Address paying to create the position. Can be anyone"];
                    writable: true;
                    signer: true;
                },
                {
                    name: "tokenProgram";
                    docs: [
                        "Program to create NFT mint/token account and transfer for token22 account"
                    ];
                    address: "TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb";
                },
                {
                    name: "systemProgram";
                    address: "11111111111111111111111111111111";
                },
                {
                    name: "eventAuthority";
                    pda: {
                        seeds: [
                            {
                                kind: "const";
                                value: [
                                    95,
                                    95,
                                    101,
                                    118,
                                    101,
                                    110,
                                    116,
                                    95,
                                    97,
                                    117,
                                    116,
                                    104,
                                    111,
                                    114,
                                    105,
                                    116,
                                    121
                                ];
                            }
                        ];
                    };
                },
                {
                    name: "program";
                }
            ];
            args: [];
        },
        {
            name: "createTokenBadge";
            discriminator: [88, 206, 0, 91, 60, 175, 151, 118];
            accounts: [
                {
                    name: "tokenBadge";
                    writable: true;
                    pda: {
                        seeds: [
                            {
                                kind: "const";
                                value: [116, 111, 107, 101, 110, 95, 98, 97, 100, 103, 101];
                            },
                            {
                                kind: "account";
                                path: "tokenMint";
                            }
                        ];
                    };
                },
                {
                    name: "tokenMint";
                },
                {
                    name: "admin";
                    writable: true;
                    signer: true;
                },
                {
                    name: "systemProgram";
                    address: "11111111111111111111111111111111";
                },
                {
                    name: "eventAuthority";
                    pda: {
                        seeds: [
                            {
                                kind: "const";
                                value: [
                                    95,
                                    95,
                                    101,
                                    118,
                                    101,
                                    110,
                                    116,
                                    95,
                                    97,
                                    117,
                                    116,
                                    104,
                                    111,
                                    114,
                                    105,
                                    116,
                                    121
                                ];
                            }
                        ];
                    };
                },
                {
                    name: "program";
                }
            ];
            args: [];
        },
        {
            name: "fundReward";
            discriminator: [188, 50, 249, 165, 93, 151, 38, 63];
            accounts: [
                {
                    name: "pool";
                    writable: true;
                },
                {
                    name: "rewardVault";
                    writable: true;
                },
                {
                    name: "rewardMint";
                },
                {
                    name: "funderTokenAccount";
                    writable: true;
                },
                {
                    name: "funder";
                    signer: true;
                },
                {
                    name: "tokenProgram";
                },
                {
                    name: "eventAuthority";
                    pda: {
                        seeds: [
                            {
                                kind: "const";
                                value: [
                                    95,
                                    95,
                                    101,
                                    118,
                                    101,
                                    110,
                                    116,
                                    95,
                                    97,
                                    117,
                                    116,
                                    104,
                                    111,
                                    114,
                                    105,
                                    116,
                                    121
                                ];
                            }
                        ];
                    };
                },
                {
                    name: "program";
                }
            ];
            args: [
                {
                    name: "rewardIndex";
                    type: "u8";
                },
                {
                    name: "amount";
                    type: "u64";
                },
                {
                    name: "carryForward";
                    type: "bool";
                }
            ];
        },
        {
            name: "initializeCustomizablePool";
            discriminator: [20, 161, 241, 24, 189, 221, 180, 2];
            accounts: [
                {
                    name: "creator";
                },
                {
                    name: "positionNftMint";
                    docs: ["positionNftMint"];
                    writable: true;
                    signer: true;
                },
                {
                    name: "positionNftAccount";
                    docs: ["position nft account"];
                    writable: true;
                    pda: {
                        seeds: [
                            {
                                kind: "const";
                                value: [
                                    112,
                                    111,
                                    115,
                                    105,
                                    116,
                                    105,
                                    111,
                                    110,
                                    95,
                                    110,
                                    102,
                                    116,
                                    95,
                                    97,
                                    99,
                                    99,
                                    111,
                                    117,
                                    110,
                                    116
                                ];
                            },
                            {
                                kind: "account";
                                path: "positionNftMint";
                            }
                        ];
                    };
                },
                {
                    name: "payer";
                    docs: ["Address paying to create the pool. Can be anyone"];
                    writable: true;
                    signer: true;
                },
                {
                    name: "poolAuthority";
                    address: "HLnpSz9h2S4hiLQ43rnSD9XkcUThA7B8hQMKmDaiTLcC";
                },
                {
                    name: "pool";
                    docs: ["Initialize an account to store the pool state"];
                    writable: true;
                },
                {
                    name: "position";
                    writable: true;
                    pda: {
                        seeds: [
                            {
                                kind: "const";
                                value: [112, 111, 115, 105, 116, 105, 111, 110];
                            },
                            {
                                kind: "account";
                                path: "positionNftMint";
                            }
                        ];
                    };
                },
                {
                    name: "tokenAMint";
                    docs: ["Token a mint"];
                },
                {
                    name: "tokenBMint";
                    docs: ["Token b mint"];
                },
                {
                    name: "tokenAVault";
                    docs: ["Token a vault for the pool"];
                    writable: true;
                    pda: {
                        seeds: [
                            {
                                kind: "const";
                                value: [116, 111, 107, 101, 110, 95, 118, 97, 117, 108, 116];
                            },
                            {
                                kind: "account";
                                path: "tokenAMint";
                            },
                            {
                                kind: "account";
                                path: "pool";
                            }
                        ];
                    };
                },
                {
                    name: "tokenBVault";
                    docs: ["Token b vault for the pool"];
                    writable: true;
                    pda: {
                        seeds: [
                            {
                                kind: "const";
                                value: [116, 111, 107, 101, 110, 95, 118, 97, 117, 108, 116];
                            },
                            {
                                kind: "account";
                                path: "tokenBMint";
                            },
                            {
                                kind: "account";
                                path: "pool";
                            }
                        ];
                    };
                },
                {
                    name: "payerTokenA";
                    docs: ["payer token a account"];
                    writable: true;
                },
                {
                    name: "payerTokenB";
                    docs: ["creator token b account"];
                    writable: true;
                },
                {
                    name: "tokenAProgram";
                    docs: ["Program to create mint account and mint tokens"];
                },
                {
                    name: "tokenBProgram";
                    docs: ["Program to create mint account and mint tokens"];
                },
                {
                    name: "token2022Program";
                    docs: [
                        "Program to create NFT mint/token account and transfer for token22 account"
                    ];
                    address: "TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb";
                },
                {
                    name: "systemProgram";
                    address: "11111111111111111111111111111111";
                },
                {
                    name: "eventAuthority";
                    pda: {
                        seeds: [
                            {
                                kind: "const";
                                value: [
                                    95,
                                    95,
                                    101,
                                    118,
                                    101,
                                    110,
                                    116,
                                    95,
                                    97,
                                    117,
                                    116,
                                    104,
                                    111,
                                    114,
                                    105,
                                    116,
                                    121
                                ];
                            }
                        ];
                    };
                },
                {
                    name: "program";
                }
            ];
            args: [
                {
                    name: "params";
                    type: {
                        defined: {
                            name: "initializeCustomizablePoolParameters";
                        };
                    };
                }
            ];
        },
        {
            name: "initializePool";
            docs: ["USER FUNCTIONS ////"];
            discriminator: [95, 180, 10, 172, 84, 174, 232, 40];
            accounts: [
                {
                    name: "creator";
                },
                {
                    name: "positionNftMint";
                    docs: ["positionNftMint"];
                    writable: true;
                    signer: true;
                },
                {
                    name: "positionNftAccount";
                    docs: ["position nft account"];
                    writable: true;
                    pda: {
                        seeds: [
                            {
                                kind: "const";
                                value: [
                                    112,
                                    111,
                                    115,
                                    105,
                                    116,
                                    105,
                                    111,
                                    110,
                                    95,
                                    110,
                                    102,
                                    116,
                                    95,
                                    97,
                                    99,
                                    99,
                                    111,
                                    117,
                                    110,
                                    116
                                ];
                            },
                            {
                                kind: "account";
                                path: "positionNftMint";
                            }
                        ];
                    };
                },
                {
                    name: "payer";
                    docs: ["Address paying to create the pool. Can be anyone"];
                    writable: true;
                    signer: true;
                },
                {
                    name: "config";
                    docs: ["Which config the pool belongs to."];
                },
                {
                    name: "poolAuthority";
                    address: "HLnpSz9h2S4hiLQ43rnSD9XkcUThA7B8hQMKmDaiTLcC";
                },
                {
                    name: "pool";
                    docs: ["Initialize an account to store the pool state"];
                    writable: true;
                },
                {
                    name: "position";
                    writable: true;
                    pda: {
                        seeds: [
                            {
                                kind: "const";
                                value: [112, 111, 115, 105, 116, 105, 111, 110];
                            },
                            {
                                kind: "account";
                                path: "positionNftMint";
                            }
                        ];
                    };
                },
                {
                    name: "tokenAMint";
                    docs: ["Token a mint"];
                },
                {
                    name: "tokenBMint";
                    docs: ["Token b mint"];
                },
                {
                    name: "tokenAVault";
                    docs: ["Token a vault for the pool"];
                    writable: true;
                    pda: {
                        seeds: [
                            {
                                kind: "const";
                                value: [116, 111, 107, 101, 110, 95, 118, 97, 117, 108, 116];
                            },
                            {
                                kind: "account";
                                path: "tokenAMint";
                            },
                            {
                                kind: "account";
                                path: "pool";
                            }
                        ];
                    };
                },
                {
                    name: "tokenBVault";
                    docs: ["Token b vault for the pool"];
                    writable: true;
                    pda: {
                        seeds: [
                            {
                                kind: "const";
                                value: [116, 111, 107, 101, 110, 95, 118, 97, 117, 108, 116];
                            },
                            {
                                kind: "account";
                                path: "tokenBMint";
                            },
                            {
                                kind: "account";
                                path: "pool";
                            }
                        ];
                    };
                },
                {
                    name: "payerTokenA";
                    docs: ["payer token a account"];
                    writable: true;
                },
                {
                    name: "payerTokenB";
                    docs: ["creator token b account"];
                    writable: true;
                },
                {
                    name: "tokenAProgram";
                    docs: ["Program to create mint account and mint tokens"];
                },
                {
                    name: "tokenBProgram";
                    docs: ["Program to create mint account and mint tokens"];
                },
                {
                    name: "token2022Program";
                    docs: [
                        "Program to create NFT mint/token account and transfer for token22 account"
                    ];
                    address: "TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb";
                },
                {
                    name: "systemProgram";
                    address: "11111111111111111111111111111111";
                },
                {
                    name: "eventAuthority";
                    pda: {
                        seeds: [
                            {
                                kind: "const";
                                value: [
                                    95,
                                    95,
                                    101,
                                    118,
                                    101,
                                    110,
                                    116,
                                    95,
                                    97,
                                    117,
                                    116,
                                    104,
                                    111,
                                    114,
                                    105,
                                    116,
                                    121
                                ];
                            }
                        ];
                    };
                },
                {
                    name: "program";
                }
            ];
            args: [
                {
                    name: "params";
                    type: {
                        defined: {
                            name: "initializePoolParameters";
                        };
                    };
                }
            ];
        },
        {
            name: "initializePoolWithDynamicConfig";
            discriminator: [149, 82, 72, 197, 253, 252, 68, 15];
            accounts: [
                {
                    name: "creator";
                },
                {
                    name: "positionNftMint";
                    docs: ["positionNftMint"];
                    writable: true;
                    signer: true;
                },
                {
                    name: "positionNftAccount";
                    docs: ["position nft account"];
                    writable: true;
                    pda: {
                        seeds: [
                            {
                                kind: "const";
                                value: [
                                    112,
                                    111,
                                    115,
                                    105,
                                    116,
                                    105,
                                    111,
                                    110,
                                    95,
                                    110,
                                    102,
                                    116,
                                    95,
                                    97,
                                    99,
                                    99,
                                    111,
                                    117,
                                    110,
                                    116
                                ];
                            },
                            {
                                kind: "account";
                                path: "positionNftMint";
                            }
                        ];
                    };
                },
                {
                    name: "payer";
                    docs: ["Address paying to create the pool. Can be anyone"];
                    writable: true;
                    signer: true;
                },
                {
                    name: "poolCreatorAuthority";
                    signer: true;
                    relations: ["config"];
                },
                {
                    name: "config";
                    docs: ["Which config the pool belongs to."];
                },
                {
                    name: "poolAuthority";
                    address: "HLnpSz9h2S4hiLQ43rnSD9XkcUThA7B8hQMKmDaiTLcC";
                },
                {
                    name: "pool";
                    docs: ["Initialize an account to store the pool state"];
                    writable: true;
                },
                {
                    name: "position";
                    writable: true;
                    pda: {
                        seeds: [
                            {
                                kind: "const";
                                value: [112, 111, 115, 105, 116, 105, 111, 110];
                            },
                            {
                                kind: "account";
                                path: "positionNftMint";
                            }
                        ];
                    };
                },
                {
                    name: "tokenAMint";
                    docs: ["Token a mint"];
                },
                {
                    name: "tokenBMint";
                    docs: ["Token b mint"];
                },
                {
                    name: "tokenAVault";
                    docs: ["Token a vault for the pool"];
                    writable: true;
                    pda: {
                        seeds: [
                            {
                                kind: "const";
                                value: [116, 111, 107, 101, 110, 95, 118, 97, 117, 108, 116];
                            },
                            {
                                kind: "account";
                                path: "tokenAMint";
                            },
                            {
                                kind: "account";
                                path: "pool";
                            }
                        ];
                    };
                },
                {
                    name: "tokenBVault";
                    docs: ["Token b vault for the pool"];
                    writable: true;
                    pda: {
                        seeds: [
                            {
                                kind: "const";
                                value: [116, 111, 107, 101, 110, 95, 118, 97, 117, 108, 116];
                            },
                            {
                                kind: "account";
                                path: "tokenBMint";
                            },
                            {
                                kind: "account";
                                path: "pool";
                            }
                        ];
                    };
                },
                {
                    name: "payerTokenA";
                    docs: ["payer token a account"];
                    writable: true;
                },
                {
                    name: "payerTokenB";
                    docs: ["creator token b account"];
                    writable: true;
                },
                {
                    name: "tokenAProgram";
                    docs: ["Program to create mint account and mint tokens"];
                },
                {
                    name: "tokenBProgram";
                    docs: ["Program to create mint account and mint tokens"];
                },
                {
                    name: "token2022Program";
                    docs: [
                        "Program to create NFT mint/token account and transfer for token22 account"
                    ];
                    address: "TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb";
                },
                {
                    name: "systemProgram";
                    address: "11111111111111111111111111111111";
                },
                {
                    name: "eventAuthority";
                    pda: {
                        seeds: [
                            {
                                kind: "const";
                                value: [
                                    95,
                                    95,
                                    101,
                                    118,
                                    101,
                                    110,
                                    116,
                                    95,
                                    97,
                                    117,
                                    116,
                                    104,
                                    111,
                                    114,
                                    105,
                                    116,
                                    121
                                ];
                            }
                        ];
                    };
                },
                {
                    name: "program";
                }
            ];
            args: [
                {
                    name: "params";
                    type: {
                        defined: {
                            name: "initializeCustomizablePoolParameters";
                        };
                    };
                }
            ];
        },
        {
            name: "initializeReward";
            discriminator: [95, 135, 192, 196, 242, 129, 230, 68];
            accounts: [
                {
                    name: "poolAuthority";
                    address: "HLnpSz9h2S4hiLQ43rnSD9XkcUThA7B8hQMKmDaiTLcC";
                },
                {
                    name: "pool";
                    writable: true;
                },
                {
                    name: "rewardVault";
                    writable: true;
                    pda: {
                        seeds: [
                            {
                                kind: "const";
                                value: [
                                    114,
                                    101,
                                    119,
                                    97,
                                    114,
                                    100,
                                    95,
                                    118,
                                    97,
                                    117,
                                    108,
                                    116
                                ];
                            },
                            {
                                kind: "account";
                                path: "pool";
                            },
                            {
                                kind: "arg";
                                path: "rewardIndex";
                            }
                        ];
                    };
                },
                {
                    name: "rewardMint";
                },
                {
                    name: "signer";
                    signer: true;
                },
                {
                    name: "payer";
                    writable: true;
                    signer: true;
                },
                {
                    name: "tokenProgram";
                },
                {
                    name: "systemProgram";
                    address: "11111111111111111111111111111111";
                },
                {
                    name: "eventAuthority";
                    pda: {
                        seeds: [
                            {
                                kind: "const";
                                value: [
                                    95,
                                    95,
                                    101,
                                    118,
                                    101,
                                    110,
                                    116,
                                    95,
                                    97,
                                    117,
                                    116,
                                    104,
                                    111,
                                    114,
                                    105,
                                    116,
                                    121
                                ];
                            }
                        ];
                    };
                },
                {
                    name: "program";
                }
            ];
            args: [
                {
                    name: "rewardIndex";
                    type: "u8";
                },
                {
                    name: "rewardDuration";
                    type: "u64";
                },
                {
                    name: "funder";
                    type: "pubkey";
                }
            ];
        },
        {
            name: "lockPosition";
            discriminator: [227, 62, 2, 252, 247, 10, 171, 185];
            accounts: [
                {
                    name: "pool";
                    relations: ["position"];
                },
                {
                    name: "position";
                    writable: true;
                },
                {
                    name: "vesting";
                    writable: true;
                    signer: true;
                },
                {
                    name: "positionNftAccount";
                    docs: ["The token account for nft"];
                },
                {
                    name: "owner";
                    docs: ["owner of position"];
                    signer: true;
                },
                {
                    name: "payer";
                    writable: true;
                    signer: true;
                },
                {
                    name: "systemProgram";
                    address: "11111111111111111111111111111111";
                },
                {
                    name: "eventAuthority";
                    pda: {
                        seeds: [
                            {
                                kind: "const";
                                value: [
                                    95,
                                    95,
                                    101,
                                    118,
                                    101,
                                    110,
                                    116,
                                    95,
                                    97,
                                    117,
                                    116,
                                    104,
                                    111,
                                    114,
                                    105,
                                    116,
                                    121
                                ];
                            }
                        ];
                    };
                },
                {
                    name: "program";
                }
            ];
            args: [
                {
                    name: "params";
                    type: {
                        defined: {
                            name: "vestingParameters";
                        };
                    };
                }
            ];
        },
        {
            name: "permanentLockPosition";
            discriminator: [165, 176, 125, 6, 231, 171, 186, 213];
            accounts: [
                {
                    name: "pool";
                    writable: true;
                    relations: ["position"];
                },
                {
                    name: "position";
                    writable: true;
                },
                {
                    name: "positionNftAccount";
                    docs: ["The token account for nft"];
                },
                {
                    name: "owner";
                    docs: ["owner of position"];
                    signer: true;
                },
                {
                    name: "eventAuthority";
                    pda: {
                        seeds: [
                            {
                                kind: "const";
                                value: [
                                    95,
                                    95,
                                    101,
                                    118,
                                    101,
                                    110,
                                    116,
                                    95,
                                    97,
                                    117,
                                    116,
                                    104,
                                    111,
                                    114,
                                    105,
                                    116,
                                    121
                                ];
                            }
                        ];
                    };
                },
                {
                    name: "program";
                }
            ];
            args: [
                {
                    name: "permanentLockLiquidity";
                    type: "u128";
                }
            ];
        },
        {
            name: "refreshVesting";
            discriminator: [9, 94, 216, 14, 116, 204, 247, 0];
            accounts: [
                {
                    name: "pool";
                    relations: ["position"];
                },
                {
                    name: "position";
                    writable: true;
                },
                {
                    name: "positionNftAccount";
                    docs: ["The token account for nft"];
                },
                {
                    name: "owner";
                }
            ];
            args: [];
        },
        {
            name: "removeAllLiquidity";
            discriminator: [10, 51, 61, 35, 112, 105, 24, 85];
            accounts: [
                {
                    name: "poolAuthority";
                    address: "HLnpSz9h2S4hiLQ43rnSD9XkcUThA7B8hQMKmDaiTLcC";
                },
                {
                    name: "pool";
                    writable: true;
                    relations: ["position"];
                },
                {
                    name: "position";
                    writable: true;
                },
                {
                    name: "tokenAAccount";
                    docs: ["The user token a account"];
                    writable: true;
                },
                {
                    name: "tokenBAccount";
                    docs: ["The user token b account"];
                    writable: true;
                },
                {
                    name: "tokenAVault";
                    docs: ["The vault token account for input token"];
                    writable: true;
                    relations: ["pool"];
                },
                {
                    name: "tokenBVault";
                    docs: ["The vault token account for output token"];
                    writable: true;
                    relations: ["pool"];
                },
                {
                    name: "tokenAMint";
                    docs: ["The mint of token a"];
                    relations: ["pool"];
                },
                {
                    name: "tokenBMint";
                    docs: ["The mint of token b"];
                    relations: ["pool"];
                },
                {
                    name: "positionNftAccount";
                    docs: ["The token account for nft"];
                },
                {
                    name: "owner";
                    docs: ["owner of position"];
                    signer: true;
                },
                {
                    name: "tokenAProgram";
                    docs: ["Token a program"];
                },
                {
                    name: "tokenBProgram";
                    docs: ["Token b program"];
                },
                {
                    name: "eventAuthority";
                    pda: {
                        seeds: [
                            {
                                kind: "const";
                                value: [
                                    95,
                                    95,
                                    101,
                                    118,
                                    101,
                                    110,
                                    116,
                                    95,
                                    97,
                                    117,
                                    116,
                                    104,
                                    111,
                                    114,
                                    105,
                                    116,
                                    121
                                ];
                            }
                        ];
                    };
                },
                {
                    name: "program";
                }
            ];
            args: [
                {
                    name: "tokenAAmountThreshold";
                    type: "u64";
                },
                {
                    name: "tokenBAmountThreshold";
                    type: "u64";
                }
            ];
        },
        {
            name: "removeLiquidity";
            discriminator: [80, 85, 209, 72, 24, 206, 177, 108];
            accounts: [
                {
                    name: "poolAuthority";
                    address: "HLnpSz9h2S4hiLQ43rnSD9XkcUThA7B8hQMKmDaiTLcC";
                },
                {
                    name: "pool";
                    writable: true;
                    relations: ["position"];
                },
                {
                    name: "position";
                    writable: true;
                },
                {
                    name: "tokenAAccount";
                    docs: ["The user token a account"];
                    writable: true;
                },
                {
                    name: "tokenBAccount";
                    docs: ["The user token b account"];
                    writable: true;
                },
                {
                    name: "tokenAVault";
                    docs: ["The vault token account for input token"];
                    writable: true;
                    relations: ["pool"];
                },
                {
                    name: "tokenBVault";
                    docs: ["The vault token account for output token"];
                    writable: true;
                    relations: ["pool"];
                },
                {
                    name: "tokenAMint";
                    docs: ["The mint of token a"];
                    relations: ["pool"];
                },
                {
                    name: "tokenBMint";
                    docs: ["The mint of token b"];
                    relations: ["pool"];
                },
                {
                    name: "positionNftAccount";
                    docs: ["The token account for nft"];
                },
                {
                    name: "owner";
                    docs: ["owner of position"];
                    signer: true;
                },
                {
                    name: "tokenAProgram";
                    docs: ["Token a program"];
                },
                {
                    name: "tokenBProgram";
                    docs: ["Token b program"];
                },
                {
                    name: "eventAuthority";
                    pda: {
                        seeds: [
                            {
                                kind: "const";
                                value: [
                                    95,
                                    95,
                                    101,
                                    118,
                                    101,
                                    110,
                                    116,
                                    95,
                                    97,
                                    117,
                                    116,
                                    104,
                                    111,
                                    114,
                                    105,
                                    116,
                                    121
                                ];
                            }
                        ];
                    };
                },
                {
                    name: "program";
                }
            ];
            args: [
                {
                    name: "params";
                    type: {
                        defined: {
                            name: "removeLiquidityParameters";
                        };
                    };
                }
            ];
        },
        {
            name: "setPoolStatus";
            discriminator: [112, 87, 135, 223, 83, 204, 132, 53];
            accounts: [
                {
                    name: "pool";
                    writable: true;
                },
                {
                    name: "admin";
                    signer: true;
                },
                {
                    name: "eventAuthority";
                    pda: {
                        seeds: [
                            {
                                kind: "const";
                                value: [
                                    95,
                                    95,
                                    101,
                                    118,
                                    101,
                                    110,
                                    116,
                                    95,
                                    97,
                                    117,
                                    116,
                                    104,
                                    111,
                                    114,
                                    105,
                                    116,
                                    121
                                ];
                            }
                        ];
                    };
                },
                {
                    name: "program";
                }
            ];
            args: [
                {
                    name: "status";
                    type: "u8";
                }
            ];
        },
        {
            name: "splitPosition";
            discriminator: [172, 241, 221, 138, 161, 29, 253, 42];
            accounts: [
                {
                    name: "pool";
                    writable: true;
                    relations: ["firstPosition", "secondPosition"];
                },
                {
                    name: "firstPosition";
                    docs: ["The first position"];
                    writable: true;
                },
                {
                    name: "firstPositionNftAccount";
                    docs: ["The token account for position nft"];
                },
                {
                    name: "secondPosition";
                    docs: ["The second position"];
                    writable: true;
                },
                {
                    name: "secondPositionNftAccount";
                    docs: ["The token account for position nft"];
                },
                {
                    name: "firstOwner";
                    docs: ["Owner of first position"];
                    signer: true;
                },
                {
                    name: "secondOwner";
                    docs: ["Owner of second position"];
                    signer: true;
                },
                {
                    name: "eventAuthority";
                    pda: {
                        seeds: [
                            {
                                kind: "const";
                                value: [
                                    95,
                                    95,
                                    101,
                                    118,
                                    101,
                                    110,
                                    116,
                                    95,
                                    97,
                                    117,
                                    116,
                                    104,
                                    111,
                                    114,
                                    105,
                                    116,
                                    121
                                ];
                            }
                        ];
                    };
                },
                {
                    name: "program";
                }
            ];
            args: [
                {
                    name: "params";
                    type: {
                        defined: {
                            name: "splitPositionParameters";
                        };
                    };
                }
            ];
        },
        {
            name: "swap";
            discriminator: [248, 198, 158, 145, 225, 117, 135, 200];
            accounts: [
                {
                    name: "poolAuthority";
                    address: "HLnpSz9h2S4hiLQ43rnSD9XkcUThA7B8hQMKmDaiTLcC";
                },
                {
                    name: "pool";
                    docs: ["Pool account"];
                    writable: true;
                },
                {
                    name: "inputTokenAccount";
                    docs: ["The user token account for input token"];
                    writable: true;
                },
                {
                    name: "outputTokenAccount";
                    docs: ["The user token account for output token"];
                    writable: true;
                },
                {
                    name: "tokenAVault";
                    docs: ["The vault token account for input token"];
                    writable: true;
                    relations: ["pool"];
                },
                {
                    name: "tokenBVault";
                    docs: ["The vault token account for output token"];
                    writable: true;
                    relations: ["pool"];
                },
                {
                    name: "tokenAMint";
                    docs: ["The mint of token a"];
                },
                {
                    name: "tokenBMint";
                    docs: ["The mint of token b"];
                },
                {
                    name: "payer";
                    docs: ["The user performing the swap"];
                    signer: true;
                },
                {
                    name: "tokenAProgram";
                    docs: ["Token a program"];
                },
                {
                    name: "tokenBProgram";
                    docs: ["Token b program"];
                },
                {
                    name: "referralTokenAccount";
                    docs: ["referral token account"];
                    writable: true;
                    optional: true;
                },
                {
                    name: "eventAuthority";
                    pda: {
                        seeds: [
                            {
                                kind: "const";
                                value: [
                                    95,
                                    95,
                                    101,
                                    118,
                                    101,
                                    110,
                                    116,
                                    95,
                                    97,
                                    117,
                                    116,
                                    104,
                                    111,
                                    114,
                                    105,
                                    116,
                                    121
                                ];
                            }
                        ];
                    };
                },
                {
                    name: "program";
                }
            ];
            args: [
                {
                    name: "params";
                    type: {
                        defined: {
                            name: "swapParameters";
                        };
                    };
                }
            ];
        },
        {
            name: "updateRewardDuration";
            discriminator: [138, 174, 196, 169, 213, 235, 254, 107];
            accounts: [
                {
                    name: "pool";
                    writable: true;
                },
                {
                    name: "signer";
                    signer: true;
                },
                {
                    name: "eventAuthority";
                    pda: {
                        seeds: [
                            {
                                kind: "const";
                                value: [
                                    95,
                                    95,
                                    101,
                                    118,
                                    101,
                                    110,
                                    116,
                                    95,
                                    97,
                                    117,
                                    116,
                                    104,
                                    111,
                                    114,
                                    105,
                                    116,
                                    121
                                ];
                            }
                        ];
                    };
                },
                {
                    name: "program";
                }
            ];
            args: [
                {
                    name: "rewardIndex";
                    type: "u8";
                },
                {
                    name: "newDuration";
                    type: "u64";
                }
            ];
        },
        {
            name: "updateRewardFunder";
            discriminator: [211, 28, 48, 32, 215, 160, 35, 23];
            accounts: [
                {
                    name: "pool";
                    writable: true;
                },
                {
                    name: "signer";
                    signer: true;
                },
                {
                    name: "eventAuthority";
                    pda: {
                        seeds: [
                            {
                                kind: "const";
                                value: [
                                    95,
                                    95,
                                    101,
                                    118,
                                    101,
                                    110,
                                    116,
                                    95,
                                    97,
                                    117,
                                    116,
                                    104,
                                    111,
                                    114,
                                    105,
                                    116,
                                    121
                                ];
                            }
                        ];
                    };
                },
                {
                    name: "program";
                }
            ];
            args: [
                {
                    name: "rewardIndex";
                    type: "u8";
                },
                {
                    name: "newFunder";
                    type: "pubkey";
                }
            ];
        },
        {
            name: "withdrawIneligibleReward";
            discriminator: [148, 206, 42, 195, 247, 49, 103, 8];
            accounts: [
                {
                    name: "poolAuthority";
                    address: "HLnpSz9h2S4hiLQ43rnSD9XkcUThA7B8hQMKmDaiTLcC";
                },
                {
                    name: "pool";
                    writable: true;
                },
                {
                    name: "rewardVault";
                    writable: true;
                },
                {
                    name: "rewardMint";
                },
                {
                    name: "funderTokenAccount";
                    writable: true;
                },
                {
                    name: "funder";
                    signer: true;
                },
                {
                    name: "tokenProgram";
                },
                {
                    name: "eventAuthority";
                    pda: {
                        seeds: [
                            {
                                kind: "const";
                                value: [
                                    95,
                                    95,
                                    101,
                                    118,
                                    101,
                                    110,
                                    116,
                                    95,
                                    97,
                                    117,
                                    116,
                                    104,
                                    111,
                                    114,
                                    105,
                                    116,
                                    121
                                ];
                            }
                        ];
                    };
                },
                {
                    name: "program";
                }
            ];
            args: [
                {
                    name: "rewardIndex";
                    type: "u8";
                }
            ];
        }
    ];
    accounts: [
        {
            name: "claimFeeOperator";
            discriminator: [166, 48, 134, 86, 34, 200, 188, 150];
        },
        {
            name: "config";
            discriminator: [155, 12, 170, 224, 30, 250, 204, 130];
        },
        {
            name: "pool";
            discriminator: [241, 154, 109, 4, 17, 177, 109, 188];
        },
        {
            name: "position";
            discriminator: [170, 188, 143, 228, 122, 64, 247, 208];
        },
        {
            name: "tokenBadge";
            discriminator: [116, 219, 204, 229, 249, 116, 255, 150];
        },
        {
            name: "vesting";
            discriminator: [100, 149, 66, 138, 95, 200, 128, 241];
        }
    ];
    events: [
        {
            name: "evtAddLiquidity";
            discriminator: [175, 242, 8, 157, 30, 247, 185, 169];
        },
        {
            name: "evtClaimPartnerFee";
            discriminator: [118, 99, 77, 10, 226, 1, 1, 87];
        },
        {
            name: "evtClaimPositionFee";
            discriminator: [198, 182, 183, 52, 97, 12, 49, 56];
        },
        {
            name: "evtClaimProtocolFee";
            discriminator: [186, 244, 75, 251, 188, 13, 25, 33];
        },
        {
            name: "evtClaimReward";
            discriminator: [218, 86, 147, 200, 235, 188, 215, 231];
        },
        {
            name: "evtCloseClaimFeeOperator";
            discriminator: [111, 39, 37, 55, 110, 216, 194, 23];
        },
        {
            name: "evtCloseConfig";
            discriminator: [36, 30, 239, 45, 58, 132, 14, 5];
        },
        {
            name: "evtClosePosition";
            discriminator: [20, 145, 144, 68, 143, 142, 214, 178];
        },
        {
            name: "evtCreateClaimFeeOperator";
            discriminator: [21, 6, 153, 120, 68, 116, 28, 177];
        },
        {
            name: "evtCreateConfig";
            discriminator: [131, 207, 180, 174, 180, 73, 165, 54];
        },
        {
            name: "evtCreateDynamicConfig";
            discriminator: [231, 197, 13, 164, 248, 213, 133, 152];
        },
        {
            name: "evtCreatePosition";
            discriminator: [156, 15, 119, 198, 29, 181, 221, 55];
        },
        {
            name: "evtCreateTokenBadge";
            discriminator: [141, 120, 134, 116, 34, 28, 114, 160];
        },
        {
            name: "evtFundReward";
            discriminator: [104, 233, 237, 122, 199, 191, 121, 85];
        },
        {
            name: "evtInitializePool";
            discriminator: [228, 50, 246, 85, 203, 66, 134, 37];
        },
        {
            name: "evtInitializeReward";
            discriminator: [129, 91, 188, 3, 246, 52, 185, 249];
        },
        {
            name: "evtLockPosition";
            discriminator: [168, 63, 108, 83, 219, 82, 2, 200];
        },
        {
            name: "evtPermanentLockPosition";
            discriminator: [145, 143, 162, 218, 218, 80, 67, 11];
        },
        {
            name: "evtRemoveLiquidity";
            discriminator: [87, 46, 88, 98, 175, 96, 34, 91];
        },
        {
            name: "evtSetPoolStatus";
            discriminator: [100, 213, 74, 3, 95, 91, 228, 146];
        },
        {
            name: "evtSplitPosition";
            discriminator: [182, 138, 42, 254, 27, 94, 82, 221];
        },
        {
            name: "evtSwap";
            discriminator: [27, 60, 21, 213, 138, 170, 187, 147];
        },
        {
            name: "evtUpdateRewardDuration";
            discriminator: [149, 135, 65, 231, 129, 153, 65, 57];
        },
        {
            name: "evtUpdateRewardFunder";
            discriminator: [76, 154, 208, 13, 40, 115, 246, 146];
        },
        {
            name: "evtWithdrawIneligibleReward";
            discriminator: [248, 215, 184, 78, 31, 180, 179, 168];
        }
    ];
    errors: [
        {
            code: 6000;
            name: "mathOverflow";
            msg: "Math operation overflow";
        },
        {
            code: 6001;
            name: "invalidFee";
            msg: "Invalid fee setup";
        },
        {
            code: 6002;
            name: "exceededSlippage";
            msg: "Exceeded slippage tolerance";
        },
        {
            code: 6003;
            name: "poolDisabled";
            msg: "Pool disabled";
        },
        {
            code: 6004;
            name: "exceedMaxFeeBps";
            msg: "Exceeded max fee bps";
        },
        {
            code: 6005;
            name: "invalidAdmin";
            msg: "Invalid admin";
        },
        {
            code: 6006;
            name: "amountIsZero";
            msg: "Amount is zero";
        },
        {
            code: 6007;
            name: "typeCastFailed";
            msg: "Type cast error";
        },
        {
            code: 6008;
            name: "unableToModifyActivationPoint";
            msg: "Unable to modify activation point";
        },
        {
            code: 6009;
            name: "invalidAuthorityToCreateThePool";
            msg: "Invalid authority to create the pool";
        },
        {
            code: 6010;
            name: "invalidActivationType";
            msg: "Invalid activation type";
        },
        {
            code: 6011;
            name: "invalidActivationPoint";
            msg: "Invalid activation point";
        },
        {
            code: 6012;
            name: "invalidQuoteMint";
            msg: "Quote token must be SOL,USDC";
        },
        {
            code: 6013;
            name: "invalidFeeCurve";
            msg: "Invalid fee curve";
        },
        {
            code: 6014;
            name: "invalidPriceRange";
            msg: "Invalid Price Range";
        },
        {
            code: 6015;
            name: "priceRangeViolation";
            msg: "Trade is over price range";
        },
        {
            code: 6016;
            name: "invalidParameters";
            msg: "Invalid parameters";
        },
        {
            code: 6017;
            name: "invalidCollectFeeMode";
            msg: "Invalid collect fee mode";
        },
        {
            code: 6018;
            name: "invalidInput";
            msg: "Invalid input";
        },
        {
            code: 6019;
            name: "cannotCreateTokenBadgeOnSupportedMint";
            msg: "Cannot create token badge on supported mint";
        },
        {
            code: 6020;
            name: "invalidTokenBadge";
            msg: "Invalid token badge";
        },
        {
            code: 6021;
            name: "invalidMinimumLiquidity";
            msg: "Invalid minimum liquidity";
        },
        {
            code: 6022;
            name: "invalidVestingInfo";
            msg: "Invalid vesting information";
        },
        {
            code: 6023;
            name: "insufficientLiquidity";
            msg: "Insufficient liquidity";
        },
        {
            code: 6024;
            name: "invalidVestingAccount";
            msg: "Invalid vesting account";
        },
        {
            code: 6025;
            name: "invalidPoolStatus";
            msg: "Invalid pool status";
        },
        {
            code: 6026;
            name: "unsupportNativeMintToken2022";
            msg: "Unsupported native mint token2022";
        },
        {
            code: 6027;
            name: "invalidRewardIndex";
            msg: "Invalid reward index";
        },
        {
            code: 6028;
            name: "invalidRewardDuration";
            msg: "Invalid reward duration";
        },
        {
            code: 6029;
            name: "rewardInitialized";
            msg: "Reward already initialized";
        },
        {
            code: 6030;
            name: "rewardUninitialized";
            msg: "Reward not initialized";
        },
        {
            code: 6031;
            name: "invalidRewardVault";
            msg: "Invalid reward vault";
        },
        {
            code: 6032;
            name: "mustWithdrawnIneligibleReward";
            msg: "Must withdraw ineligible reward";
        },
        {
            code: 6033;
            name: "identicalRewardDuration";
            msg: "Reward duration is the same";
        },
        {
            code: 6034;
            name: "rewardCampaignInProgress";
            msg: "Reward campaign in progress";
        },
        {
            code: 6035;
            name: "identicalFunder";
            msg: "Identical funder";
        },
        {
            code: 6036;
            name: "invalidFunder";
            msg: "Invalid funder";
        },
        {
            code: 6037;
            name: "rewardNotEnded";
            msg: "Reward not ended";
        },
        {
            code: 6038;
            name: "feeInverseIsIncorrect";
            msg: "Fee inverse is incorrect";
        },
        {
            code: 6039;
            name: "positionIsNotEmpty";
            msg: "Position is not empty";
        },
        {
            code: 6040;
            name: "invalidPoolCreatorAuthority";
            msg: "Invalid pool creator authority";
        },
        {
            code: 6041;
            name: "invalidConfigType";
            msg: "Invalid config type";
        },
        {
            code: 6042;
            name: "invalidPoolCreator";
            msg: "Invalid pool creator";
        },
        {
            code: 6043;
            name: "rewardVaultFrozenSkipRequired";
            msg: "Reward vault is frozen, must skip reward to proceed";
        },
        {
            code: 6044;
            name: "invalidSplitPositionParameters";
            msg: "Invalid parameters for split position";
        },
        {
            code: 6045;
            name: "unsupportPositionHasVestingLock";
            msg: "Unsupported split position has vesting lock";
        },
        {
            code: 6046;
            name: "samePosition";
            msg: "Same position";
        }
    ];
    types: [
        {
            name: "addLiquidityParameters";
            type: {
                kind: "struct";
                fields: [
                    {
                        name: "liquidityDelta";
                        docs: ["delta liquidity"];
                        type: "u128";
                    },
                    {
                        name: "tokenAAmountThreshold";
                        docs: ["maximum token a amount"];
                        type: "u64";
                    },
                    {
                        name: "tokenBAmountThreshold";
                        docs: ["maximum token b amount"];
                        type: "u64";
                    }
                ];
            };
        },
        {
            name: "baseFeeConfig";
            serialization: "bytemuck";
            repr: {
                kind: "c";
            };
            type: {
                kind: "struct";
                fields: [
                    {
                        name: "cliffFeeNumerator";
                        type: "u64";
                    },
                    {
                        name: "feeSchedulerMode";
                        type: "u8";
                    },
                    {
                        name: "padding";
                        type: {
                            array: ["u8", 5];
                        };
                    },
                    {
                        name: "numberOfPeriod";
                        type: "u16";
                    },
                    {
                        name: "periodFrequency";
                        type: "u64";
                    },
                    {
                        name: "reductionFactor";
                        type: "u64";
                    }
                ];
            };
        },
        {
            name: "baseFeeParameters";
            type: {
                kind: "struct";
                fields: [
                    {
                        name: "cliffFeeNumerator";
                        type: "u64";
                    },
                    {
                        name: "numberOfPeriod";
                        type: "u16";
                    },
                    {
                        name: "periodFrequency";
                        type: "u64";
                    },
                    {
                        name: "reductionFactor";
                        type: "u64";
                    },
                    {
                        name: "feeSchedulerMode";
                        type: "u8";
                    }
                ];
            };
        },
        {
            name: "baseFeeStruct";
            serialization: "bytemuck";
            repr: {
                kind: "c";
            };
            type: {
                kind: "struct";
                fields: [
                    {
                        name: "cliffFeeNumerator";
                        type: "u64";
                    },
                    {
                        name: "feeSchedulerMode";
                        type: "u8";
                    },
                    {
                        name: "padding0";
                        type: {
                            array: ["u8", 5];
                        };
                    },
                    {
                        name: "numberOfPeriod";
                        type: "u16";
                    },
                    {
                        name: "periodFrequency";
                        type: "u64";
                    },
                    {
                        name: "reductionFactor";
                        type: "u64";
                    },
                    {
                        name: "padding1";
                        type: "u64";
                    }
                ];
            };
        },
        {
            name: "claimFeeOperator";
            docs: ["Parameter that set by the protocol"];
            serialization: "bytemuck";
            repr: {
                kind: "c";
            };
            type: {
                kind: "struct";
                fields: [
                    {
                        name: "operator";
                        docs: ["operator"];
                        type: "pubkey";
                    },
                    {
                        name: "padding";
                        docs: ["Reserve"];
                        type: {
                            array: ["u8", 128];
                        };
                    }
                ];
            };
        },
        {
            name: "config";
            serialization: "bytemuck";
            repr: {
                kind: "c";
            };
            type: {
                kind: "struct";
                fields: [
                    {
                        name: "vaultConfigKey";
                        docs: ["Vault config key"];
                        type: "pubkey";
                    },
                    {
                        name: "poolCreatorAuthority";
                        docs: [
                            "Only pool_creator_authority can use the current config to initialize new pool. When it's Pubkey::default, it's a public config."
                        ];
                        type: "pubkey";
                    },
                    {
                        name: "poolFees";
                        docs: ["Pool fee"];
                        type: {
                            defined: {
                                name: "poolFeesConfig";
                            };
                        };
                    },
                    {
                        name: "activationType";
                        docs: ["Activation type"];
                        type: "u8";
                    },
                    {
                        name: "collectFeeMode";
                        docs: ["Collect fee mode"];
                        type: "u8";
                    },
                    {
                        name: "configType";
                        docs: ["Config type mode, 0 for static, 1 for dynamic"];
                        type: "u8";
                    },
                    {
                        name: "padding0";
                        docs: ["padding 0"];
                        type: {
                            array: ["u8", 5];
                        };
                    },
                    {
                        name: "index";
                        docs: ["config index"];
                        type: "u64";
                    },
                    {
                        name: "sqrtMinPrice";
                        docs: ["sqrt min price"];
                        type: "u128";
                    },
                    {
                        name: "sqrtMaxPrice";
                        docs: ["sqrt max price"];
                        type: "u128";
                    },
                    {
                        name: "padding1";
                        docs: ["Fee curve point", "Padding for further use"];
                        type: {
                            array: ["u64", 10];
                        };
                    }
                ];
            };
        },
        {
            name: "dynamicConfigParameters";
            type: {
                kind: "struct";
                fields: [
                    {
                        name: "poolCreatorAuthority";
                        type: "pubkey";
                    }
                ];
            };
        },
        {
            name: "dynamicFeeConfig";
            serialization: "bytemuck";
            repr: {
                kind: "c";
            };
            type: {
                kind: "struct";
                fields: [
                    {
                        name: "initialized";
                        type: "u8";
                    },
                    {
                        name: "padding";
                        type: {
                            array: ["u8", 7];
                        };
                    },
                    {
                        name: "maxVolatilityAccumulator";
                        type: "u32";
                    },
                    {
                        name: "variableFeeControl";
                        type: "u32";
                    },
                    {
                        name: "binStep";
                        type: "u16";
                    },
                    {
                        name: "filterPeriod";
                        type: "u16";
                    },
                    {
                        name: "decayPeriod";
                        type: "u16";
                    },
                    {
                        name: "reductionFactor";
                        type: "u16";
                    },
                    {
                        name: "padding1";
                        type: {
                            array: ["u8", 8];
                        };
                    },
                    {
                        name: "binStepU128";
                        type: "u128";
                    }
                ];
            };
        },
        {
            name: "dynamicFeeParameters";
            type: {
                kind: "struct";
                fields: [
                    {
                        name: "binStep";
                        type: "u16";
                    },
                    {
                        name: "binStepU128";
                        type: "u128";
                    },
                    {
                        name: "filterPeriod";
                        type: "u16";
                    },
                    {
                        name: "decayPeriod";
                        type: "u16";
                    },
                    {
                        name: "reductionFactor";
                        type: "u16";
                    },
                    {
                        name: "maxVolatilityAccumulator";
                        type: "u32";
                    },
                    {
                        name: "variableFeeControl";
                        type: "u32";
                    }
                ];
            };
        },
        {
            name: "dynamicFeeStruct";
            serialization: "bytemuck";
            repr: {
                kind: "c";
            };
            type: {
                kind: "struct";
                fields: [
                    {
                        name: "initialized";
                        type: "u8";
                    },
                    {
                        name: "padding";
                        type: {
                            array: ["u8", 7];
                        };
                    },
                    {
                        name: "maxVolatilityAccumulator";
                        type: "u32";
                    },
                    {
                        name: "variableFeeControl";
                        type: "u32";
                    },
                    {
                        name: "binStep";
                        type: "u16";
                    },
                    {
                        name: "filterPeriod";
                        type: "u16";
                    },
                    {
                        name: "decayPeriod";
                        type: "u16";
                    },
                    {
                        name: "reductionFactor";
                        type: "u16";
                    },
                    {
                        name: "lastUpdateTimestamp";
                        type: "u64";
                    },
                    {
                        name: "binStepU128";
                        type: "u128";
                    },
                    {
                        name: "sqrtPriceReference";
                        type: "u128";
                    },
                    {
                        name: "volatilityAccumulator";
                        type: "u128";
                    },
                    {
                        name: "volatilityReference";
                        type: "u128";
                    }
                ];
            };
        },
        {
            name: "evtAddLiquidity";
            type: {
                kind: "struct";
                fields: [
                    {
                        name: "pool";
                        type: "pubkey";
                    },
                    {
                        name: "position";
                        type: "pubkey";
                    },
                    {
                        name: "owner";
                        type: "pubkey";
                    },
                    {
                        name: "params";
                        type: {
                            defined: {
                                name: "addLiquidityParameters";
                            };
                        };
                    },
                    {
                        name: "tokenAAmount";
                        type: "u64";
                    },
                    {
                        name: "tokenBAmount";
                        type: "u64";
                    },
                    {
                        name: "totalAmountA";
                        type: "u64";
                    },
                    {
                        name: "totalAmountB";
                        type: "u64";
                    }
                ];
            };
        },
        {
            name: "evtClaimPartnerFee";
            type: {
                kind: "struct";
                fields: [
                    {
                        name: "pool";
                        type: "pubkey";
                    },
                    {
                        name: "tokenAAmount";
                        type: "u64";
                    },
                    {
                        name: "tokenBAmount";
                        type: "u64";
                    }
                ];
            };
        },
        {
            name: "evtClaimPositionFee";
            type: {
                kind: "struct";
                fields: [
                    {
                        name: "pool";
                        type: "pubkey";
                    },
                    {
                        name: "position";
                        type: "pubkey";
                    },
                    {
                        name: "owner";
                        type: "pubkey";
                    },
                    {
                        name: "feeAClaimed";
                        type: "u64";
                    },
                    {
                        name: "feeBClaimed";
                        type: "u64";
                    }
                ];
            };
        },
        {
            name: "evtClaimProtocolFee";
            type: {
                kind: "struct";
                fields: [
                    {
                        name: "pool";
                        type: "pubkey";
                    },
                    {
                        name: "tokenAAmount";
                        type: "u64";
                    },
                    {
                        name: "tokenBAmount";
                        type: "u64";
                    }
                ];
            };
        },
        {
            name: "evtClaimReward";
            type: {
                kind: "struct";
                fields: [
                    {
                        name: "pool";
                        type: "pubkey";
                    },
                    {
                        name: "position";
                        type: "pubkey";
                    },
                    {
                        name: "owner";
                        type: "pubkey";
                    },
                    {
                        name: "mintReward";
                        type: "pubkey";
                    },
                    {
                        name: "rewardIndex";
                        type: "u8";
                    },
                    {
                        name: "totalReward";
                        type: "u64";
                    }
                ];
            };
        },
        {
            name: "evtCloseClaimFeeOperator";
            docs: ["Close claim fee operator"];
            type: {
                kind: "struct";
                fields: [
                    {
                        name: "claimFeeOperator";
                        type: "pubkey";
                    },
                    {
                        name: "operator";
                        type: "pubkey";
                    }
                ];
            };
        },
        {
            name: "evtCloseConfig";
            docs: ["Close config"];
            type: {
                kind: "struct";
                fields: [
                    {
                        name: "config";
                        docs: ["Config pubkey"];
                        type: "pubkey";
                    },
                    {
                        name: "admin";
                        docs: ["admin pk"];
                        type: "pubkey";
                    }
                ];
            };
        },
        {
            name: "evtClosePosition";
            type: {
                kind: "struct";
                fields: [
                    {
                        name: "pool";
                        type: "pubkey";
                    },
                    {
                        name: "owner";
                        type: "pubkey";
                    },
                    {
                        name: "position";
                        type: "pubkey";
                    },
                    {
                        name: "positionNftMint";
                        type: "pubkey";
                    }
                ];
            };
        },
        {
            name: "evtCreateClaimFeeOperator";
            docs: ["Create claim fee operator"];
            type: {
                kind: "struct";
                fields: [
                    {
                        name: "operator";
                        type: "pubkey";
                    }
                ];
            };
        },
        {
            name: "evtCreateConfig";
            docs: ["Create static config"];
            type: {
                kind: "struct";
                fields: [
                    {
                        name: "poolFees";
                        type: {
                            defined: {
                                name: "poolFeeParameters";
                            };
                        };
                    },
                    {
                        name: "vaultConfigKey";
                        type: "pubkey";
                    },
                    {
                        name: "poolCreatorAuthority";
                        type: "pubkey";
                    },
                    {
                        name: "activationType";
                        type: "u8";
                    },
                    {
                        name: "sqrtMinPrice";
                        type: "u128";
                    },
                    {
                        name: "sqrtMaxPrice";
                        type: "u128";
                    },
                    {
                        name: "collectFeeMode";
                        type: "u8";
                    },
                    {
                        name: "index";
                        type: "u64";
                    },
                    {
                        name: "config";
                        type: "pubkey";
                    }
                ];
            };
        },
        {
            name: "evtCreateDynamicConfig";
            docs: ["Create dynamic config"];
            type: {
                kind: "struct";
                fields: [
                    {
                        name: "config";
                        type: "pubkey";
                    },
                    {
                        name: "poolCreatorAuthority";
                        type: "pubkey";
                    },
                    {
                        name: "index";
                        type: "u64";
                    }
                ];
            };
        },
        {
            name: "evtCreatePosition";
            type: {
                kind: "struct";
                fields: [
                    {
                        name: "pool";
                        type: "pubkey";
                    },
                    {
                        name: "owner";
                        type: "pubkey";
                    },
                    {
                        name: "position";
                        type: "pubkey";
                    },
                    {
                        name: "positionNftMint";
                        type: "pubkey";
                    }
                ];
            };
        },
        {
            name: "evtCreateTokenBadge";
            docs: ["Create token badge"];
            type: {
                kind: "struct";
                fields: [
                    {
                        name: "tokenMint";
                        type: "pubkey";
                    }
                ];
            };
        },
        {
            name: "evtFundReward";
            type: {
                kind: "struct";
                fields: [
                    {
                        name: "pool";
                        type: "pubkey";
                    },
                    {
                        name: "funder";
                        type: "pubkey";
                    },
                    {
                        name: "mintReward";
                        type: "pubkey";
                    },
                    {
                        name: "rewardIndex";
                        type: "u8";
                    },
                    {
                        name: "amount";
                        type: "u64";
                    },
                    {
                        name: "transferFeeExcludedAmountIn";
                        type: "u64";
                    },
                    {
                        name: "rewardDurationEnd";
                        type: "u64";
                    },
                    {
                        name: "preRewardRate";
                        type: "u128";
                    },
                    {
                        name: "postRewardRate";
                        type: "u128";
                    }
                ];
            };
        },
        {
            name: "evtInitializePool";
            type: {
                kind: "struct";
                fields: [
                    {
                        name: "pool";
                        type: "pubkey";
                    },
                    {
                        name: "tokenAMint";
                        type: "pubkey";
                    },
                    {
                        name: "tokenBMint";
                        type: "pubkey";
                    },
                    {
                        name: "creator";
                        type: "pubkey";
                    },
                    {
                        name: "payer";
                        type: "pubkey";
                    },
                    {
                        name: "alphaVault";
                        type: "pubkey";
                    },
                    {
                        name: "poolFees";
                        type: {
                            defined: {
                                name: "poolFeeParameters";
                            };
                        };
                    },
                    {
                        name: "sqrtMinPrice";
                        type: "u128";
                    },
                    {
                        name: "sqrtMaxPrice";
                        type: "u128";
                    },
                    {
                        name: "activationType";
                        type: "u8";
                    },
                    {
                        name: "collectFeeMode";
                        type: "u8";
                    },
                    {
                        name: "liquidity";
                        type: "u128";
                    },
                    {
                        name: "sqrtPrice";
                        type: "u128";
                    },
                    {
                        name: "activationPoint";
                        type: "u64";
                    },
                    {
                        name: "tokenAFlag";
                        type: "u8";
                    },
                    {
                        name: "tokenBFlag";
                        type: "u8";
                    },
                    {
                        name: "tokenAAmount";
                        type: "u64";
                    },
                    {
                        name: "tokenBAmount";
                        type: "u64";
                    },
                    {
                        name: "totalAmountA";
                        type: "u64";
                    },
                    {
                        name: "totalAmountB";
                        type: "u64";
                    },
                    {
                        name: "poolType";
                        type: "u8";
                    }
                ];
            };
        },
        {
            name: "evtInitializeReward";
            type: {
                kind: "struct";
                fields: [
                    {
                        name: "pool";
                        type: "pubkey";
                    },
                    {
                        name: "rewardMint";
                        type: "pubkey";
                    },
                    {
                        name: "funder";
                        type: "pubkey";
                    },
                    {
                        name: "creator";
                        type: "pubkey";
                    },
                    {
                        name: "rewardIndex";
                        type: "u8";
                    },
                    {
                        name: "rewardDuration";
                        type: "u64";
                    }
                ];
            };
        },
        {
            name: "evtLockPosition";
            type: {
                kind: "struct";
                fields: [
                    {
                        name: "pool";
                        type: "pubkey";
                    },
                    {
                        name: "position";
                        type: "pubkey";
                    },
                    {
                        name: "owner";
                        type: "pubkey";
                    },
                    {
                        name: "vesting";
                        type: "pubkey";
                    },
                    {
                        name: "cliffPoint";
                        type: "u64";
                    },
                    {
                        name: "periodFrequency";
                        type: "u64";
                    },
                    {
                        name: "cliffUnlockLiquidity";
                        type: "u128";
                    },
                    {
                        name: "liquidityPerPeriod";
                        type: "u128";
                    },
                    {
                        name: "numberOfPeriod";
                        type: "u16";
                    }
                ];
            };
        },
        {
            name: "evtPermanentLockPosition";
            type: {
                kind: "struct";
                fields: [
                    {
                        name: "pool";
                        type: "pubkey";
                    },
                    {
                        name: "position";
                        type: "pubkey";
                    },
                    {
                        name: "lockLiquidityAmount";
                        type: "u128";
                    },
                    {
                        name: "totalPermanentLockedLiquidity";
                        type: "u128";
                    }
                ];
            };
        },
        {
            name: "evtRemoveLiquidity";
            type: {
                kind: "struct";
                fields: [
                    {
                        name: "pool";
                        type: "pubkey";
                    },
                    {
                        name: "position";
                        type: "pubkey";
                    },
                    {
                        name: "owner";
                        type: "pubkey";
                    },
                    {
                        name: "params";
                        type: {
                            defined: {
                                name: "removeLiquidityParameters";
                            };
                        };
                    },
                    {
                        name: "tokenAAmount";
                        type: "u64";
                    },
                    {
                        name: "tokenBAmount";
                        type: "u64";
                    }
                ];
            };
        },
        {
            name: "evtSetPoolStatus";
            type: {
                kind: "struct";
                fields: [
                    {
                        name: "pool";
                        type: "pubkey";
                    },
                    {
                        name: "status";
                        type: "u8";
                    }
                ];
            };
        },
        {
            name: "evtSplitPosition";
            type: {
                kind: "struct";
                fields: [
                    {
                        name: "pool";
                        type: "pubkey";
                    },
                    {
                        name: "firstOwner";
                        type: "pubkey";
                    },
                    {
                        name: "secondOwner";
                        type: "pubkey";
                    },
                    {
                        name: "firstPosition";
                        type: "pubkey";
                    },
                    {
                        name: "secondPosition";
                        type: "pubkey";
                    },
                    {
                        name: "currentSqrtPrice";
                        type: "u128";
                    },
                    {
                        name: "amountSplits";
                        type: {
                            defined: {
                                name: "splitAmountInfo";
                            };
                        };
                    },
                    {
                        name: "firstPositionInfo";
                        type: {
                            defined: {
                                name: "splitPositionInfo";
                            };
                        };
                    },
                    {
                        name: "secondPositionInfo";
                        type: {
                            defined: {
                                name: "splitPositionInfo";
                            };
                        };
                    },
                    {
                        name: "splitPositionParameters";
                        type: {
                            defined: {
                                name: "splitPositionParameters";
                            };
                        };
                    }
                ];
            };
        },
        {
            name: "evtSwap";
            type: {
                kind: "struct";
                fields: [
                    {
                        name: "pool";
                        type: "pubkey";
                    },
                    {
                        name: "tradeDirection";
                        type: "u8";
                    },
                    {
                        name: "hasReferral";
                        type: "bool";
                    },
                    {
                        name: "params";
                        type: {
                            defined: {
                                name: "swapParameters";
                            };
                        };
                    },
                    {
                        name: "swapResult";
                        type: {
                            defined: {
                                name: "swapResult";
                            };
                        };
                    },
                    {
                        name: "actualAmountIn";
                        type: "u64";
                    },
                    {
                        name: "currentTimestamp";
                        type: "u64";
                    }
                ];
            };
        },
        {
            name: "evtUpdateRewardDuration";
            type: {
                kind: "struct";
                fields: [
                    {
                        name: "pool";
                        type: "pubkey";
                    },
                    {
                        name: "rewardIndex";
                        type: "u8";
                    },
                    {
                        name: "oldRewardDuration";
                        type: "u64";
                    },
                    {
                        name: "newRewardDuration";
                        type: "u64";
                    }
                ];
            };
        },
        {
            name: "evtUpdateRewardFunder";
            type: {
                kind: "struct";
                fields: [
                    {
                        name: "pool";
                        type: "pubkey";
                    },
                    {
                        name: "rewardIndex";
                        type: "u8";
                    },
                    {
                        name: "oldFunder";
                        type: "pubkey";
                    },
                    {
                        name: "newFunder";
                        type: "pubkey";
                    }
                ];
            };
        },
        {
            name: "evtWithdrawIneligibleReward";
            type: {
                kind: "struct";
                fields: [
                    {
                        name: "pool";
                        type: "pubkey";
                    },
                    {
                        name: "rewardMint";
                        type: "pubkey";
                    },
                    {
                        name: "amount";
                        type: "u64";
                    }
                ];
            };
        },
        {
            name: "initializeCustomizablePoolParameters";
            type: {
                kind: "struct";
                fields: [
                    {
                        name: "poolFees";
                        docs: ["pool fees"];
                        type: {
                            defined: {
                                name: "poolFeeParameters";
                            };
                        };
                    },
                    {
                        name: "sqrtMinPrice";
                        docs: ["sqrt min price"];
                        type: "u128";
                    },
                    {
                        name: "sqrtMaxPrice";
                        docs: ["sqrt max price"];
                        type: "u128";
                    },
                    {
                        name: "hasAlphaVault";
                        docs: ["has alpha vault"];
                        type: "bool";
                    },
                    {
                        name: "liquidity";
                        docs: ["initialize liquidity"];
                        type: "u128";
                    },
                    {
                        name: "sqrtPrice";
                        docs: [
                            "The init price of the pool as a sqrt(token_b/token_a) Q64.64 value"
                        ];
                        type: "u128";
                    },
                    {
                        name: "activationType";
                        docs: ["activation type"];
                        type: "u8";
                    },
                    {
                        name: "collectFeeMode";
                        docs: ["collect fee mode"];
                        type: "u8";
                    },
                    {
                        name: "activationPoint";
                        docs: ["activation point"];
                        type: {
                            option: "u64";
                        };
                    }
                ];
            };
        },
        {
            name: "initializePoolParameters";
            type: {
                kind: "struct";
                fields: [
                    {
                        name: "liquidity";
                        docs: ["initialize liquidity"];
                        type: "u128";
                    },
                    {
                        name: "sqrtPrice";
                        docs: [
                            "The init price of the pool as a sqrt(token_b/token_a) Q64.64 value"
                        ];
                        type: "u128";
                    },
                    {
                        name: "activationPoint";
                        docs: ["activation point"];
                        type: {
                            option: "u64";
                        };
                    }
                ];
            };
        },
        {
            name: "pool";
            serialization: "bytemuck";
            repr: {
                kind: "c";
            };
            type: {
                kind: "struct";
                fields: [
                    {
                        name: "poolFees";
                        docs: ["Pool fee"];
                        type: {
                            defined: {
                                name: "poolFeesStruct";
                            };
                        };
                    },
                    {
                        name: "tokenAMint";
                        docs: ["token a mint"];
                        type: "pubkey";
                    },
                    {
                        name: "tokenBMint";
                        docs: ["token b mint"];
                        type: "pubkey";
                    },
                    {
                        name: "tokenAVault";
                        docs: ["token a vault"];
                        type: "pubkey";
                    },
                    {
                        name: "tokenBVault";
                        docs: ["token b vault"];
                        type: "pubkey";
                    },
                    {
                        name: "whitelistedVault";
                        docs: [
                            "Whitelisted vault to be able to buy pool before activation_point"
                        ];
                        type: "pubkey";
                    },
                    {
                        name: "partner";
                        docs: ["partner"];
                        type: "pubkey";
                    },
                    {
                        name: "liquidity";
                        docs: ["liquidity share"];
                        type: "u128";
                    },
                    {
                        name: "padding";
                        docs: [
                            "padding, previous reserve amount, be careful to use that field"
                        ];
                        type: "u128";
                    },
                    {
                        name: "protocolAFee";
                        docs: ["protocol a fee"];
                        type: "u64";
                    },
                    {
                        name: "protocolBFee";
                        docs: ["protocol b fee"];
                        type: "u64";
                    },
                    {
                        name: "partnerAFee";
                        docs: ["partner a fee"];
                        type: "u64";
                    },
                    {
                        name: "partnerBFee";
                        docs: ["partner b fee"];
                        type: "u64";
                    },
                    {
                        name: "sqrtMinPrice";
                        docs: ["min price"];
                        type: "u128";
                    },
                    {
                        name: "sqrtMaxPrice";
                        docs: ["max price"];
                        type: "u128";
                    },
                    {
                        name: "sqrtPrice";
                        docs: ["current price"];
                        type: "u128";
                    },
                    {
                        name: "activationPoint";
                        docs: ["Activation point, can be slot or timestamp"];
                        type: "u64";
                    },
                    {
                        name: "activationType";
                        docs: ["Activation type, 0 means by slot, 1 means by timestamp"];
                        type: "u8";
                    },
                    {
                        name: "poolStatus";
                        docs: ["pool status, 0: enable, 1 disable"];
                        type: "u8";
                    },
                    {
                        name: "tokenAFlag";
                        docs: ["token a flag"];
                        type: "u8";
                    },
                    {
                        name: "tokenBFlag";
                        docs: ["token b flag"];
                        type: "u8";
                    },
                    {
                        name: "collectFeeMode";
                        docs: [
                            "0 is collect fee in both token, 1 only collect fee in token a, 2 only collect fee in token b"
                        ];
                        type: "u8";
                    },
                    {
                        name: "poolType";
                        docs: ["pool type"];
                        type: "u8";
                    },
                    {
                        name: "padding0";
                        docs: ["padding"];
                        type: {
                            array: ["u8", 2];
                        };
                    },
                    {
                        name: "feeAPerLiquidity";
                        docs: ["cumulative"];
                        type: {
                            array: ["u8", 32];
                        };
                    },
                    {
                        name: "feeBPerLiquidity";
                        docs: ["cumulative"];
                        type: {
                            array: ["u8", 32];
                        };
                    },
                    {
                        name: "permanentLockLiquidity";
                        type: "u128";
                    },
                    {
                        name: "metrics";
                        docs: ["metrics"];
                        type: {
                            defined: {
                                name: "poolMetrics";
                            };
                        };
                    },
                    {
                        name: "creator";
                        docs: ["pool creator"];
                        type: "pubkey";
                    },
                    {
                        name: "padding1";
                        docs: ["Padding for further use"];
                        type: {
                            array: ["u64", 6];
                        };
                    },
                    {
                        name: "rewardInfos";
                        docs: ["Farming reward information"];
                        type: {
                            array: [
                                {
                                    defined: {
                                        name: "rewardInfo";
                                    };
                                },
                                2
                            ];
                        };
                    }
                ];
            };
        },
        {
            name: "poolFeeParameters";
            docs: ["Information regarding fee charges"];
            type: {
                kind: "struct";
                fields: [
                    {
                        name: "baseFee";
                        docs: ["Base fee"];
                        type: {
                            defined: {
                                name: "baseFeeParameters";
                            };
                        };
                    },
                    {
                        name: "padding";
                        docs: ["padding"];
                        type: {
                            array: ["u8", 3];
                        };
                    },
                    {
                        name: "dynamicFee";
                        docs: ["dynamic fee"];
                        type: {
                            option: {
                                defined: {
                                    name: "dynamicFeeParameters";
                                };
                            };
                        };
                    }
                ];
            };
        },
        {
            name: "poolFeesConfig";
            serialization: "bytemuck";
            repr: {
                kind: "c";
            };
            type: {
                kind: "struct";
                fields: [
                    {
                        name: "baseFee";
                        type: {
                            defined: {
                                name: "baseFeeConfig";
                            };
                        };
                    },
                    {
                        name: "dynamicFee";
                        type: {
                            defined: {
                                name: "dynamicFeeConfig";
                            };
                        };
                    },
                    {
                        name: "protocolFeePercent";
                        type: "u8";
                    },
                    {
                        name: "partnerFeePercent";
                        type: "u8";
                    },
                    {
                        name: "referralFeePercent";
                        type: "u8";
                    },
                    {
                        name: "padding0";
                        type: {
                            array: ["u8", 5];
                        };
                    },
                    {
                        name: "padding1";
                        type: {
                            array: ["u64", 5];
                        };
                    }
                ];
            };
        },
        {
            name: "poolFeesStruct";
            docs: [
                "Information regarding fee charges",
                "trading_fee = amount * trade_fee_numerator / denominator",
                "protocol_fee = trading_fee * protocol_fee_percentage / 100",
                "referral_fee = protocol_fee * referral_percentage / 100",
                "partner_fee = (protocol_fee - referral_fee) * partner_fee_percentage / denominator"
            ];
            serialization: "bytemuck";
            repr: {
                kind: "c";
            };
            type: {
                kind: "struct";
                fields: [
                    {
                        name: "baseFee";
                        docs: [
                            "Trade fees are extra token amounts that are held inside the token",
                            "accounts during a trade, making the value of liquidity tokens rise.",
                            "Trade fee numerator"
                        ];
                        type: {
                            defined: {
                                name: "baseFeeStruct";
                            };
                        };
                    },
                    {
                        name: "protocolFeePercent";
                        docs: [
                            "Protocol trading fees are extra token amounts that are held inside the token",
                            "accounts during a trade, with the equivalent in pool tokens minted to",
                            "the protocol of the program.",
                            "Protocol trade fee numerator"
                        ];
                        type: "u8";
                    },
                    {
                        name: "partnerFeePercent";
                        docs: ["partner fee"];
                        type: "u8";
                    },
                    {
                        name: "referralFeePercent";
                        docs: ["referral fee"];
                        type: "u8";
                    },
                    {
                        name: "padding0";
                        docs: ["padding"];
                        type: {
                            array: ["u8", 5];
                        };
                    },
                    {
                        name: "dynamicFee";
                        docs: ["dynamic fee"];
                        type: {
                            defined: {
                                name: "dynamicFeeStruct";
                            };
                        };
                    },
                    {
                        name: "padding1";
                        docs: ["padding"];
                        type: {
                            array: ["u64", 2];
                        };
                    }
                ];
            };
        },
        {
            name: "poolMetrics";
            serialization: "bytemuck";
            repr: {
                kind: "c";
            };
            type: {
                kind: "struct";
                fields: [
                    {
                        name: "totalLpAFee";
                        type: "u128";
                    },
                    {
                        name: "totalLpBFee";
                        type: "u128";
                    },
                    {
                        name: "totalProtocolAFee";
                        type: "u64";
                    },
                    {
                        name: "totalProtocolBFee";
                        type: "u64";
                    },
                    {
                        name: "totalPartnerAFee";
                        type: "u64";
                    },
                    {
                        name: "totalPartnerBFee";
                        type: "u64";
                    },
                    {
                        name: "totalPosition";
                        type: "u64";
                    },
                    {
                        name: "padding";
                        type: "u64";
                    }
                ];
            };
        },
        {
            name: "position";
            serialization: "bytemuck";
            repr: {
                kind: "c";
            };
            type: {
                kind: "struct";
                fields: [
                    {
                        name: "pool";
                        type: "pubkey";
                    },
                    {
                        name: "nftMint";
                        docs: ["nft mint"];
                        type: "pubkey";
                    },
                    {
                        name: "feeAPerTokenCheckpoint";
                        docs: ["fee a checkpoint"];
                        type: {
                            array: ["u8", 32];
                        };
                    },
                    {
                        name: "feeBPerTokenCheckpoint";
                        docs: ["fee b checkpoint"];
                        type: {
                            array: ["u8", 32];
                        };
                    },
                    {
                        name: "feeAPending";
                        docs: ["fee a pending"];
                        type: "u64";
                    },
                    {
                        name: "feeBPending";
                        docs: ["fee b pending"];
                        type: "u64";
                    },
                    {
                        name: "unlockedLiquidity";
                        docs: ["unlock liquidity"];
                        type: "u128";
                    },
                    {
                        name: "vestedLiquidity";
                        docs: ["vesting liquidity"];
                        type: "u128";
                    },
                    {
                        name: "permanentLockedLiquidity";
                        docs: ["permanent locked liquidity"];
                        type: "u128";
                    },
                    {
                        name: "metrics";
                        docs: ["metrics"];
                        type: {
                            defined: {
                                name: "positionMetrics";
                            };
                        };
                    },
                    {
                        name: "rewardInfos";
                        docs: ["Farming reward information"];
                        type: {
                            array: [
                                {
                                    defined: {
                                        name: "userRewardInfo";
                                    };
                                },
                                2
                            ];
                        };
                    },
                    {
                        name: "padding";
                        docs: ["padding for future usage"];
                        type: {
                            array: ["u128", 6];
                        };
                    }
                ];
            };
        },
        {
            name: "positionMetrics";
            serialization: "bytemuck";
            repr: {
                kind: "c";
            };
            type: {
                kind: "struct";
                fields: [
                    {
                        name: "totalClaimedAFee";
                        type: "u64";
                    },
                    {
                        name: "totalClaimedBFee";
                        type: "u64";
                    }
                ];
            };
        },
        {
            name: "removeLiquidityParameters";
            type: {
                kind: "struct";
                fields: [
                    {
                        name: "liquidityDelta";
                        docs: ["delta liquidity"];
                        type: "u128";
                    },
                    {
                        name: "tokenAAmountThreshold";
                        docs: ["minimum token a amount"];
                        type: "u64";
                    },
                    {
                        name: "tokenBAmountThreshold";
                        docs: ["minimum token b amount"];
                        type: "u64";
                    }
                ];
            };
        },
        {
            name: "rewardInfo";
            docs: ["Stores the state relevant for tracking liquidity mining rewards"];
            serialization: "bytemuck";
            repr: {
                kind: "c";
            };
            type: {
                kind: "struct";
                fields: [
                    {
                        name: "initialized";
                        docs: ["Indicates if the reward has been initialized"];
                        type: "u8";
                    },
                    {
                        name: "rewardTokenFlag";
                        docs: ["reward token flag"];
                        type: "u8";
                    },
                    {
                        name: "padding0";
                        docs: ["padding"];
                        type: {
                            array: ["u8", 6];
                        };
                    },
                    {
                        name: "padding1";
                        docs: ["Padding to ensure `reward_rate: u128` is 16-byte aligned"];
                        type: {
                            array: ["u8", 8];
                        };
                    },
                    {
                        name: "mint";
                        docs: ["Reward token mint."];
                        type: "pubkey";
                    },
                    {
                        name: "vault";
                        docs: ["Reward vault token account."];
                        type: "pubkey";
                    },
                    {
                        name: "funder";
                        docs: ["Authority account that allows to fund rewards"];
                        type: "pubkey";
                    },
                    {
                        name: "rewardDuration";
                        docs: ["reward duration"];
                        type: "u64";
                    },
                    {
                        name: "rewardDurationEnd";
                        docs: ["reward duration end"];
                        type: "u64";
                    },
                    {
                        name: "rewardRate";
                        docs: ["reward rate"];
                        type: "u128";
                    },
                    {
                        name: "rewardPerTokenStored";
                        docs: ["Reward per token stored"];
                        type: {
                            array: ["u8", 32];
                        };
                    },
                    {
                        name: "lastUpdateTime";
                        docs: ["The last time reward states were updated."];
                        type: "u64";
                    },
                    {
                        name: "cumulativeSecondsWithEmptyLiquidityReward";
                        docs: [
                            "Accumulated seconds when the farm distributed rewards but the bin was empty.",
                            "These rewards will be carried over to the next reward time window."
                        ];
                        type: "u64";
                    }
                ];
            };
        },
        {
            name: "splitAmountInfo";
            type: {
                kind: "struct";
                fields: [
                    {
                        name: "permanentLockedLiquidity";
                        type: "u128";
                    },
                    {
                        name: "unlockedLiquidity";
                        type: "u128";
                    },
                    {
                        name: "feeA";
                        type: "u64";
                    },
                    {
                        name: "feeB";
                        type: "u64";
                    },
                    {
                        name: "reward0";
                        type: "u64";
                    },
                    {
                        name: "reward1";
                        type: "u64";
                    }
                ];
            };
        },
        {
            name: "splitPositionInfo";
            type: {
                kind: "struct";
                fields: [
                    {
                        name: "liquidity";
                        type: "u128";
                    },
                    {
                        name: "feeA";
                        type: "u64";
                    },
                    {
                        name: "feeB";
                        type: "u64";
                    },
                    {
                        name: "reward0";
                        type: "u64";
                    },
                    {
                        name: "reward1";
                        type: "u64";
                    }
                ];
            };
        },
        {
            name: "splitPositionParameters";
            type: {
                kind: "struct";
                fields: [
                    {
                        name: "unlockedLiquidityPercentage";
                        docs: [
                            "Percentage of unlocked liquidity to split to the second position"
                        ];
                        type: "u8";
                    },
                    {
                        name: "permanentLockedLiquidityPercentage";
                        docs: [
                            "Percentage of permanent locked liquidity to split to the second position"
                        ];
                        type: "u8";
                    },
                    {
                        name: "feeAPercentage";
                        docs: [
                            "Percentage of fee A pending to split to the second position"
                        ];
                        type: "u8";
                    },
                    {
                        name: "feeBPercentage";
                        docs: [
                            "Percentage of fee B pending to split to the second position"
                        ];
                        type: "u8";
                    },
                    {
                        name: "reward0Percentage";
                        docs: [
                            "Percentage of reward 0 pending to split to the second position"
                        ];
                        type: "u8";
                    },
                    {
                        name: "reward1Percentage";
                        docs: [
                            "Percentage of reward 1 pending to split to the second position"
                        ];
                        type: "u8";
                    },
                    {
                        name: "padding";
                        docs: ["padding for future"];
                        type: {
                            array: ["u8", 16];
                        };
                    }
                ];
            };
        },
        {
            name: "staticConfigParameters";
            type: {
                kind: "struct";
                fields: [
                    {
                        name: "poolFees";
                        type: {
                            defined: {
                                name: "poolFeeParameters";
                            };
                        };
                    },
                    {
                        name: "sqrtMinPrice";
                        type: "u128";
                    },
                    {
                        name: "sqrtMaxPrice";
                        type: "u128";
                    },
                    {
                        name: "vaultConfigKey";
                        type: "pubkey";
                    },
                    {
                        name: "poolCreatorAuthority";
                        type: "pubkey";
                    },
                    {
                        name: "activationType";
                        type: "u8";
                    },
                    {
                        name: "collectFeeMode";
                        type: "u8";
                    }
                ];
            };
        },
        {
            name: "swapParameters";
            type: {
                kind: "struct";
                fields: [
                    {
                        name: "amountIn";
                        type: "u64";
                    },
                    {
                        name: "minimumAmountOut";
                        type: "u64";
                    }
                ];
            };
        },
        {
            name: "swapResult";
            docs: ["Encodes all results of swapping"];
            type: {
                kind: "struct";
                fields: [
                    {
                        name: "outputAmount";
                        type: "u64";
                    },
                    {
                        name: "nextSqrtPrice";
                        type: "u128";
                    },
                    {
                        name: "lpFee";
                        type: "u64";
                    },
                    {
                        name: "protocolFee";
                        type: "u64";
                    },
                    {
                        name: "partnerFee";
                        type: "u64";
                    },
                    {
                        name: "referralFee";
                        type: "u64";
                    }
                ];
            };
        },
        {
            name: "tokenBadge";
            docs: ["Parameter that set by the protocol"];
            serialization: "bytemuck";
            repr: {
                kind: "c";
            };
            type: {
                kind: "struct";
                fields: [
                    {
                        name: "tokenMint";
                        docs: ["token mint"];
                        type: "pubkey";
                    },
                    {
                        name: "padding";
                        docs: ["Reserve"];
                        type: {
                            array: ["u8", 128];
                        };
                    }
                ];
            };
        },
        {
            name: "userRewardInfo";
            serialization: "bytemuck";
            repr: {
                kind: "c";
            };
            type: {
                kind: "struct";
                fields: [
                    {
                        name: "rewardPerTokenCheckpoint";
                        docs: ["The latest update reward checkpoint"];
                        type: {
                            array: ["u8", 32];
                        };
                    },
                    {
                        name: "rewardPendings";
                        docs: ["Current pending rewards"];
                        type: "u64";
                    },
                    {
                        name: "totalClaimedRewards";
                        docs: ["Total claimed rewards"];
                        type: "u64";
                    }
                ];
            };
        },
        {
            name: "vesting";
            serialization: "bytemuck";
            repr: {
                kind: "c";
            };
            type: {
                kind: "struct";
                fields: [
                    {
                        name: "position";
                        type: "pubkey";
                    },
                    {
                        name: "cliffPoint";
                        type: "u64";
                    },
                    {
                        name: "periodFrequency";
                        type: "u64";
                    },
                    {
                        name: "cliffUnlockLiquidity";
                        type: "u128";
                    },
                    {
                        name: "liquidityPerPeriod";
                        type: "u128";
                    },
                    {
                        name: "totalReleasedLiquidity";
                        type: "u128";
                    },
                    {
                        name: "numberOfPeriod";
                        type: "u16";
                    },
                    {
                        name: "padding";
                        type: {
                            array: ["u8", 14];
                        };
                    },
                    {
                        name: "padding2";
                        type: {
                            array: ["u128", 4];
                        };
                    }
                ];
            };
        },
        {
            name: "vestingParameters";
            type: {
                kind: "struct";
                fields: [
                    {
                        name: "cliffPoint";
                        type: {
                            option: "u64";
                        };
                    },
                    {
                        name: "periodFrequency";
                        type: "u64";
                    },
                    {
                        name: "cliffUnlockLiquidity";
                        type: "u128";
                    },
                    {
                        name: "liquidityPerPeriod";
                        type: "u128";
                    },
                    {
                        name: "numberOfPeriod";
                        type: "u16";
                    }
                ];
            };
        }
    ];
};

type AmmProgram = Program<CpAmm$1>;
type TxBuilder = Promise<Transaction>;
declare enum Rounding {
    Up = 0,
    Down = 1
}
declare enum ActivationPoint {
    Timestamp = 0,
    Slot = 1
}
declare enum FeeSchedulerMode {
    Linear = 0,
    Exponential = 1
}
declare enum CollectFeeMode {
    BothToken = 0,
    OnlyB = 1
}
declare enum TradeDirection {
    AtoB = 0,
    BtoA = 1
}
declare enum ActivationType {
    Slot = 0,
    Timestamp = 1
}
type FeeMode = {
    feeOnInput: boolean;
    feesOnTokenA: boolean;
};
type PoolState = IdlAccounts<CpAmm$1>["pool"];
type PositionState = IdlAccounts<CpAmm$1>["position"];
type VestingState = IdlAccounts<CpAmm$1>["vesting"];
type ConfigState = IdlAccounts<CpAmm$1>["config"];
type TokenBadgeState = IdlAccounts<CpAmm$1>["tokenBadge"];
type RewardInfo = IdlTypes<CpAmm$1>["rewardInfo"];
type DynamicFee = {
    binStep: number;
    binStepU128: BN;
    filterPeriod: number;
    decayPeriod: number;
    reductionFactor: number;
    maxVolatilityAccumulator: number;
    variableFeeControl: number;
};
type BaseFee = {
    cliffFeeNumerator: BN;
    numberOfPeriod: number;
    periodFrequency: BN;
    reductionFactor: BN;
    feeSchedulerMode: number;
};
type PoolFeesParams = {
    baseFee: BaseFee;
    padding: number[];
    dynamicFee: DynamicFee | null;
};
type PrepareTokenAccountParams = {
    payer: PublicKey;
    tokenAOwner: PublicKey;
    tokenBOwner: PublicKey;
    tokenAMint: PublicKey;
    tokenBMint: PublicKey;
    tokenAProgram: PublicKey;
    tokenBProgram: PublicKey;
};
type PrepareCustomizablePoolParams = {
    pool: PublicKey;
    tokenAMint: PublicKey;
    tokenBMint: PublicKey;
    tokenAAmount: BN;
    tokenBAmount: BN;
    payer: PublicKey;
    positionNft: PublicKey;
    tokenAProgram: PublicKey;
    tokenBProgram: PublicKey;
};
type InitializeCustomizeablePoolParams = {
    payer: PublicKey;
    creator: PublicKey;
    positionNft: PublicKey;
    tokenAMint: PublicKey;
    tokenBMint: PublicKey;
    tokenAAmount: BN;
    tokenBAmount: BN;
    sqrtMinPrice: BN;
    sqrtMaxPrice: BN;
    liquidityDelta: BN;
    initSqrtPrice: BN;
    poolFees: PoolFeesParams;
    hasAlphaVault: boolean;
    activationType: number;
    collectFeeMode: number;
    activationPoint: BN | null;
    tokenAProgram: PublicKey;
    tokenBProgram: PublicKey;
    isLockLiquidity?: boolean;
};
type InitializeCustomizeablePoolWithDynamicConfigParams = InitializeCustomizeablePoolParams & {
    config: PublicKey;
    poolCreatorAuthority: PublicKey;
};
type PreparePoolCreationParams = {
    tokenAAmount: BN;
    tokenBAmount: BN;
    minSqrtPrice: BN;
    maxSqrtPrice: BN;
    tokenAInfo?: {
        mint: Mint;
        currentEpoch: number;
    };
    tokenBInfo?: {
        mint: Mint;
        currentEpoch: number;
    };
};
type PreparedPoolCreation = {
    initSqrtPrice: BN;
    liquidityDelta: BN;
};
type PreparePoolCreationSingleSide = {
    tokenAAmount: BN;
    minSqrtPrice: BN;
    maxSqrtPrice: BN;
    initSqrtPrice: BN;
    tokenAInfo?: {
        mint: Mint;
        currentEpoch: number;
    };
};
type CreatePoolParams = {
    creator: PublicKey;
    payer: PublicKey;
    config: PublicKey;
    positionNft: PublicKey;
    tokenAMint: PublicKey;
    tokenBMint: PublicKey;
    initSqrtPrice: BN;
    liquidityDelta: BN;
    tokenAAmount: BN;
    tokenBAmount: BN;
    activationPoint: BN | null;
    tokenAProgram: PublicKey;
    tokenBProgram: PublicKey;
    isLockLiquidity?: boolean;
};
type CreatePositionParams = {
    owner: PublicKey;
    payer: PublicKey;
    pool: PublicKey;
    positionNft: PublicKey;
};
type AddLiquidityParams = {
    owner: PublicKey;
    position: PublicKey;
    pool: PublicKey;
    positionNftAccount: PublicKey;
    liquidityDelta: BN;
    maxAmountTokenA: BN;
    maxAmountTokenB: BN;
    tokenAAmountThreshold: BN;
    tokenBAmountThreshold: BN;
    tokenAMint: PublicKey;
    tokenBMint: PublicKey;
    tokenAVault: PublicKey;
    tokenBVault: PublicKey;
    tokenAProgram: PublicKey;
    tokenBProgram: PublicKey;
};
type CreatePositionAndAddLiquidity = {
    owner: PublicKey;
    pool: PublicKey;
    positionNft: PublicKey;
    liquidityDelta: BN;
    maxAmountTokenA: BN;
    maxAmountTokenB: BN;
    tokenAAmountThreshold: BN;
    tokenBAmountThreshold: BN;
    tokenAMint: PublicKey;
    tokenBMint: PublicKey;
    tokenAProgram: PublicKey;
    tokenBProgram: PublicKey;
};
type LiquidityDeltaParams = {
    maxAmountTokenA: BN;
    maxAmountTokenB: BN;
    sqrtPrice: BN;
    sqrtMinPrice: BN;
    sqrtMaxPrice: BN;
    tokenAInfo?: {
        mint: Mint;
        currentEpoch: number;
    };
    tokenBInfo?: {
        mint: Mint;
        currentEpoch: number;
    };
};
type RemoveLiquidityParams = {
    owner: PublicKey;
    position: PublicKey;
    pool: PublicKey;
    positionNftAccount: PublicKey;
    liquidityDelta: BN;
    tokenAAmountThreshold: BN;
    tokenBAmountThreshold: BN;
    tokenAMint: PublicKey;
    tokenBMint: PublicKey;
    tokenAVault: PublicKey;
    tokenBVault: PublicKey;
    tokenAProgram: PublicKey;
    tokenBProgram: PublicKey;
    vestings: Array<{
        account: PublicKey;
        vestingState: VestingState;
    }>;
    currentPoint: BN;
};
type RemoveAllLiquidityParams = Omit<RemoveLiquidityParams, "liquidityDelta">;
type BuildAddLiquidityParams = {
    owner: PublicKey;
    position: PublicKey;
    pool: PublicKey;
    positionNftAccount: PublicKey;
    liquidityDelta: BN;
    tokenAAccount: PublicKey;
    tokenBAccount: PublicKey;
    tokenAAmountThreshold: BN;
    tokenBAmountThreshold: BN;
    tokenAMint: PublicKey;
    tokenBMint: PublicKey;
    tokenAVault: PublicKey;
    tokenBVault: PublicKey;
    tokenAProgram: PublicKey;
    tokenBProgram: PublicKey;
};
type BuildLiquidatePositionInstructionParams = {
    owner: PublicKey;
    position: PublicKey;
    positionNftAccount: PublicKey;
    positionState: PositionState;
    poolState: PoolState;
    tokenAAccount: PublicKey;
    tokenBAccount: PublicKey;
    tokenAAmountThreshold: BN;
    tokenBAmountThreshold: BN;
};
type BuildRemoveAllLiquidityInstructionParams = {
    poolAuthority: PublicKey;
    owner: PublicKey;
    position: PublicKey;
    pool: PublicKey;
    positionNftAccount: PublicKey;
    tokenAAccount: PublicKey;
    tokenBAccount: PublicKey;
    tokenAAmountThreshold: BN;
    tokenBAmountThreshold: BN;
    tokenAMint: PublicKey;
    tokenBMint: PublicKey;
    tokenAVault: PublicKey;
    tokenBVault: PublicKey;
    tokenAProgram: PublicKey;
    tokenBProgram: PublicKey;
};
type ClosePositionParams = {
    owner: PublicKey;
    pool: PublicKey;
    position: PublicKey;
    positionNftMint: PublicKey;
    positionNftAccount: PublicKey;
};
type RemoveAllLiquidityAndClosePositionParams = {
    owner: PublicKey;
    position: PublicKey;
    positionNftAccount: PublicKey;
    poolState: PoolState;
    positionState: PositionState;
    tokenAAmountThreshold: BN;
    tokenBAmountThreshold: BN;
    vestings: Array<{
        account: PublicKey;
        vestingState: VestingState;
    }>;
    currentPoint: BN;
};
type MergePositionParams = {
    owner: PublicKey;
    positionA: PublicKey;
    positionB: PublicKey;
    poolState: PoolState;
    positionBNftAccount: PublicKey;
    positionANftAccount: PublicKey;
    positionBState: PositionState;
    tokenAAmountAddLiquidityThreshold: BN;
    tokenBAmountAddLiquidityThreshold: BN;
    tokenAAmountRemoveLiquidityThreshold: BN;
    tokenBAmountRemoveLiquidityThreshold: BN;
    positionBVestings: Array<{
        account: PublicKey;
        vestingState: VestingState;
    }>;
    currentPoint: BN;
};
type GetQuoteParams = {
    inAmount: BN;
    inputTokenMint: PublicKey;
    slippage: number;
    poolState: PoolState;
    currentTime: number;
    currentSlot: number;
    inputTokenInfo?: {
        mint: Mint;
        currentEpoch: number;
    };
    outputTokenInfo?: {
        mint: Mint;
        currentEpoch: number;
    };
};
type SwapAmount = {
    outputAmount: BN;
    nextSqrtPrice: BN;
};
type GetQuoteExactOutParams = {
    outAmount: BN;
    outputTokenMint: PublicKey;
    slippage: number;
    poolState: PoolState;
    currentTime: number;
    currentSlot: number;
    inputTokenInfo?: {
        mint: Mint;
        currentEpoch: number;
    };
    outputTokenInfo?: {
        mint: Mint;
        currentEpoch: number;
    };
};
type SwapResult = {
    outputAmount: BN;
    nextSqrtPrice: BN;
    lpFee: BN;
    protocolFee: BN;
    referralFee: BN;
    partnerFee: BN;
};
type QuoteExactOutResult = {
    swapResult: SwapResult;
    inputAmount: BN;
    maxInputAmount: BN;
    priceImpact: number;
};
type SwapQuotes = {
    totalFee: BN;
    minOutAmount: BN;
    actualAmount: BN;
};
type SwapParams = {
    payer: PublicKey;
    pool: PublicKey;
    inputTokenMint: PublicKey;
    outputTokenMint: PublicKey;
    amountIn: BN;
    minimumAmountOut: BN;
    tokenAMint: PublicKey;
    tokenBMint: PublicKey;
    tokenAVault: PublicKey;
    tokenBVault: PublicKey;
    tokenAProgram: PublicKey;
    tokenBProgram: PublicKey;
    referralTokenAccount: PublicKey | null;
};
type LockPositionParams = {
    owner: PublicKey;
    payer: PublicKey;
    vestingAccount: PublicKey;
    position: PublicKey;
    positionNftAccount: PublicKey;
    pool: PublicKey;
    cliffPoint: BN | null;
    periodFrequency: BN;
    cliffUnlockLiquidity: BN;
    liquidityPerPeriod: BN;
    numberOfPeriod: number;
};
type SetupFeeClaimAccountsParams = {
    payer: PublicKey;
    owner: PublicKey;
    tokenAMint: PublicKey;
    tokenBMint: PublicKey;
    tokenAProgram: PublicKey;
    tokenBProgram: PublicKey;
    receiver?: PublicKey;
    tempWSolAccount?: PublicKey;
};
type ClaimPositionFeeInstructionParams = {
    owner: PublicKey;
    poolAuthority: PublicKey;
    pool: PublicKey;
    position: PublicKey;
    positionNftAccount: PublicKey;
    tokenAAccount: PublicKey;
    tokenBAccount: PublicKey;
    tokenAVault: PublicKey;
    tokenBVault: PublicKey;
    tokenAMint: PublicKey;
    tokenBMint: PublicKey;
    tokenAProgram: PublicKey;
    tokenBProgram: PublicKey;
};
type ClaimPositionFeeParams = {
    owner: PublicKey;
    position: PublicKey;
    pool: PublicKey;
    positionNftAccount: PublicKey;
    tokenAMint: PublicKey;
    tokenBMint: PublicKey;
    tokenAVault: PublicKey;
    tokenBVault: PublicKey;
    tokenAProgram: PublicKey;
    tokenBProgram: PublicKey;
    receiver?: PublicKey;
    feePayer?: PublicKey;
    tempWSolAccount?: PublicKey;
};
type ClaimPositionFeeParams2 = {
    owner: PublicKey;
    position: PublicKey;
    pool: PublicKey;
    positionNftAccount: PublicKey;
    tokenAMint: PublicKey;
    tokenBMint: PublicKey;
    tokenAVault: PublicKey;
    tokenBVault: PublicKey;
    tokenAProgram: PublicKey;
    tokenBProgram: PublicKey;
    receiver: PublicKey;
    feePayer?: PublicKey;
};
type ClosePositionInstructionParams = {
    owner: PublicKey;
    poolAuthority: PublicKey;
    pool: PublicKey;
    position: PublicKey;
    positionNftMint: PublicKey;
    positionNftAccount: PublicKey;
};
type InitializeRewardParams = {
    rewardIndex: number;
    rewardDuration: BN;
    pool: PublicKey;
    rewardMint: PublicKey;
    payer: PublicKey;
};
type UpdateRewardDurationParams = {
    pool: PublicKey;
    admin: PublicKey;
    rewardIndex: number;
    newDuration: BN;
};
type UpdateRewardFunderParams = {
    pool: PublicKey;
    admin: PublicKey;
    rewardIndex: number;
    newFunder: PublicKey;
};
type FundRewardParams = {
    funder: PublicKey;
    rewardIndex: number;
    pool: PublicKey;
    carryForward: boolean;
    amount: BN;
};
type WithdrawIneligibleRewardParams = {
    rewardIndex: number;
    pool: PublicKey;
    funder: PublicKey;
};
type ClaimPartnerFeeParams = {
    partner: PublicKey;
    pool: PublicKey;
    maxAmountA: BN;
    maxAmountB: BN;
    receiver?: PublicKey;
    feePayer?: PublicKey;
    tempWSolAccount?: PublicKey;
};
type ClaimRewardParams = {
    user: PublicKey;
    position: PublicKey;
    poolState: PoolState;
    positionState: PositionState;
    positionNftAccount: PublicKey;
    rewardIndex: number;
    skipReward: number;
    feePayer?: PublicKey;
};
type RefreshVestingParams = {
    owner: PublicKey;
    position: PublicKey;
    positionNftAccount: PublicKey;
    pool: PublicKey;
    vestingAccounts: PublicKey[];
};
type PermanentLockParams = {
    owner: PublicKey;
    position: PublicKey;
    positionNftAccount: PublicKey;
    pool: PublicKey;
    unlockedLiquidity: BN;
};
type GetDepositQuoteParams = {
    inAmount: BN;
    isTokenA: boolean;
    minSqrtPrice: BN;
    maxSqrtPrice: BN;
    sqrtPrice: BN;
    inputTokenInfo?: {
        mint: Mint;
        currentEpoch: number;
    };
    outputTokenInfo?: {
        mint: Mint;
        currentEpoch: number;
    };
};
type GetWithdrawQuoteParams = {
    liquidityDelta: BN;
    minSqrtPrice: BN;
    maxSqrtPrice: BN;
    sqrtPrice: BN;
    tokenATokenInfo?: {
        mint: Mint;
        currentEpoch: number;
    };
    tokenBTokenInfo?: {
        mint: Mint;
        currentEpoch: number;
    };
};
type DepositQuote = {
    actualInputAmount: BN;
    consumedInputAmount: BN;
    outputAmount: BN;
    liquidityDelta: BN;
};
type WithdrawQuote = {
    liquidityDelta: BN;
    outAmountA: BN;
    outAmountB: BN;
};
type DynamicFeeParams = {
    volatilityAccumulator: BN;
    binStep: number;
    variableFeeControl: number;
};
type SplitPositionParams = {
    firstPositionOwner: PublicKey;
    secondPositionOwner: PublicKey;
    pool: PublicKey;
    firstPosition: PublicKey;
    firstPositionNftAccount: PublicKey;
    secondPosition: PublicKey;
    secondPositionNftAccount: PublicKey;
    permanentLockedLiquidityPercentage: number;
    unlockedLiquidityPercentage: number;
    feeAPercentage: number;
    feeBPercentage: number;
    reward0Percentage: number;
    reward1Percentage: number;
};

/**
 * CpAmm SDK class to interact with the DAMM-V2
 */
declare class CpAmm {
    _program: AmmProgram;
    private poolAuthority;
    constructor(connection: Connection);
    /**
     * Prepares token accounts for a transaction by retrieving or creating associated token accounts.
     * @private
     * @param {PublicKey} owner - The owner of the token accounts
     * @param {PublicKey} tokenAMint - Mint address of token A
     * @param {PublicKey} tokenBMint - Mint address of token B
     * @param {PublicKey} tokenAProgram - Program ID for token A (Token or Token2022)
     * @param {PublicKey} tokenBProgram - Program ID for token B (Token or Token2022)
     * @returns {Promise<{tokenAAta: PublicKey, tokenBAta: PublicKey, instructions: TransactionInstruction[]}>}
     *          The token account addresses and any instructions needed to create them
     */
    private prepareTokenAccounts;
    /**
     * Derives token badge account metadata
     * @param tokenAMint - Public key of token A mint
     * @param tokenBMint - Public key of token B mint
     * @returns Array of account metadata for token badges
     */
    private getTokenBadgeAccounts;
    /**
     * Builds an instruction to add liquidity to a position.
     * @private
     * @param {BuildAddLiquidityParams} params - Parameters for adding liquidity
     * @returns {Promise<TransactionInstruction>} Instruction to add liquidity
     */
    private buildAddLiquidityInstruction;
    /**
     * Builds an instruction to remove all liquidity from a position.
     * @private
     * @param {BuildRemoveAllLiquidityInstructionParams} params - Parameters for removing all liquidity
     * @returns {Promise<TransactionInstruction>} Instruction to remove all liquidity
     */
    private buildRemoveAllLiquidityInstruction;
    /**
     * Builds an instruction to claim fees accumulated by a position.
     * @private
     * @param {ClaimPositionFeeInstructionParams} params - Parameters for claiming position fees
     * @returns {Promise<TransactionInstruction>} Instruction to claim position fees
     */
    private buildClaimPositionFeeInstruction;
    /**
     * Builds an instruction to close a position.
     * @private
     * @param {ClosePositionInstructionParams} params - Parameters for closing a position
     * @returns {Promise<TransactionInstruction>} Instruction to close the position
     */
    private buildClosePositionInstruction;
    /**
     * Builds an instruction to refresh vesting for a position
     * @param params Parameters required for the refresh vesting instruction
     * @returns Transaction instruction or null if no vestings to refresh
     */
    private buildRefreshVestingInstruction;
    /**
     * Helper function that builds instructions to claim fees, remove liquidity, and close a position
     * @param {BuildLiquidatePositionInstructionParams} params - Parameters for liquidating a position
     * @returns {Promise<TransactionInstruction[]>} Array of instructions
     * @private
     */
    private buildLiquidatePositionInstruction;
    /**
     * Builds a instruction to create a position.
     * @param {CreatePositionParams} params - Parameters for position creation.
     * @returns Transaction instruction.
     */
    private buildCreatePositionInstruction;
    /**
     * Private helper method to prepare common customizable pool creation logic
     * @param {PrepareCustomizablePoolParams} params - Common parameters for pool creation
     * @returns Prepared transaction data including instructions and accounts
     */
    private prepareCreatePoolParams;
    /**
     * Sets up token accounts and instructions for fee claim operations.
     * @private
     * @param {SetupFeeClaimAccountsParams} params - Parameters for setting up fee claim accounts.
     * @returns Token accounts and instructions for fee claiming.
     */
    private setupFeeClaimAccounts;
    /**
     * Fetches the Config state of the program.
     * @param config - Public key of the config account.
     * @returns Parsed ConfigState.
     */
    fetchConfigState(config: PublicKey): Promise<ConfigState>;
    /**
     * Fetches the Pool state.
     * @param pool - Public key of the pool.
     * @returns Parsed PoolState.
     */
    fetchPoolState(pool: PublicKey): Promise<PoolState>;
    /**
     * Fetches the Position state.
     * @param position - Public key of the position.
     * @returns Parsed PositionState.
     */
    fetchPositionState(position: PublicKey): Promise<PositionState>;
    /**
     * Retrieves all config accounts.
     * @returns Array of config public keys and their states.
     */
    getAllConfigs(): Promise<Array<{
        publicKey: PublicKey;
        account: ConfigState;
    }>>;
    /**
     * Retrieves all pool accounts.
     * @returns Array of pool public keys and their states.
     */
    getAllPools(): Promise<Array<{
        publicKey: PublicKey;
        account: PoolState;
    }>>;
    /**
     * Retrieves all position accounts.
     * @returns Array of position public keys and their states.
     */
    getAllPositions(): Promise<Array<{
        publicKey: PublicKey;
        account: PositionState;
    }>>;
    /**
     * Gets all positions a specific pool.
     * @param pool - Public key of the pool.
     * @returns List of user positions for the pool.
     */
    getAllPositionsByPool(pool: PublicKey): Promise<Array<{
        publicKey: PublicKey;
        account: PositionState;
    }>>;
    /**
     * Gets all positions of a user for a specific pool.
     * @param pool - Public key of the pool.
     * @param user - Public key of the user.
     * @returns List of user positions for the pool.
     */
    getUserPositionByPool(pool: PublicKey, user: PublicKey): Promise<Array<{
        positionNftAccount: PublicKey;
        position: PublicKey;
        positionState: PositionState;
    }>>;
    /**
     * Gets all positions of a user across all pools.
     * @param user - Public key of the user.
     * @returns Array of user positions already sorted by liquidity
     */
    getPositionsByUser(user: PublicKey): Promise<Array<{
        positionNftAccount: PublicKey;
        position: PublicKey;
        positionState: PositionState;
    }>>;
    getAllVestingsByPosition(position: PublicKey): Promise<Array<{
        publicKey: PublicKey;
        account: VestingState;
    }>>;
    isLockedPosition(position: PositionState): boolean;
    isPermanentLockedPosition(positionState: PositionState): boolean;
    /**
     * Checks if a position can be unlocked based on its locking state and vesting schedules.
     *
     * This method evaluates whether a position is eligible for operations that require
     * unlocked liquidity, such as removing all liquidity or closing the position. It checks both
     * permanent locks and time-based vesting schedules.
     *
     * @private
     * @param {PositionState} positionState - The current state of the position
     * @param {Array<{account: PublicKey; vestingState: VestingState}>} vestings - Array of vesting accounts and their states
     * @param {BN} currentPoint - Current timestamp or slot number (depending on activation type of pool)
     *
     * @returns {Object} Result object containing unlock status and reason
     * @returns {boolean} result.canUnlock - Whether the position can be unlocked
     * @returns {string|undefined} result.reason - Reason why position cannot be unlocked (if applicable)
     */
    canUnlockPosition(positionState: PositionState, vestings: Array<{
        account: PublicKey;
        vestingState: VestingState;
    }>, currentPoint: BN): {
        canUnlock: boolean;
        reason?: string;
    };
    isPoolExist(pool: PublicKey): Promise<boolean>;
    /**
     * Computes the liquidity delta based on the provided token amounts and sqrt price
     *
     * @param {LiquidityDeltaParams} params - The parameters for liquidity calculation
     * @returns {Promise<BN>} - The computed liquidity delta in Q64 value.
     */
    getLiquidityDelta(params: LiquidityDeltaParams): BN;
    /**
     * Calculates swap quote based on input amount and pool state.
     * @param params - Swap parameters including input amount, pool state, slippage, etc.
     * @returns Swap quote including expected output amount, fee, and price impact.
     */
    getQuote(params: GetQuoteParams): {
        swapInAmount: BN;
        consumedInAmount: BN;
        swapOutAmount: BN;
        minSwapOutAmount: BN;
        totalFee: BN;
        priceImpact: number;
    };
    /**
     * Calculates swap quote based on desired output amount and pool state.
     * @param params - Swap parameters including output amount, pool state, slippage, etc.
     * @returns Swap quote including required input amount, fees, and price impact.
     */
    getQuoteExactOut(params: GetQuoteExactOutParams): QuoteExactOutResult;
    /**
     * Calculates the deposit quote for liquidity pool.
     *
     * @param {GetDepositQuoteParams} params - The parameters for calculating the deposit quote.
     *
     * @returns {Promise<Object>} Deposit quote results
     * @returns {BN} returns.actualInputAmount - The actual amount used as input (after deducting transfer fees).
     * @returns {BN} returns.outputAmount - The calculated corresponding amount of the other token.
     * @returns {BN} returns.liquidityDelta - The amount of liquidity that will be added to the pool.
     */
    getDepositQuote(params: GetDepositQuoteParams): DepositQuote;
    /**
     * Calculates the withdrawal quote for removing liquidity from a concentrated liquidity pool.
     *
     * @param {GetWithdrawQuoteParams} params - The parameters for calculating the withdraw quote
     *
     * @param {Object|null} params.tokenATokenInfo - must provide if token a is token2022
     * @param {Object|null} params.tokenBTokenInfo - must provide if token b is token2022
     *
     * @returns {Promise<Object>} Withdrawal quote results
     * @returns {BN} returns.liquidityDelta - The amount of liquidity that will be removed from the pool
     * @returns {BN} returns.outAmountA - The calculated amount of token A to be received (after deducting transfer fees)
     * @returns {BN} returns.outAmountB - The calculated amount of token B to be received (after deducting transfer fees)
     */
    getWithdrawQuote(params: GetWithdrawQuoteParams): WithdrawQuote;
    /**
     * Calculates liquidity and corresponding token amounts for token A single-sided pool creation
     * Only supports initialization where initial price equals min sqrt price
     * @param params Parameters for single-sided pool creation
     * @returns Calculated liquidity delta
     */
    preparePoolCreationSingleSide(params: PreparePoolCreationSingleSide): BN;
    /**
     * Prepares parameters required for pool creation, including initial sqrt price and liquidity.
     * @private
     * @param {PreparePoolCreationParams} params - Initial token amounts for pool creation.
     * @returns init sqrt price and liquidity in Q64 format.
     */
    preparePoolCreationParams(params: PreparePoolCreationParams): PreparedPoolCreation;
    /**
     * Builds a transaction to create a permissionless pool.
     * @param params - Parameters for pool creation.
     * @returns Transaction builder.
     */
    createPool(params: CreatePoolParams): TxBuilder;
    /**
     * Builds a transaction to create a customizable pool.
     * @param params - Parameters for customizable pool creation.
     * @returns Transaction and related addresses.
     */
    createCustomPool(params: InitializeCustomizeablePoolParams): Promise<{
        tx: Transaction;
        pool: PublicKey;
        position: PublicKey;
    }>;
    createCustomPoolWithDynamicConfig(params: InitializeCustomizeablePoolWithDynamicConfigParams): Promise<{
        tx: Transaction;
        pool: PublicKey;
        position: PublicKey;
    }>;
    /**
     * Builds a transaction to create a position.
     * @param {CreatePositionParams} params - Parameters for position creation.
     * @returns Transaction builder.
     */
    createPosition(params: CreatePositionParams): TxBuilder;
    /**
     * Builds a transaction to add liquidity to an existing position.
     * @param {AddLiquidityParams} params - Parameters for adding liquidity.
     * @returns Transaction builder.
     */
    addLiquidity(params: AddLiquidityParams): TxBuilder;
    /**
     * Creates a new position and add liquidity to position it in a single transaction.
     * Handles both native SOL and other tokens, automatically wrapping/unwrapping SOL as needed.
     *
     * @param {CreatePositionAndAddLiquidity} params - Parameters for creating position and adding liquidity
     *
     * @returns {Transaction} A transaction that creates a position and adds liquidity
     *
     **/
    createPositionAndAddLiquidity(params: CreatePositionAndAddLiquidity): TxBuilder;
    /**
     * Builds a transaction to remove liquidity from a position.
     * @param {RemoveLiquidityParams} params - Parameters for removing liquidity.
     * @returns Transaction builder.
     */
    removeLiquidity(params: RemoveLiquidityParams): TxBuilder;
    /**
     * Builds a transaction to remove liquidity from a position.
     * @param {RemoveLiquidityParams} params - Parameters for removing liquidity.
     * @returns Transaction builder.
     */
    removeAllLiquidity(params: RemoveAllLiquidityParams): TxBuilder;
    /**
     * Builds a transaction to perform a swap in the pool.
     * @param {SwapParams} params - Parameters for swapping tokens.
     * @returns Transaction builder.
     */
    swap(params: SwapParams): TxBuilder;
    /**
     * Builds a transaction to lock a position with vesting schedule.
     * @param {LockPositionParams} params - Locking parameters.
     * @returns Transaction builder.
     */
    lockPosition(params: LockPositionParams): TxBuilder;
    /**
     * Builds a transaction to permanently lock a position.
     * @param {PermanentLockParams} params - Parameters for permanent locking.
     * @returns Transaction builder.
     */
    permanentLockPosition(params: PermanentLockParams): TxBuilder;
    /**
     * Builds a transaction to refresh vesting status of a position.
     * @param {RefreshVestingParams} params - Refresh vesting parameters.
     * @returns Transaction builder.
     */
    refreshVesting(params: RefreshVestingParams): TxBuilder;
    closePosition(params: ClosePositionParams): TxBuilder;
    /**
     * Builds a transaction to remove all liquidity from a position and close it.
     * This combines several operations in a single transaction:
     * 1. Claims any accumulated fees
     * 2. Removes all liquidity
     * 3. Closes the position
     *
     * @param {RemoveAllLiquidityAndClosePositionParams} params - Combined parameters
     * @returns {TxBuilder} Transaction builder with all required instructions
     * @throws {Error} If the position is locked or cannot be closed
     */
    removeAllLiquidityAndClosePosition(params: RemoveAllLiquidityAndClosePositionParams): TxBuilder;
    /**
     * Builds a transaction to merge liquidity from one position into another.
     * This process:
     * 1. Claims fees from the source position
     * 2. Removes all liquidity from the source position
     * 3. Adds that liquidity to the target position
     * 4. Closes the source position
     *
     * @param {MergePositionParams} params - Parameters for merging positions
     * @returns {TxBuilder} Transaction builder with all required instructions
     * @throws {Error} If either position is locked or incompatible
     */
    mergePosition(params: MergePositionParams): TxBuilder;
    /**
     * Builds a transaction to update reward duration.
     * @param {UpdateRewardDurationParams} params - Parameters including pool and new duration.
     * @returns Transaction builder.
     */
    updateRewardDuration(params: UpdateRewardDurationParams): TxBuilder;
    /**
     * Builds a transaction to update reward funder address.
     * @param {UpdateRewardFunderParams} params - Parameters including pool and new funder address.
     * @returns Transaction builder.
     */
    updateRewardFunder(params: UpdateRewardFunderParams): TxBuilder;
    /**
     * Builds a transaction to fund rewards in a pool.
     * @param {FundRewardParams} params - Funding parameters.
     * @returns Transaction builder.
     */
    fundReward(params: FundRewardParams): TxBuilder;
    /**
     * Builds a transaction to withdraw ineligible rewards from a pool.
     * @param {WithdrawIneligibleRewardParams} params - Parameters for withdrawal.
     * @returns Transaction builder.
     */
    withdrawIneligibleReward(params: WithdrawIneligibleRewardParams): TxBuilder;
    /**
     * Builds a transaction to claim partner fee rewards.
     * @param {ClaimPartnerFeeParams} params - Claim parameters including amounts and partner address.
     * @returns Transaction builder.
     */
    claimPartnerFee(params: ClaimPartnerFeeParams): TxBuilder;
    /**
     * Builds a transaction to claim position fee rewards.
     * @param {ClaimPositionFeeParams} params - Parameters for claiming position fee.
     * @returns Transaction builder.
     */
    claimPositionFee(params: ClaimPositionFeeParams): TxBuilder;
    /**
     * Builds a transaction to claim position fee rewards.
     * @param {ClaimPositionFeeParams2} params - Parameters for claiming position fee.
     * @returns Transaction builder.
     */
    claimPositionFee2(params: ClaimPositionFeeParams2): TxBuilder;
    /**
     * Builds a transaction to claim reward from a position.
     * @param {ClaimRewardParams} params - Parameters for claiming reward.
     * @returns Transaction builder.
     */
    claimReward(params: ClaimRewardParams): TxBuilder;
    splitPosition(params: SplitPositionParams): TxBuilder;
}

declare function getFirstKey(key1: PublicKey, key2: PublicKey): Buffer;
declare function getSecondKey(key1: PublicKey, key2: PublicKey): Buffer;
declare function derivePoolAuthority(): PublicKey;
declare function deriveConfigAddress(index: BN): PublicKey;
declare function derivePoolAddress(config: PublicKey, tokenAMint: PublicKey, tokenBMint: PublicKey): PublicKey;
declare function derivePositionAddress(positionNft: PublicKey): PublicKey;
declare function deriveTokenVaultAddress(tokenMint: PublicKey, pool: PublicKey): PublicKey;
declare function deriveRewardVaultAddress(pool: PublicKey, rewardIndex: number): PublicKey;
declare function deriveCustomizablePoolAddress(tokenAMint: PublicKey, tokenBMint: PublicKey): PublicKey;
declare function deriveTokenBadgeAddress(tokenMint: PublicKey): PublicKey;
declare function deriveClaimFeeOperatorAddress(operator: PublicKey): PublicKey;
declare function derivePositionNftAccount(positionNftMint: PublicKey): PublicKey;

declare const CP_AMM_PROGRAM_ID: PublicKey;
declare const LIQUIDITY_SCALE = 128;
declare const SCALE_OFFSET = 64;
declare const BASIS_POINT_MAX = 10000;
declare const MAX_FEE_NUMERATOR = 500000000;
declare const FEE_DENOMINATOR = 1000000000;
declare const MIN_SQRT_PRICE: BN;
declare const MAX_SQRT_PRICE: BN;
declare const MIN_CU_BUFFER = 50000;
declare const MAX_CU_BUFFER = 200000;
declare const DYNAMIC_FEE_FILTER_PERIOD_DEFAULT = 10;
declare const DYNAMIC_FEE_DECAY_PERIOD_DEFAULT = 120;
declare const DYNAMIC_FEE_REDUCTION_FACTOR_DEFAULT = 5000;
declare const BIN_STEP_BPS_DEFAULT = 1;
declare const BIN_STEP_BPS_U128_DEFAULT: BN;
declare const MAX_PRICE_CHANGE_BPS_DEFAULT = 1500;

declare function getTokenProgram(flag: number): PublicKey;
declare const getTokenDecimals: (connection: Connection, mint: PublicKey) => Promise<number>;
declare const getOrCreateATAInstruction: (connection: Connection, tokenMint: PublicKey, owner: PublicKey, payer: PublicKey, allowOwnerOffCurve: boolean, tokenProgram: PublicKey) => Promise<{
    ataPubkey: PublicKey;
    ix?: TransactionInstruction;
}>;
declare const wrapSOLInstruction: (from: PublicKey, to: PublicKey, amount: bigint) => TransactionInstruction[];
declare const unwrapSOLInstruction: (owner: PublicKey, receiver?: PublicKey, allowOwnerOffCurve?: boolean) => Promise<TransactionInstruction>;
declare function getAllUserPositionNftAccount(connection: Connection, user: PublicKey): Promise<Array<{
    positionNft: PublicKey;
    positionNftAccount: PublicKey;
}>>;
declare function getAllPositionNftAccountByOwner(connection: Connection, user: PublicKey): Promise<Array<{
    positionNft: PublicKey;
    positionNftAccount: PublicKey;
}>>;

declare function getBaseFeeNumerator(feeSchedulerMode: FeeSchedulerMode, cliffFeeNumerator: BN, period: BN, reductionFactor: BN): BN;
/**
 * Calculates the dynamic fee numerator based on market volatility metrics
 *
 * @param volatilityAccumulator - A measure of accumulated market volatility (BN)
 * @param binStep - The size of price bins in the liquidity distribution (BN)
 * @param variableFeeControl - Parameter controlling the impact of volatility on fees (BN)
 * @returns The calculated dynamic fee numerator (BN)
 */
declare function getDynamicFeeNumerator(volatilityAccumulator: BN, binStep: BN, variableFeeControl: BN): BN;
/**
 * Calculates the fee numerator based on current market conditions and fee schedule configuration
 *
 * @param currentPoint - The current price point in the liquidity curve
 * @param activationPoint - The price point at which the fee schedule is activated (BN)
 * @param numberOfPeriod - The total number of periods in the fee schedule
 * @param periodFrequency - The frequency at which periods change (BN)
 * @param feeSchedulerMode - The mode determining how fees are calculated (0 = constant, 1 = linear, etc.)
 * @param cliffFeeNumerator - The initial fee numerator at the cliff point (BN)
 * @param reductionFactor - The factor by which fees are reduced in each period (BN)
 * @param dynamicFeeParams - Optional parameters for dynamic fee calculation
 * @param dynamicFeeParams.volatilityAccumulator - Measure of accumulated market volatility (BN)
 * @param dynamicFeeParams.binStep - Size of price bins in the liquidity distribution (BN)
 * @param dynamicFeeParams.variableFeeControl - Parameter controlling the impact of volatility (BN)
 * @returns The calculated fee numerator (BN), capped at MAX_FEE_NUMERATOR
 */
declare function getFeeNumerator(currentPoint: number, activationPoint: BN, numberOfPeriod: number, periodFrequency: BN, feeSchedulerMode: number, cliffFeeNumerator: BN, reductionFactor: BN, dynamicFeeParams?: {
    volatilityAccumulator: BN;
    binStep: number;
    variableFeeControl: number;
}): BN;
/**
 * Determines the fee mode based on the swap direction and fee collection configuration
 *
 * @param collectFeeMode - The fee collection mode (e.g., OnlyB, BothToken)
 * @param btoA - Boolean indicating if the swap is from token B to token A
 * @returns { feeOnInput, feesOnTokenA }
 */
declare function getFeeMode(collectFeeMode: CollectFeeMode, btoA: boolean): FeeMode;
/**
 *
 * Calculates the output amount and fees for a swap operation in a concentrated liquidity pool.
 *
 * @param inAmount - The input amount of tokens the user is swapping
 * @param sqrtPrice - The current square root price of the pool
 * @param liquidity - The current liquidity available in the pool
 * @param tradeFeeNumerator - The fee numerator used to calculate trading fees
 * @param aToB - Direction of the swap: true for token A to token B, false for token B to token A
 * @param collectFeeMode - Determines how fees are collected (0: both tokens, 1: only token B)
 * @returns Object containing the actual output amount after fees and the total fee amount
 */
declare function getSwapAmount(inAmount: BN, sqrtPrice: BN, liquidity: BN, tradeFeeNumerator: BN, aToB: boolean, collectFeeMode: number): {
    amountOut: BN;
    totalFee: BN;
    nextSqrtPrice: BN;
};
/**
 * Converts basis points (bps) to a fee numerator
 * 1 bps = 0.01% = 0.0001 in decimal
 *
 * @param bps - The value in basis points [1-10_000]
 * @returns The equivalent fee numerator
 */
declare function bpsToFeeNumerator(bps: number): BN;
/**
 * Converts a fee numerator back to basis points (bps)
 *
 * @param feeNumerator - The fee numerator to convert
 * @returns The equivalent value in basis points [1-10_000]
 */
declare function feeNumeratorToBps(feeNumerator: BN): number;
/**
 * Calculates base fee parameters for a fee scheduler system.
 * @param {number} maxBaseFeeBps - Maximum fee in basis points
 * @param {number} minBaseFeeBps - Minimum fee in basis points
 * @param {FeeSchedulerMode} feeSchedulerMode - Mode for fee reduction (Linear or Exponential)
 * @param {number} numberOfPeriod - Number of periods over which to schedule fee reduction
 * @param {BN} periodFrequency - Time interval between fee reductions
 *
 * @returns {BaseFee}
 */
declare function getBaseFeeParams(maxBaseFeeBps: number, minBaseFeeBps: number, feeSchedulerMode: FeeSchedulerMode, numberOfPeriod: number, totalDuration: number): BaseFee;
/**
 * Calculate dynamic fee parameters
 * @param {number} baseFeeBps - Base fee in basis points
 * @param {number} [maxPriceChangeBps=1500] - Maximum price change to consider for fee calculation (in basis points)
 *
 * @returns {DynamicFee}
 */
declare function getDynamicFeeParams(baseFeeBps: number, maxPriceChangeBps?: number): DynamicFee;
/**
 * Calculates the excluded fee amount and trading fee from an included fee amount
 * @param tradeFeeNumerator - The fee numerator
 * @param includedFeeAmount - The amount that includes the fee
 * @returns Tuple of [excluded_fee_amount, trading_fee]
 */
declare function getExcludedFeeAmount(tradeFeeNumerator: BN, includedFeeAmount: BN): {
    excludedFeeAmount: BN;
    tradingFee: BN;
};
/**
 * Calculates the included fee amount from an excluded fee amount
 * @param tradeFeeNumerator - The fee numerator
 * @param excludedFeeAmount - The amount that excludes the fee
 * @returns The amount including the fee
 */
declare function getIncludedFeeAmount(tradeFeeNumerator: BN, excludedFeeAmount: BN): BN;
/**
 * Calculates the swap result from a given output amount
 * @param pool - The pool state
 * @param outAmount - The desired output amount
 * @param feeMode - The fee mode configuration
 * @param tradeDirection - The direction of the trade
 * @param currentPoint - The current time/slot point
 * @returns Tuple of [SwapResult, input_amount]
 */
declare function getSwapResultFromOutAmount(pool: PoolState, outAmount: BN, feeMode: FeeMode & {
    hasReferral?: boolean;
}, tradeDirection: TradeDirection, currentPoint: number): {
    swapResult: SwapResult;
    inputAmount: BN;
};

declare function getNextSqrtPrice(amount: BN, sqrtPrice: BN, liquidity: BN, aToB: boolean): BN;
declare function getLiquidityDeltaFromAmountA(amountA: BN, lowerSqrtPrice: BN, // current sqrt price
upperSqrtPrice: BN): BN;
declare function getLiquidityDeltaFromAmountB(amountB: BN, lowerSqrtPrice: BN, // min sqrt price
upperSqrtPrice: BN): BN;
declare function getAmountAFromLiquidityDelta(liquidity: BN, currentSqrtPrice: BN, // current sqrt price
maxSqrtPrice: BN, rounding: Rounding): BN;
declare function getAmountBFromLiquidityDelta(liquidity: BN, currentSqrtPrice: BN, // current sqrt price,
minSqrtPrice: BN, rounding: Rounding): BN;
declare function getNextSqrtPriceFromAmountBRoundingUp(sqrtPrice: BN, liquidity: BN, amount: BN): BN;
declare function getNextSqrtPriceFromAmountARoundingDown(sqrtPrice: BN, liquidity: BN, amount: BN): BN;
declare function getNextSqrtPriceFromOutput(sqrtPrice: BN, liquidity: BN, outAmount: BN, isB: boolean): BN;

declare const getSimulationComputeUnits: (connection: Connection, instructions: Array<TransactionInstruction>, payer: PublicKey, lookupTables: Array<AddressLookupTableAccount> | [], commitment?: Commitment) => Promise<number | null>;
/**
 * Gets the estimated compute unit usage with a buffer.
 * @param connection A Solana connection object.
 * @param instructions The instructions of the transaction to simulate.
 * @param feePayer The public key of the fee payer.
 * @param buffer The buffer to add to the estimated compute unit usage. Max value is 1. Default value is 0.1 if not provided, and will be capped between 50k - 200k.
 * @returns The estimated compute unit usage with the buffer.
 */
declare const getEstimatedComputeUnitUsageWithBuffer: (connection: Connection, instructions: TransactionInstruction[], feePayer: PublicKey, buffer?: number) => Promise<number>;
/**
 * Gets the estimated compute unit usage with a buffer and converts it to a SetComputeUnitLimit instruction.
 * If the estimated compute unit usage cannot be retrieved, returns a SetComputeUnitLimit instruction with the fallback unit.
 * @param connection A Solana connection object.
 * @param instructions The instructions of the transaction to simulate.
 * @param feePayer The public key of the fee payer.
 * @param buffer The buffer to add to the estimated compute unit usage. Max value is 1. Default value is 0.1 if not provided, and will be capped between 50k - 200k.
 * @returns A SetComputeUnitLimit instruction with the estimated compute unit usage.
 */
declare const getEstimatedComputeUnitIxWithBuffer: (connection: Connection, instructions: TransactionInstruction[], feePayer: PublicKey, buffer?: number) => Promise<TransactionInstruction>;

/**
 * It takes an amount and a slippage rate, and returns the maximum amount that can be received with
 * that slippage rate
 * @param {BN} amount - The amount of tokens you want to buy.
 * @param {number} rate - The maximum percentage of slippage you're willing to accept. (Max to 2 decimal place)
 * @returns The maximum amount of tokens that can be bought with the given amount of ETH, given the
 * slippage rate.
 */
declare const getMaxAmountWithSlippage: (amount: BN, rate: number) => BN;
/**
 * It takes an amount and a slippage rate, and returns the minimum amount that will be received after
 * slippage
 * @param {BN} amount - The amount of tokens you want to sell.
 * @param {number} rate - The percentage of slippage you're willing to accept. (Max to 2 decimal place)
 * @returns The minimum amount that can be received after slippage is applied.
 */
declare const getMinAmountWithSlippage: (amount: BN, rate: number) => BN;
/**
 * Calculate price impact as a percentage
 * @param nextSqrtPrice sqrt price after swap
 * @param currentSqrtPrice current pool sqrt price
 * @returns Price impact as a percentage (e.g., 1.5 means 1.5%)
 */
declare const getPriceImpact: (nextSqrtPrice: BN, currentSqrtPrice: BN) => number;
declare const getPriceFromSqrtPrice: (sqrtPrice: BN, tokenADecimal: number, tokenBDecimal: number) => string;
declare const getSqrtPriceFromPrice: (price: string, tokenADecimal: number, tokenBDecimal: number) => BN;
declare const getUnClaimReward: (poolState: PoolState, positionState: PositionState) => {
    feeTokenA: BN;
    feeTokenB: BN;
    rewards: BN[];
};

declare const positionByPoolFilter: (pool: PublicKey) => GetProgramAccountsFilter;
declare const vestingByPositionFilter: (position: PublicKey) => GetProgramAccountsFilter;

declare function calculateInitSqrtPrice(tokenAAmount: BN, tokenBAmount: BN, minSqrtPrice: BN, maxSqrtPrice: BN): BN;

interface TransferFeeIncludedAmount {
    amount: BN;
    transferFee: BN;
}
declare function calculateTransferFeeIncludedAmount(transferFeeExcludedAmount: BN, mint: Mint, currentEpoch: number): TransferFeeIncludedAmount;
interface TransferFeeExcludedAmount {
    amount: BN;
    transferFee: BN;
}
declare function calculateTransferFeeExcludedAmount(transferFeeIncludedAmount: BN, mint: Mint, currentEpoch: number): TransferFeeExcludedAmount;

/**
 * Checks if a vesting schedule is ready for full release
 * @param vestingData The vesting account data
 * @param currentPoint Current timestamp or slot
 * @returns True if the vesting is complete and all liquidity can be released
 */
declare function isVestingComplete(vestingData: VestingState, currentPoint: BN): boolean;
/**
 * Gets the total amount of liquidity in the vesting schedule
 * @param vestingData The vesting account data
 * @returns The total locked liquidity amount
 */
declare function getTotalLockedLiquidity(vestingData: VestingState): BN;
/**
 * Calculates the available liquidity to withdraw based on vesting schedule
 * @param vestingData The vesting account data
 * @param positionData The position account data
 * @param currentPoint Current timestamp or slot
 * @returns The amount of liquidity available to withdraw
 */
declare function getAvailableVestingLiquidity(vestingData: VestingState, currentPoint: BN): BN;

declare const ONE: BN;
declare function pow(base: BN, exp: BN): BN;

declare function mulDiv(x: BN, y: BN, denominator: BN, rounding: Rounding): BN;
declare function q64ToDecimal(num: BN, decimalPlaces?: number): Decimal;
declare function decimalToQ64(num: Decimal): BN;

var address = "cpamdpZCGKUy5JxQXB4dcpGPiikHawvSWAd6mEn1sGG";
var metadata = {
	name: "cp_amm",
	version: "0.1.3",
	spec: "0.1.0",
	description: "Created with Anchor"
};
var instructions = [
	{
		name: "add_liquidity",
		discriminator: [
			181,
			157,
			89,
			67,
			143,
			182,
			52,
			72
		],
		accounts: [
			{
				name: "pool",
				writable: true,
				relations: [
					"position"
				]
			},
			{
				name: "position",
				writable: true
			},
			{
				name: "token_a_account",
				docs: [
					"The user token a account"
				],
				writable: true
			},
			{
				name: "token_b_account",
				docs: [
					"The user token b account"
				],
				writable: true
			},
			{
				name: "token_a_vault",
				docs: [
					"The vault token account for input token"
				],
				writable: true,
				relations: [
					"pool"
				]
			},
			{
				name: "token_b_vault",
				docs: [
					"The vault token account for output token"
				],
				writable: true,
				relations: [
					"pool"
				]
			},
			{
				name: "token_a_mint",
				docs: [
					"The mint of token a"
				],
				relations: [
					"pool"
				]
			},
			{
				name: "token_b_mint",
				docs: [
					"The mint of token b"
				],
				relations: [
					"pool"
				]
			},
			{
				name: "position_nft_account",
				docs: [
					"The token account for nft"
				]
			},
			{
				name: "owner",
				docs: [
					"owner of position"
				],
				signer: true
			},
			{
				name: "token_a_program",
				docs: [
					"Token a program"
				]
			},
			{
				name: "token_b_program",
				docs: [
					"Token b program"
				]
			},
			{
				name: "event_authority",
				pda: {
					seeds: [
						{
							kind: "const",
							value: [
								95,
								95,
								101,
								118,
								101,
								110,
								116,
								95,
								97,
								117,
								116,
								104,
								111,
								114,
								105,
								116,
								121
							]
						}
					]
				}
			},
			{
				name: "program"
			}
		],
		args: [
			{
				name: "params",
				type: {
					defined: {
						name: "AddLiquidityParameters"
					}
				}
			}
		]
	},
	{
		name: "claim_partner_fee",
		discriminator: [
			97,
			206,
			39,
			105,
			94,
			94,
			126,
			148
		],
		accounts: [
			{
				name: "pool_authority",
				address: "HLnpSz9h2S4hiLQ43rnSD9XkcUThA7B8hQMKmDaiTLcC"
			},
			{
				name: "pool",
				writable: true
			},
			{
				name: "token_a_account",
				docs: [
					"The treasury token a account"
				],
				writable: true
			},
			{
				name: "token_b_account",
				docs: [
					"The treasury token b account"
				],
				writable: true
			},
			{
				name: "token_a_vault",
				docs: [
					"The vault token account for input token"
				],
				writable: true,
				relations: [
					"pool"
				]
			},
			{
				name: "token_b_vault",
				docs: [
					"The vault token account for output token"
				],
				writable: true,
				relations: [
					"pool"
				]
			},
			{
				name: "token_a_mint",
				docs: [
					"The mint of token a"
				],
				relations: [
					"pool"
				]
			},
			{
				name: "token_b_mint",
				docs: [
					"The mint of token b"
				],
				relations: [
					"pool"
				]
			},
			{
				name: "partner",
				signer: true,
				relations: [
					"pool"
				]
			},
			{
				name: "token_a_program",
				docs: [
					"Token a program"
				]
			},
			{
				name: "token_b_program",
				docs: [
					"Token b program"
				]
			},
			{
				name: "event_authority",
				pda: {
					seeds: [
						{
							kind: "const",
							value: [
								95,
								95,
								101,
								118,
								101,
								110,
								116,
								95,
								97,
								117,
								116,
								104,
								111,
								114,
								105,
								116,
								121
							]
						}
					]
				}
			},
			{
				name: "program"
			}
		],
		args: [
			{
				name: "max_amount_a",
				type: "u64"
			},
			{
				name: "max_amount_b",
				type: "u64"
			}
		]
	},
	{
		name: "claim_position_fee",
		discriminator: [
			180,
			38,
			154,
			17,
			133,
			33,
			162,
			211
		],
		accounts: [
			{
				name: "pool_authority",
				address: "HLnpSz9h2S4hiLQ43rnSD9XkcUThA7B8hQMKmDaiTLcC"
			},
			{
				name: "pool",
				relations: [
					"position"
				]
			},
			{
				name: "position",
				writable: true
			},
			{
				name: "token_a_account",
				docs: [
					"The user token a account"
				],
				writable: true
			},
			{
				name: "token_b_account",
				docs: [
					"The user token b account"
				],
				writable: true
			},
			{
				name: "token_a_vault",
				docs: [
					"The vault token account for input token"
				],
				writable: true,
				relations: [
					"pool"
				]
			},
			{
				name: "token_b_vault",
				docs: [
					"The vault token account for output token"
				],
				writable: true,
				relations: [
					"pool"
				]
			},
			{
				name: "token_a_mint",
				docs: [
					"The mint of token a"
				],
				relations: [
					"pool"
				]
			},
			{
				name: "token_b_mint",
				docs: [
					"The mint of token b"
				],
				relations: [
					"pool"
				]
			},
			{
				name: "position_nft_account",
				docs: [
					"The token account for nft"
				]
			},
			{
				name: "owner",
				docs: [
					"owner of position"
				],
				signer: true
			},
			{
				name: "token_a_program",
				docs: [
					"Token a program"
				]
			},
			{
				name: "token_b_program",
				docs: [
					"Token b program"
				]
			},
			{
				name: "event_authority",
				pda: {
					seeds: [
						{
							kind: "const",
							value: [
								95,
								95,
								101,
								118,
								101,
								110,
								116,
								95,
								97,
								117,
								116,
								104,
								111,
								114,
								105,
								116,
								121
							]
						}
					]
				}
			},
			{
				name: "program"
			}
		],
		args: [
		]
	},
	{
		name: "claim_protocol_fee",
		discriminator: [
			165,
			228,
			133,
			48,
			99,
			249,
			255,
			33
		],
		accounts: [
			{
				name: "pool_authority",
				address: "HLnpSz9h2S4hiLQ43rnSD9XkcUThA7B8hQMKmDaiTLcC"
			},
			{
				name: "pool",
				writable: true
			},
			{
				name: "token_a_vault",
				docs: [
					"The vault token account for input token"
				],
				writable: true,
				relations: [
					"pool"
				]
			},
			{
				name: "token_b_vault",
				docs: [
					"The vault token account for output token"
				],
				writable: true,
				relations: [
					"pool"
				]
			},
			{
				name: "token_a_mint",
				docs: [
					"The mint of token a"
				],
				relations: [
					"pool"
				]
			},
			{
				name: "token_b_mint",
				docs: [
					"The mint of token b"
				],
				relations: [
					"pool"
				]
			},
			{
				name: "token_a_account",
				docs: [
					"The treasury token a account"
				],
				writable: true,
				pda: {
					seeds: [
						{
							kind: "const",
							value: [
								48,
								9,
								89,
								123,
								106,
								114,
								131,
								251,
								50,
								173,
								254,
								250,
								10,
								80,
								160,
								84,
								143,
								100,
								81,
								249,
								134,
								112,
								30,
								213,
								50,
								166,
								239,
								78,
								53,
								175,
								188,
								85
							]
						},
						{
							kind: "account",
							path: "token_a_program"
						},
						{
							kind: "account",
							path: "token_a_mint"
						}
					],
					program: {
						kind: "const",
						value: [
							140,
							151,
							37,
							143,
							78,
							36,
							137,
							241,
							187,
							61,
							16,
							41,
							20,
							142,
							13,
							131,
							11,
							90,
							19,
							153,
							218,
							255,
							16,
							132,
							4,
							142,
							123,
							216,
							219,
							233,
							248,
							89
						]
					}
				}
			},
			{
				name: "token_b_account",
				docs: [
					"The treasury token b account"
				],
				writable: true,
				pda: {
					seeds: [
						{
							kind: "const",
							value: [
								48,
								9,
								89,
								123,
								106,
								114,
								131,
								251,
								50,
								173,
								254,
								250,
								10,
								80,
								160,
								84,
								143,
								100,
								81,
								249,
								134,
								112,
								30,
								213,
								50,
								166,
								239,
								78,
								53,
								175,
								188,
								85
							]
						},
						{
							kind: "account",
							path: "token_b_program"
						},
						{
							kind: "account",
							path: "token_b_mint"
						}
					],
					program: {
						kind: "const",
						value: [
							140,
							151,
							37,
							143,
							78,
							36,
							137,
							241,
							187,
							61,
							16,
							41,
							20,
							142,
							13,
							131,
							11,
							90,
							19,
							153,
							218,
							255,
							16,
							132,
							4,
							142,
							123,
							216,
							219,
							233,
							248,
							89
						]
					}
				}
			},
			{
				name: "claim_fee_operator",
				docs: [
					"Claim fee operator"
				]
			},
			{
				name: "operator",
				docs: [
					"Operator"
				],
				signer: true,
				relations: [
					"claim_fee_operator"
				]
			},
			{
				name: "token_a_program",
				docs: [
					"Token a program"
				]
			},
			{
				name: "token_b_program",
				docs: [
					"Token b program"
				]
			},
			{
				name: "event_authority",
				pda: {
					seeds: [
						{
							kind: "const",
							value: [
								95,
								95,
								101,
								118,
								101,
								110,
								116,
								95,
								97,
								117,
								116,
								104,
								111,
								114,
								105,
								116,
								121
							]
						}
					]
				}
			},
			{
				name: "program"
			}
		],
		args: [
			{
				name: "max_amount_a",
				type: "u64"
			},
			{
				name: "max_amount_b",
				type: "u64"
			}
		]
	},
	{
		name: "claim_reward",
		discriminator: [
			149,
			95,
			181,
			242,
			94,
			90,
			158,
			162
		],
		accounts: [
			{
				name: "pool_authority",
				address: "HLnpSz9h2S4hiLQ43rnSD9XkcUThA7B8hQMKmDaiTLcC"
			},
			{
				name: "pool",
				writable: true,
				relations: [
					"position"
				]
			},
			{
				name: "position",
				writable: true
			},
			{
				name: "reward_vault",
				docs: [
					"The vault token account for reward token"
				],
				writable: true
			},
			{
				name: "reward_mint"
			},
			{
				name: "user_token_account",
				writable: true
			},
			{
				name: "position_nft_account",
				docs: [
					"The token account for nft"
				]
			},
			{
				name: "owner",
				docs: [
					"owner of position"
				],
				signer: true
			},
			{
				name: "token_program"
			},
			{
				name: "event_authority",
				pda: {
					seeds: [
						{
							kind: "const",
							value: [
								95,
								95,
								101,
								118,
								101,
								110,
								116,
								95,
								97,
								117,
								116,
								104,
								111,
								114,
								105,
								116,
								121
							]
						}
					]
				}
			},
			{
				name: "program"
			}
		],
		args: [
			{
				name: "reward_index",
				type: "u8"
			},
			{
				name: "skip_reward",
				type: "u8"
			}
		]
	},
	{
		name: "close_claim_fee_operator",
		discriminator: [
			38,
			134,
			82,
			216,
			95,
			124,
			17,
			99
		],
		accounts: [
			{
				name: "claim_fee_operator",
				writable: true
			},
			{
				name: "rent_receiver",
				writable: true
			},
			{
				name: "admin",
				signer: true
			},
			{
				name: "event_authority",
				pda: {
					seeds: [
						{
							kind: "const",
							value: [
								95,
								95,
								101,
								118,
								101,
								110,
								116,
								95,
								97,
								117,
								116,
								104,
								111,
								114,
								105,
								116,
								121
							]
						}
					]
				}
			},
			{
				name: "program"
			}
		],
		args: [
		]
	},
	{
		name: "close_config",
		discriminator: [
			145,
			9,
			72,
			157,
			95,
			125,
			61,
			85
		],
		accounts: [
			{
				name: "config",
				writable: true
			},
			{
				name: "admin",
				writable: true,
				signer: true
			},
			{
				name: "rent_receiver",
				writable: true
			},
			{
				name: "event_authority",
				pda: {
					seeds: [
						{
							kind: "const",
							value: [
								95,
								95,
								101,
								118,
								101,
								110,
								116,
								95,
								97,
								117,
								116,
								104,
								111,
								114,
								105,
								116,
								121
							]
						}
					]
				}
			},
			{
				name: "program"
			}
		],
		args: [
		]
	},
	{
		name: "close_position",
		discriminator: [
			123,
			134,
			81,
			0,
			49,
			68,
			98,
			98
		],
		accounts: [
			{
				name: "position_nft_mint",
				docs: [
					"position_nft_mint"
				],
				writable: true
			},
			{
				name: "position_nft_account",
				docs: [
					"The token account for nft"
				],
				writable: true
			},
			{
				name: "pool",
				writable: true,
				relations: [
					"position"
				]
			},
			{
				name: "position",
				writable: true
			},
			{
				name: "pool_authority",
				address: "HLnpSz9h2S4hiLQ43rnSD9XkcUThA7B8hQMKmDaiTLcC"
			},
			{
				name: "rent_receiver",
				writable: true
			},
			{
				name: "owner",
				docs: [
					"Owner of position"
				],
				signer: true
			},
			{
				name: "token_program",
				docs: [
					"Program to create NFT mint/token account and transfer for token22 account"
				],
				address: "TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb"
			},
			{
				name: "event_authority",
				pda: {
					seeds: [
						{
							kind: "const",
							value: [
								95,
								95,
								101,
								118,
								101,
								110,
								116,
								95,
								97,
								117,
								116,
								104,
								111,
								114,
								105,
								116,
								121
							]
						}
					]
				}
			},
			{
				name: "program"
			}
		],
		args: [
		]
	},
	{
		name: "close_token_badge",
		discriminator: [
			108,
			146,
			86,
			110,
			179,
			254,
			10,
			104
		],
		accounts: [
			{
				name: "token_badge",
				writable: true
			},
			{
				name: "admin",
				writable: true,
				signer: true
			},
			{
				name: "rent_receiver",
				writable: true
			},
			{
				name: "event_authority",
				pda: {
					seeds: [
						{
							kind: "const",
							value: [
								95,
								95,
								101,
								118,
								101,
								110,
								116,
								95,
								97,
								117,
								116,
								104,
								111,
								114,
								105,
								116,
								121
							]
						}
					]
				}
			},
			{
				name: "program"
			}
		],
		args: [
		]
	},
	{
		name: "create_claim_fee_operator",
		discriminator: [
			169,
			62,
			207,
			107,
			58,
			187,
			162,
			109
		],
		accounts: [
			{
				name: "claim_fee_operator",
				writable: true,
				pda: {
					seeds: [
						{
							kind: "const",
							value: [
								99,
								102,
								95,
								111,
								112,
								101,
								114,
								97,
								116,
								111,
								114
							]
						},
						{
							kind: "account",
							path: "operator"
						}
					]
				}
			},
			{
				name: "operator"
			},
			{
				name: "admin",
				writable: true,
				signer: true
			},
			{
				name: "system_program",
				address: "11111111111111111111111111111111"
			},
			{
				name: "event_authority",
				pda: {
					seeds: [
						{
							kind: "const",
							value: [
								95,
								95,
								101,
								118,
								101,
								110,
								116,
								95,
								97,
								117,
								116,
								104,
								111,
								114,
								105,
								116,
								121
							]
						}
					]
				}
			},
			{
				name: "program"
			}
		],
		args: [
		]
	},
	{
		name: "create_config",
		docs: [
			"ADMIN FUNCTIONS /////"
		],
		discriminator: [
			201,
			207,
			243,
			114,
			75,
			111,
			47,
			189
		],
		accounts: [
			{
				name: "config",
				writable: true,
				pda: {
					seeds: [
						{
							kind: "const",
							value: [
								99,
								111,
								110,
								102,
								105,
								103
							]
						},
						{
							kind: "arg",
							path: "index"
						}
					]
				}
			},
			{
				name: "admin",
				writable: true,
				signer: true
			},
			{
				name: "system_program",
				address: "11111111111111111111111111111111"
			},
			{
				name: "event_authority",
				pda: {
					seeds: [
						{
							kind: "const",
							value: [
								95,
								95,
								101,
								118,
								101,
								110,
								116,
								95,
								97,
								117,
								116,
								104,
								111,
								114,
								105,
								116,
								121
							]
						}
					]
				}
			},
			{
				name: "program"
			}
		],
		args: [
			{
				name: "index",
				type: "u64"
			},
			{
				name: "config_parameters",
				type: {
					defined: {
						name: "StaticConfigParameters"
					}
				}
			}
		]
	},
	{
		name: "create_dynamic_config",
		discriminator: [
			81,
			251,
			122,
			78,
			66,
			57,
			208,
			82
		],
		accounts: [
			{
				name: "config",
				writable: true,
				pda: {
					seeds: [
						{
							kind: "const",
							value: [
								99,
								111,
								110,
								102,
								105,
								103
							]
						},
						{
							kind: "arg",
							path: "index"
						}
					]
				}
			},
			{
				name: "admin",
				writable: true,
				signer: true
			},
			{
				name: "system_program",
				address: "11111111111111111111111111111111"
			},
			{
				name: "event_authority",
				pda: {
					seeds: [
						{
							kind: "const",
							value: [
								95,
								95,
								101,
								118,
								101,
								110,
								116,
								95,
								97,
								117,
								116,
								104,
								111,
								114,
								105,
								116,
								121
							]
						}
					]
				}
			},
			{
				name: "program"
			}
		],
		args: [
			{
				name: "index",
				type: "u64"
			},
			{
				name: "config_parameters",
				type: {
					defined: {
						name: "DynamicConfigParameters"
					}
				}
			}
		]
	},
	{
		name: "create_position",
		discriminator: [
			48,
			215,
			197,
			153,
			96,
			203,
			180,
			133
		],
		accounts: [
			{
				name: "owner"
			},
			{
				name: "position_nft_mint",
				docs: [
					"position_nft_mint"
				],
				writable: true,
				signer: true
			},
			{
				name: "position_nft_account",
				docs: [
					"position nft account"
				],
				writable: true,
				pda: {
					seeds: [
						{
							kind: "const",
							value: [
								112,
								111,
								115,
								105,
								116,
								105,
								111,
								110,
								95,
								110,
								102,
								116,
								95,
								97,
								99,
								99,
								111,
								117,
								110,
								116
							]
						},
						{
							kind: "account",
							path: "position_nft_mint"
						}
					]
				}
			},
			{
				name: "pool",
				writable: true
			},
			{
				name: "position",
				writable: true,
				pda: {
					seeds: [
						{
							kind: "const",
							value: [
								112,
								111,
								115,
								105,
								116,
								105,
								111,
								110
							]
						},
						{
							kind: "account",
							path: "position_nft_mint"
						}
					]
				}
			},
			{
				name: "pool_authority",
				address: "HLnpSz9h2S4hiLQ43rnSD9XkcUThA7B8hQMKmDaiTLcC"
			},
			{
				name: "payer",
				docs: [
					"Address paying to create the position. Can be anyone"
				],
				writable: true,
				signer: true
			},
			{
				name: "token_program",
				docs: [
					"Program to create NFT mint/token account and transfer for token22 account"
				],
				address: "TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb"
			},
			{
				name: "system_program",
				address: "11111111111111111111111111111111"
			},
			{
				name: "event_authority",
				pda: {
					seeds: [
						{
							kind: "const",
							value: [
								95,
								95,
								101,
								118,
								101,
								110,
								116,
								95,
								97,
								117,
								116,
								104,
								111,
								114,
								105,
								116,
								121
							]
						}
					]
				}
			},
			{
				name: "program"
			}
		],
		args: [
		]
	},
	{
		name: "create_token_badge",
		discriminator: [
			88,
			206,
			0,
			91,
			60,
			175,
			151,
			118
		],
		accounts: [
			{
				name: "token_badge",
				writable: true,
				pda: {
					seeds: [
						{
							kind: "const",
							value: [
								116,
								111,
								107,
								101,
								110,
								95,
								98,
								97,
								100,
								103,
								101
							]
						},
						{
							kind: "account",
							path: "token_mint"
						}
					]
				}
			},
			{
				name: "token_mint"
			},
			{
				name: "admin",
				writable: true,
				signer: true
			},
			{
				name: "system_program",
				address: "11111111111111111111111111111111"
			},
			{
				name: "event_authority",
				pda: {
					seeds: [
						{
							kind: "const",
							value: [
								95,
								95,
								101,
								118,
								101,
								110,
								116,
								95,
								97,
								117,
								116,
								104,
								111,
								114,
								105,
								116,
								121
							]
						}
					]
				}
			},
			{
				name: "program"
			}
		],
		args: [
		]
	},
	{
		name: "fund_reward",
		discriminator: [
			188,
			50,
			249,
			165,
			93,
			151,
			38,
			63
		],
		accounts: [
			{
				name: "pool",
				writable: true
			},
			{
				name: "reward_vault",
				writable: true
			},
			{
				name: "reward_mint"
			},
			{
				name: "funder_token_account",
				writable: true
			},
			{
				name: "funder",
				signer: true
			},
			{
				name: "token_program"
			},
			{
				name: "event_authority",
				pda: {
					seeds: [
						{
							kind: "const",
							value: [
								95,
								95,
								101,
								118,
								101,
								110,
								116,
								95,
								97,
								117,
								116,
								104,
								111,
								114,
								105,
								116,
								121
							]
						}
					]
				}
			},
			{
				name: "program"
			}
		],
		args: [
			{
				name: "reward_index",
				type: "u8"
			},
			{
				name: "amount",
				type: "u64"
			},
			{
				name: "carry_forward",
				type: "bool"
			}
		]
	},
	{
		name: "initialize_customizable_pool",
		discriminator: [
			20,
			161,
			241,
			24,
			189,
			221,
			180,
			2
		],
		accounts: [
			{
				name: "creator"
			},
			{
				name: "position_nft_mint",
				docs: [
					"position_nft_mint"
				],
				writable: true,
				signer: true
			},
			{
				name: "position_nft_account",
				docs: [
					"position nft account"
				],
				writable: true,
				pda: {
					seeds: [
						{
							kind: "const",
							value: [
								112,
								111,
								115,
								105,
								116,
								105,
								111,
								110,
								95,
								110,
								102,
								116,
								95,
								97,
								99,
								99,
								111,
								117,
								110,
								116
							]
						},
						{
							kind: "account",
							path: "position_nft_mint"
						}
					]
				}
			},
			{
				name: "payer",
				docs: [
					"Address paying to create the pool. Can be anyone"
				],
				writable: true,
				signer: true
			},
			{
				name: "pool_authority",
				address: "HLnpSz9h2S4hiLQ43rnSD9XkcUThA7B8hQMKmDaiTLcC"
			},
			{
				name: "pool",
				docs: [
					"Initialize an account to store the pool state"
				],
				writable: true
			},
			{
				name: "position",
				writable: true,
				pda: {
					seeds: [
						{
							kind: "const",
							value: [
								112,
								111,
								115,
								105,
								116,
								105,
								111,
								110
							]
						},
						{
							kind: "account",
							path: "position_nft_mint"
						}
					]
				}
			},
			{
				name: "token_a_mint",
				docs: [
					"Token a mint"
				]
			},
			{
				name: "token_b_mint",
				docs: [
					"Token b mint"
				]
			},
			{
				name: "token_a_vault",
				docs: [
					"Token a vault for the pool"
				],
				writable: true,
				pda: {
					seeds: [
						{
							kind: "const",
							value: [
								116,
								111,
								107,
								101,
								110,
								95,
								118,
								97,
								117,
								108,
								116
							]
						},
						{
							kind: "account",
							path: "token_a_mint"
						},
						{
							kind: "account",
							path: "pool"
						}
					]
				}
			},
			{
				name: "token_b_vault",
				docs: [
					"Token b vault for the pool"
				],
				writable: true,
				pda: {
					seeds: [
						{
							kind: "const",
							value: [
								116,
								111,
								107,
								101,
								110,
								95,
								118,
								97,
								117,
								108,
								116
							]
						},
						{
							kind: "account",
							path: "token_b_mint"
						},
						{
							kind: "account",
							path: "pool"
						}
					]
				}
			},
			{
				name: "payer_token_a",
				docs: [
					"payer token a account"
				],
				writable: true
			},
			{
				name: "payer_token_b",
				docs: [
					"creator token b account"
				],
				writable: true
			},
			{
				name: "token_a_program",
				docs: [
					"Program to create mint account and mint tokens"
				]
			},
			{
				name: "token_b_program",
				docs: [
					"Program to create mint account and mint tokens"
				]
			},
			{
				name: "token_2022_program",
				docs: [
					"Program to create NFT mint/token account and transfer for token22 account"
				],
				address: "TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb"
			},
			{
				name: "system_program",
				address: "11111111111111111111111111111111"
			},
			{
				name: "event_authority",
				pda: {
					seeds: [
						{
							kind: "const",
							value: [
								95,
								95,
								101,
								118,
								101,
								110,
								116,
								95,
								97,
								117,
								116,
								104,
								111,
								114,
								105,
								116,
								121
							]
						}
					]
				}
			},
			{
				name: "program"
			}
		],
		args: [
			{
				name: "params",
				type: {
					defined: {
						name: "InitializeCustomizablePoolParameters"
					}
				}
			}
		]
	},
	{
		name: "initialize_pool",
		docs: [
			"USER FUNCTIONS ////"
		],
		discriminator: [
			95,
			180,
			10,
			172,
			84,
			174,
			232,
			40
		],
		accounts: [
			{
				name: "creator"
			},
			{
				name: "position_nft_mint",
				docs: [
					"position_nft_mint"
				],
				writable: true,
				signer: true
			},
			{
				name: "position_nft_account",
				docs: [
					"position nft account"
				],
				writable: true,
				pda: {
					seeds: [
						{
							kind: "const",
							value: [
								112,
								111,
								115,
								105,
								116,
								105,
								111,
								110,
								95,
								110,
								102,
								116,
								95,
								97,
								99,
								99,
								111,
								117,
								110,
								116
							]
						},
						{
							kind: "account",
							path: "position_nft_mint"
						}
					]
				}
			},
			{
				name: "payer",
				docs: [
					"Address paying to create the pool. Can be anyone"
				],
				writable: true,
				signer: true
			},
			{
				name: "config",
				docs: [
					"Which config the pool belongs to."
				]
			},
			{
				name: "pool_authority",
				address: "HLnpSz9h2S4hiLQ43rnSD9XkcUThA7B8hQMKmDaiTLcC"
			},
			{
				name: "pool",
				docs: [
					"Initialize an account to store the pool state"
				],
				writable: true
			},
			{
				name: "position",
				writable: true,
				pda: {
					seeds: [
						{
							kind: "const",
							value: [
								112,
								111,
								115,
								105,
								116,
								105,
								111,
								110
							]
						},
						{
							kind: "account",
							path: "position_nft_mint"
						}
					]
				}
			},
			{
				name: "token_a_mint",
				docs: [
					"Token a mint"
				]
			},
			{
				name: "token_b_mint",
				docs: [
					"Token b mint"
				]
			},
			{
				name: "token_a_vault",
				docs: [
					"Token a vault for the pool"
				],
				writable: true,
				pda: {
					seeds: [
						{
							kind: "const",
							value: [
								116,
								111,
								107,
								101,
								110,
								95,
								118,
								97,
								117,
								108,
								116
							]
						},
						{
							kind: "account",
							path: "token_a_mint"
						},
						{
							kind: "account",
							path: "pool"
						}
					]
				}
			},
			{
				name: "token_b_vault",
				docs: [
					"Token b vault for the pool"
				],
				writable: true,
				pda: {
					seeds: [
						{
							kind: "const",
							value: [
								116,
								111,
								107,
								101,
								110,
								95,
								118,
								97,
								117,
								108,
								116
							]
						},
						{
							kind: "account",
							path: "token_b_mint"
						},
						{
							kind: "account",
							path: "pool"
						}
					]
				}
			},
			{
				name: "payer_token_a",
				docs: [
					"payer token a account"
				],
				writable: true
			},
			{
				name: "payer_token_b",
				docs: [
					"creator token b account"
				],
				writable: true
			},
			{
				name: "token_a_program",
				docs: [
					"Program to create mint account and mint tokens"
				]
			},
			{
				name: "token_b_program",
				docs: [
					"Program to create mint account and mint tokens"
				]
			},
			{
				name: "token_2022_program",
				docs: [
					"Program to create NFT mint/token account and transfer for token22 account"
				],
				address: "TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb"
			},
			{
				name: "system_program",
				address: "11111111111111111111111111111111"
			},
			{
				name: "event_authority",
				pda: {
					seeds: [
						{
							kind: "const",
							value: [
								95,
								95,
								101,
								118,
								101,
								110,
								116,
								95,
								97,
								117,
								116,
								104,
								111,
								114,
								105,
								116,
								121
							]
						}
					]
				}
			},
			{
				name: "program"
			}
		],
		args: [
			{
				name: "params",
				type: {
					defined: {
						name: "InitializePoolParameters"
					}
				}
			}
		]
	},
	{
		name: "initialize_pool_with_dynamic_config",
		discriminator: [
			149,
			82,
			72,
			197,
			253,
			252,
			68,
			15
		],
		accounts: [
			{
				name: "creator"
			},
			{
				name: "position_nft_mint",
				docs: [
					"position_nft_mint"
				],
				writable: true,
				signer: true
			},
			{
				name: "position_nft_account",
				docs: [
					"position nft account"
				],
				writable: true,
				pda: {
					seeds: [
						{
							kind: "const",
							value: [
								112,
								111,
								115,
								105,
								116,
								105,
								111,
								110,
								95,
								110,
								102,
								116,
								95,
								97,
								99,
								99,
								111,
								117,
								110,
								116
							]
						},
						{
							kind: "account",
							path: "position_nft_mint"
						}
					]
				}
			},
			{
				name: "payer",
				docs: [
					"Address paying to create the pool. Can be anyone"
				],
				writable: true,
				signer: true
			},
			{
				name: "pool_creator_authority",
				signer: true,
				relations: [
					"config"
				]
			},
			{
				name: "config",
				docs: [
					"Which config the pool belongs to."
				]
			},
			{
				name: "pool_authority",
				address: "HLnpSz9h2S4hiLQ43rnSD9XkcUThA7B8hQMKmDaiTLcC"
			},
			{
				name: "pool",
				docs: [
					"Initialize an account to store the pool state"
				],
				writable: true
			},
			{
				name: "position",
				writable: true,
				pda: {
					seeds: [
						{
							kind: "const",
							value: [
								112,
								111,
								115,
								105,
								116,
								105,
								111,
								110
							]
						},
						{
							kind: "account",
							path: "position_nft_mint"
						}
					]
				}
			},
			{
				name: "token_a_mint",
				docs: [
					"Token a mint"
				]
			},
			{
				name: "token_b_mint",
				docs: [
					"Token b mint"
				]
			},
			{
				name: "token_a_vault",
				docs: [
					"Token a vault for the pool"
				],
				writable: true,
				pda: {
					seeds: [
						{
							kind: "const",
							value: [
								116,
								111,
								107,
								101,
								110,
								95,
								118,
								97,
								117,
								108,
								116
							]
						},
						{
							kind: "account",
							path: "token_a_mint"
						},
						{
							kind: "account",
							path: "pool"
						}
					]
				}
			},
			{
				name: "token_b_vault",
				docs: [
					"Token b vault for the pool"
				],
				writable: true,
				pda: {
					seeds: [
						{
							kind: "const",
							value: [
								116,
								111,
								107,
								101,
								110,
								95,
								118,
								97,
								117,
								108,
								116
							]
						},
						{
							kind: "account",
							path: "token_b_mint"
						},
						{
							kind: "account",
							path: "pool"
						}
					]
				}
			},
			{
				name: "payer_token_a",
				docs: [
					"payer token a account"
				],
				writable: true
			},
			{
				name: "payer_token_b",
				docs: [
					"creator token b account"
				],
				writable: true
			},
			{
				name: "token_a_program",
				docs: [
					"Program to create mint account and mint tokens"
				]
			},
			{
				name: "token_b_program",
				docs: [
					"Program to create mint account and mint tokens"
				]
			},
			{
				name: "token_2022_program",
				docs: [
					"Program to create NFT mint/token account and transfer for token22 account"
				],
				address: "TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb"
			},
			{
				name: "system_program",
				address: "11111111111111111111111111111111"
			},
			{
				name: "event_authority",
				pda: {
					seeds: [
						{
							kind: "const",
							value: [
								95,
								95,
								101,
								118,
								101,
								110,
								116,
								95,
								97,
								117,
								116,
								104,
								111,
								114,
								105,
								116,
								121
							]
						}
					]
				}
			},
			{
				name: "program"
			}
		],
		args: [
			{
				name: "params",
				type: {
					defined: {
						name: "InitializeCustomizablePoolParameters"
					}
				}
			}
		]
	},
	{
		name: "initialize_reward",
		discriminator: [
			95,
			135,
			192,
			196,
			242,
			129,
			230,
			68
		],
		accounts: [
			{
				name: "pool_authority",
				address: "HLnpSz9h2S4hiLQ43rnSD9XkcUThA7B8hQMKmDaiTLcC"
			},
			{
				name: "pool",
				writable: true
			},
			{
				name: "reward_vault",
				writable: true,
				pda: {
					seeds: [
						{
							kind: "const",
							value: [
								114,
								101,
								119,
								97,
								114,
								100,
								95,
								118,
								97,
								117,
								108,
								116
							]
						},
						{
							kind: "account",
							path: "pool"
						},
						{
							kind: "arg",
							path: "reward_index"
						}
					]
				}
			},
			{
				name: "reward_mint"
			},
			{
				name: "signer",
				signer: true
			},
			{
				name: "payer",
				writable: true,
				signer: true
			},
			{
				name: "token_program"
			},
			{
				name: "system_program",
				address: "11111111111111111111111111111111"
			},
			{
				name: "event_authority",
				pda: {
					seeds: [
						{
							kind: "const",
							value: [
								95,
								95,
								101,
								118,
								101,
								110,
								116,
								95,
								97,
								117,
								116,
								104,
								111,
								114,
								105,
								116,
								121
							]
						}
					]
				}
			},
			{
				name: "program"
			}
		],
		args: [
			{
				name: "reward_index",
				type: "u8"
			},
			{
				name: "reward_duration",
				type: "u64"
			},
			{
				name: "funder",
				type: "pubkey"
			}
		]
	},
	{
		name: "lock_position",
		discriminator: [
			227,
			62,
			2,
			252,
			247,
			10,
			171,
			185
		],
		accounts: [
			{
				name: "pool",
				relations: [
					"position"
				]
			},
			{
				name: "position",
				writable: true
			},
			{
				name: "vesting",
				writable: true,
				signer: true
			},
			{
				name: "position_nft_account",
				docs: [
					"The token account for nft"
				]
			},
			{
				name: "owner",
				docs: [
					"owner of position"
				],
				signer: true
			},
			{
				name: "payer",
				writable: true,
				signer: true
			},
			{
				name: "system_program",
				address: "11111111111111111111111111111111"
			},
			{
				name: "event_authority",
				pda: {
					seeds: [
						{
							kind: "const",
							value: [
								95,
								95,
								101,
								118,
								101,
								110,
								116,
								95,
								97,
								117,
								116,
								104,
								111,
								114,
								105,
								116,
								121
							]
						}
					]
				}
			},
			{
				name: "program"
			}
		],
		args: [
			{
				name: "params",
				type: {
					defined: {
						name: "VestingParameters"
					}
				}
			}
		]
	},
	{
		name: "permanent_lock_position",
		discriminator: [
			165,
			176,
			125,
			6,
			231,
			171,
			186,
			213
		],
		accounts: [
			{
				name: "pool",
				writable: true,
				relations: [
					"position"
				]
			},
			{
				name: "position",
				writable: true
			},
			{
				name: "position_nft_account",
				docs: [
					"The token account for nft"
				]
			},
			{
				name: "owner",
				docs: [
					"owner of position"
				],
				signer: true
			},
			{
				name: "event_authority",
				pda: {
					seeds: [
						{
							kind: "const",
							value: [
								95,
								95,
								101,
								118,
								101,
								110,
								116,
								95,
								97,
								117,
								116,
								104,
								111,
								114,
								105,
								116,
								121
							]
						}
					]
				}
			},
			{
				name: "program"
			}
		],
		args: [
			{
				name: "permanent_lock_liquidity",
				type: "u128"
			}
		]
	},
	{
		name: "refresh_vesting",
		discriminator: [
			9,
			94,
			216,
			14,
			116,
			204,
			247,
			0
		],
		accounts: [
			{
				name: "pool",
				relations: [
					"position"
				]
			},
			{
				name: "position",
				writable: true
			},
			{
				name: "position_nft_account",
				docs: [
					"The token account for nft"
				]
			},
			{
				name: "owner"
			}
		],
		args: [
		]
	},
	{
		name: "remove_all_liquidity",
		discriminator: [
			10,
			51,
			61,
			35,
			112,
			105,
			24,
			85
		],
		accounts: [
			{
				name: "pool_authority",
				address: "HLnpSz9h2S4hiLQ43rnSD9XkcUThA7B8hQMKmDaiTLcC"
			},
			{
				name: "pool",
				writable: true,
				relations: [
					"position"
				]
			},
			{
				name: "position",
				writable: true
			},
			{
				name: "token_a_account",
				docs: [
					"The user token a account"
				],
				writable: true
			},
			{
				name: "token_b_account",
				docs: [
					"The user token b account"
				],
				writable: true
			},
			{
				name: "token_a_vault",
				docs: [
					"The vault token account for input token"
				],
				writable: true,
				relations: [
					"pool"
				]
			},
			{
				name: "token_b_vault",
				docs: [
					"The vault token account for output token"
				],
				writable: true,
				relations: [
					"pool"
				]
			},
			{
				name: "token_a_mint",
				docs: [
					"The mint of token a"
				],
				relations: [
					"pool"
				]
			},
			{
				name: "token_b_mint",
				docs: [
					"The mint of token b"
				],
				relations: [
					"pool"
				]
			},
			{
				name: "position_nft_account",
				docs: [
					"The token account for nft"
				]
			},
			{
				name: "owner",
				docs: [
					"owner of position"
				],
				signer: true
			},
			{
				name: "token_a_program",
				docs: [
					"Token a program"
				]
			},
			{
				name: "token_b_program",
				docs: [
					"Token b program"
				]
			},
			{
				name: "event_authority",
				pda: {
					seeds: [
						{
							kind: "const",
							value: [
								95,
								95,
								101,
								118,
								101,
								110,
								116,
								95,
								97,
								117,
								116,
								104,
								111,
								114,
								105,
								116,
								121
							]
						}
					]
				}
			},
			{
				name: "program"
			}
		],
		args: [
			{
				name: "token_a_amount_threshold",
				type: "u64"
			},
			{
				name: "token_b_amount_threshold",
				type: "u64"
			}
		]
	},
	{
		name: "remove_liquidity",
		discriminator: [
			80,
			85,
			209,
			72,
			24,
			206,
			177,
			108
		],
		accounts: [
			{
				name: "pool_authority",
				address: "HLnpSz9h2S4hiLQ43rnSD9XkcUThA7B8hQMKmDaiTLcC"
			},
			{
				name: "pool",
				writable: true,
				relations: [
					"position"
				]
			},
			{
				name: "position",
				writable: true
			},
			{
				name: "token_a_account",
				docs: [
					"The user token a account"
				],
				writable: true
			},
			{
				name: "token_b_account",
				docs: [
					"The user token b account"
				],
				writable: true
			},
			{
				name: "token_a_vault",
				docs: [
					"The vault token account for input token"
				],
				writable: true,
				relations: [
					"pool"
				]
			},
			{
				name: "token_b_vault",
				docs: [
					"The vault token account for output token"
				],
				writable: true,
				relations: [
					"pool"
				]
			},
			{
				name: "token_a_mint",
				docs: [
					"The mint of token a"
				],
				relations: [
					"pool"
				]
			},
			{
				name: "token_b_mint",
				docs: [
					"The mint of token b"
				],
				relations: [
					"pool"
				]
			},
			{
				name: "position_nft_account",
				docs: [
					"The token account for nft"
				]
			},
			{
				name: "owner",
				docs: [
					"owner of position"
				],
				signer: true
			},
			{
				name: "token_a_program",
				docs: [
					"Token a program"
				]
			},
			{
				name: "token_b_program",
				docs: [
					"Token b program"
				]
			},
			{
				name: "event_authority",
				pda: {
					seeds: [
						{
							kind: "const",
							value: [
								95,
								95,
								101,
								118,
								101,
								110,
								116,
								95,
								97,
								117,
								116,
								104,
								111,
								114,
								105,
								116,
								121
							]
						}
					]
				}
			},
			{
				name: "program"
			}
		],
		args: [
			{
				name: "params",
				type: {
					defined: {
						name: "RemoveLiquidityParameters"
					}
				}
			}
		]
	},
	{
		name: "set_pool_status",
		discriminator: [
			112,
			87,
			135,
			223,
			83,
			204,
			132,
			53
		],
		accounts: [
			{
				name: "pool",
				writable: true
			},
			{
				name: "admin",
				signer: true
			},
			{
				name: "event_authority",
				pda: {
					seeds: [
						{
							kind: "const",
							value: [
								95,
								95,
								101,
								118,
								101,
								110,
								116,
								95,
								97,
								117,
								116,
								104,
								111,
								114,
								105,
								116,
								121
							]
						}
					]
				}
			},
			{
				name: "program"
			}
		],
		args: [
			{
				name: "status",
				type: "u8"
			}
		]
	},
	{
		name: "split_position",
		discriminator: [
			172,
			241,
			221,
			138,
			161,
			29,
			253,
			42
		],
		accounts: [
			{
				name: "pool",
				writable: true,
				relations: [
					"first_position",
					"second_position"
				]
			},
			{
				name: "first_position",
				docs: [
					"The first position"
				],
				writable: true
			},
			{
				name: "first_position_nft_account",
				docs: [
					"The token account for position nft"
				]
			},
			{
				name: "second_position",
				docs: [
					"The second position"
				],
				writable: true
			},
			{
				name: "second_position_nft_account",
				docs: [
					"The token account for position nft"
				]
			},
			{
				name: "first_owner",
				docs: [
					"Owner of first position"
				],
				signer: true
			},
			{
				name: "second_owner",
				docs: [
					"Owner of second position"
				],
				signer: true
			},
			{
				name: "event_authority",
				pda: {
					seeds: [
						{
							kind: "const",
							value: [
								95,
								95,
								101,
								118,
								101,
								110,
								116,
								95,
								97,
								117,
								116,
								104,
								111,
								114,
								105,
								116,
								121
							]
						}
					]
				}
			},
			{
				name: "program"
			}
		],
		args: [
			{
				name: "params",
				type: {
					defined: {
						name: "SplitPositionParameters"
					}
				}
			}
		]
	},
	{
		name: "swap",
		discriminator: [
			248,
			198,
			158,
			145,
			225,
			117,
			135,
			200
		],
		accounts: [
			{
				name: "pool_authority",
				address: "HLnpSz9h2S4hiLQ43rnSD9XkcUThA7B8hQMKmDaiTLcC"
			},
			{
				name: "pool",
				docs: [
					"Pool account"
				],
				writable: true
			},
			{
				name: "input_token_account",
				docs: [
					"The user token account for input token"
				],
				writable: true
			},
			{
				name: "output_token_account",
				docs: [
					"The user token account for output token"
				],
				writable: true
			},
			{
				name: "token_a_vault",
				docs: [
					"The vault token account for input token"
				],
				writable: true,
				relations: [
					"pool"
				]
			},
			{
				name: "token_b_vault",
				docs: [
					"The vault token account for output token"
				],
				writable: true,
				relations: [
					"pool"
				]
			},
			{
				name: "token_a_mint",
				docs: [
					"The mint of token a"
				]
			},
			{
				name: "token_b_mint",
				docs: [
					"The mint of token b"
				]
			},
			{
				name: "payer",
				docs: [
					"The user performing the swap"
				],
				signer: true
			},
			{
				name: "token_a_program",
				docs: [
					"Token a program"
				]
			},
			{
				name: "token_b_program",
				docs: [
					"Token b program"
				]
			},
			{
				name: "referral_token_account",
				docs: [
					"referral token account"
				],
				writable: true,
				optional: true
			},
			{
				name: "event_authority",
				pda: {
					seeds: [
						{
							kind: "const",
							value: [
								95,
								95,
								101,
								118,
								101,
								110,
								116,
								95,
								97,
								117,
								116,
								104,
								111,
								114,
								105,
								116,
								121
							]
						}
					]
				}
			},
			{
				name: "program"
			}
		],
		args: [
			{
				name: "params",
				type: {
					defined: {
						name: "SwapParameters"
					}
				}
			}
		]
	},
	{
		name: "update_reward_duration",
		discriminator: [
			138,
			174,
			196,
			169,
			213,
			235,
			254,
			107
		],
		accounts: [
			{
				name: "pool",
				writable: true
			},
			{
				name: "signer",
				signer: true
			},
			{
				name: "event_authority",
				pda: {
					seeds: [
						{
							kind: "const",
							value: [
								95,
								95,
								101,
								118,
								101,
								110,
								116,
								95,
								97,
								117,
								116,
								104,
								111,
								114,
								105,
								116,
								121
							]
						}
					]
				}
			},
			{
				name: "program"
			}
		],
		args: [
			{
				name: "reward_index",
				type: "u8"
			},
			{
				name: "new_duration",
				type: "u64"
			}
		]
	},
	{
		name: "update_reward_funder",
		discriminator: [
			211,
			28,
			48,
			32,
			215,
			160,
			35,
			23
		],
		accounts: [
			{
				name: "pool",
				writable: true
			},
			{
				name: "signer",
				signer: true
			},
			{
				name: "event_authority",
				pda: {
					seeds: [
						{
							kind: "const",
							value: [
								95,
								95,
								101,
								118,
								101,
								110,
								116,
								95,
								97,
								117,
								116,
								104,
								111,
								114,
								105,
								116,
								121
							]
						}
					]
				}
			},
			{
				name: "program"
			}
		],
		args: [
			{
				name: "reward_index",
				type: "u8"
			},
			{
				name: "new_funder",
				type: "pubkey"
			}
		]
	},
	{
		name: "withdraw_ineligible_reward",
		discriminator: [
			148,
			206,
			42,
			195,
			247,
			49,
			103,
			8
		],
		accounts: [
			{
				name: "pool_authority",
				address: "HLnpSz9h2S4hiLQ43rnSD9XkcUThA7B8hQMKmDaiTLcC"
			},
			{
				name: "pool",
				writable: true
			},
			{
				name: "reward_vault",
				writable: true
			},
			{
				name: "reward_mint"
			},
			{
				name: "funder_token_account",
				writable: true
			},
			{
				name: "funder",
				signer: true
			},
			{
				name: "token_program"
			},
			{
				name: "event_authority",
				pda: {
					seeds: [
						{
							kind: "const",
							value: [
								95,
								95,
								101,
								118,
								101,
								110,
								116,
								95,
								97,
								117,
								116,
								104,
								111,
								114,
								105,
								116,
								121
							]
						}
					]
				}
			},
			{
				name: "program"
			}
		],
		args: [
			{
				name: "reward_index",
				type: "u8"
			}
		]
	}
];
var accounts = [
	{
		name: "ClaimFeeOperator",
		discriminator: [
			166,
			48,
			134,
			86,
			34,
			200,
			188,
			150
		]
	},
	{
		name: "Config",
		discriminator: [
			155,
			12,
			170,
			224,
			30,
			250,
			204,
			130
		]
	},
	{
		name: "Pool",
		discriminator: [
			241,
			154,
			109,
			4,
			17,
			177,
			109,
			188
		]
	},
	{
		name: "Position",
		discriminator: [
			170,
			188,
			143,
			228,
			122,
			64,
			247,
			208
		]
	},
	{
		name: "TokenBadge",
		discriminator: [
			116,
			219,
			204,
			229,
			249,
			116,
			255,
			150
		]
	},
	{
		name: "Vesting",
		discriminator: [
			100,
			149,
			66,
			138,
			95,
			200,
			128,
			241
		]
	}
];
var events = [
	{
		name: "EvtAddLiquidity",
		discriminator: [
			175,
			242,
			8,
			157,
			30,
			247,
			185,
			169
		]
	},
	{
		name: "EvtClaimPartnerFee",
		discriminator: [
			118,
			99,
			77,
			10,
			226,
			1,
			1,
			87
		]
	},
	{
		name: "EvtClaimPositionFee",
		discriminator: [
			198,
			182,
			183,
			52,
			97,
			12,
			49,
			56
		]
	},
	{
		name: "EvtClaimProtocolFee",
		discriminator: [
			186,
			244,
			75,
			251,
			188,
			13,
			25,
			33
		]
	},
	{
		name: "EvtClaimReward",
		discriminator: [
			218,
			86,
			147,
			200,
			235,
			188,
			215,
			231
		]
	},
	{
		name: "EvtCloseClaimFeeOperator",
		discriminator: [
			111,
			39,
			37,
			55,
			110,
			216,
			194,
			23
		]
	},
	{
		name: "EvtCloseConfig",
		discriminator: [
			36,
			30,
			239,
			45,
			58,
			132,
			14,
			5
		]
	},
	{
		name: "EvtClosePosition",
		discriminator: [
			20,
			145,
			144,
			68,
			143,
			142,
			214,
			178
		]
	},
	{
		name: "EvtCreateClaimFeeOperator",
		discriminator: [
			21,
			6,
			153,
			120,
			68,
			116,
			28,
			177
		]
	},
	{
		name: "EvtCreateConfig",
		discriminator: [
			131,
			207,
			180,
			174,
			180,
			73,
			165,
			54
		]
	},
	{
		name: "EvtCreateDynamicConfig",
		discriminator: [
			231,
			197,
			13,
			164,
			248,
			213,
			133,
			152
		]
	},
	{
		name: "EvtCreatePosition",
		discriminator: [
			156,
			15,
			119,
			198,
			29,
			181,
			221,
			55
		]
	},
	{
		name: "EvtCreateTokenBadge",
		discriminator: [
			141,
			120,
			134,
			116,
			34,
			28,
			114,
			160
		]
	},
	{
		name: "EvtFundReward",
		discriminator: [
			104,
			233,
			237,
			122,
			199,
			191,
			121,
			85
		]
	},
	{
		name: "EvtInitializePool",
		discriminator: [
			228,
			50,
			246,
			85,
			203,
			66,
			134,
			37
		]
	},
	{
		name: "EvtInitializeReward",
		discriminator: [
			129,
			91,
			188,
			3,
			246,
			52,
			185,
			249
		]
	},
	{
		name: "EvtLockPosition",
		discriminator: [
			168,
			63,
			108,
			83,
			219,
			82,
			2,
			200
		]
	},
	{
		name: "EvtPermanentLockPosition",
		discriminator: [
			145,
			143,
			162,
			218,
			218,
			80,
			67,
			11
		]
	},
	{
		name: "EvtRemoveLiquidity",
		discriminator: [
			87,
			46,
			88,
			98,
			175,
			96,
			34,
			91
		]
	},
	{
		name: "EvtSetPoolStatus",
		discriminator: [
			100,
			213,
			74,
			3,
			95,
			91,
			228,
			146
		]
	},
	{
		name: "EvtSplitPosition",
		discriminator: [
			182,
			138,
			42,
			254,
			27,
			94,
			82,
			221
		]
	},
	{
		name: "EvtSwap",
		discriminator: [
			27,
			60,
			21,
			213,
			138,
			170,
			187,
			147
		]
	},
	{
		name: "EvtUpdateRewardDuration",
		discriminator: [
			149,
			135,
			65,
			231,
			129,
			153,
			65,
			57
		]
	},
	{
		name: "EvtUpdateRewardFunder",
		discriminator: [
			76,
			154,
			208,
			13,
			40,
			115,
			246,
			146
		]
	},
	{
		name: "EvtWithdrawIneligibleReward",
		discriminator: [
			248,
			215,
			184,
			78,
			31,
			180,
			179,
			168
		]
	}
];
var errors = [
	{
		code: 6000,
		name: "MathOverflow",
		msg: "Math operation overflow"
	},
	{
		code: 6001,
		name: "InvalidFee",
		msg: "Invalid fee setup"
	},
	{
		code: 6002,
		name: "ExceededSlippage",
		msg: "Exceeded slippage tolerance"
	},
	{
		code: 6003,
		name: "PoolDisabled",
		msg: "Pool disabled"
	},
	{
		code: 6004,
		name: "ExceedMaxFeeBps",
		msg: "Exceeded max fee bps"
	},
	{
		code: 6005,
		name: "InvalidAdmin",
		msg: "Invalid admin"
	},
	{
		code: 6006,
		name: "AmountIsZero",
		msg: "Amount is zero"
	},
	{
		code: 6007,
		name: "TypeCastFailed",
		msg: "Type cast error"
	},
	{
		code: 6008,
		name: "UnableToModifyActivationPoint",
		msg: "Unable to modify activation point"
	},
	{
		code: 6009,
		name: "InvalidAuthorityToCreateThePool",
		msg: "Invalid authority to create the pool"
	},
	{
		code: 6010,
		name: "InvalidActivationType",
		msg: "Invalid activation type"
	},
	{
		code: 6011,
		name: "InvalidActivationPoint",
		msg: "Invalid activation point"
	},
	{
		code: 6012,
		name: "InvalidQuoteMint",
		msg: "Quote token must be SOL,USDC"
	},
	{
		code: 6013,
		name: "InvalidFeeCurve",
		msg: "Invalid fee curve"
	},
	{
		code: 6014,
		name: "InvalidPriceRange",
		msg: "Invalid Price Range"
	},
	{
		code: 6015,
		name: "PriceRangeViolation",
		msg: "Trade is over price range"
	},
	{
		code: 6016,
		name: "InvalidParameters",
		msg: "Invalid parameters"
	},
	{
		code: 6017,
		name: "InvalidCollectFeeMode",
		msg: "Invalid collect fee mode"
	},
	{
		code: 6018,
		name: "InvalidInput",
		msg: "Invalid input"
	},
	{
		code: 6019,
		name: "CannotCreateTokenBadgeOnSupportedMint",
		msg: "Cannot create token badge on supported mint"
	},
	{
		code: 6020,
		name: "InvalidTokenBadge",
		msg: "Invalid token badge"
	},
	{
		code: 6021,
		name: "InvalidMinimumLiquidity",
		msg: "Invalid minimum liquidity"
	},
	{
		code: 6022,
		name: "InvalidVestingInfo",
		msg: "Invalid vesting information"
	},
	{
		code: 6023,
		name: "InsufficientLiquidity",
		msg: "Insufficient liquidity"
	},
	{
		code: 6024,
		name: "InvalidVestingAccount",
		msg: "Invalid vesting account"
	},
	{
		code: 6025,
		name: "InvalidPoolStatus",
		msg: "Invalid pool status"
	},
	{
		code: 6026,
		name: "UnsupportNativeMintToken2022",
		msg: "Unsupported native mint token2022"
	},
	{
		code: 6027,
		name: "InvalidRewardIndex",
		msg: "Invalid reward index"
	},
	{
		code: 6028,
		name: "InvalidRewardDuration",
		msg: "Invalid reward duration"
	},
	{
		code: 6029,
		name: "RewardInitialized",
		msg: "Reward already initialized"
	},
	{
		code: 6030,
		name: "RewardUninitialized",
		msg: "Reward not initialized"
	},
	{
		code: 6031,
		name: "InvalidRewardVault",
		msg: "Invalid reward vault"
	},
	{
		code: 6032,
		name: "MustWithdrawnIneligibleReward",
		msg: "Must withdraw ineligible reward"
	},
	{
		code: 6033,
		name: "IdenticalRewardDuration",
		msg: "Reward duration is the same"
	},
	{
		code: 6034,
		name: "RewardCampaignInProgress",
		msg: "Reward campaign in progress"
	},
	{
		code: 6035,
		name: "IdenticalFunder",
		msg: "Identical funder"
	},
	{
		code: 6036,
		name: "InvalidFunder",
		msg: "Invalid funder"
	},
	{
		code: 6037,
		name: "RewardNotEnded",
		msg: "Reward not ended"
	},
	{
		code: 6038,
		name: "FeeInverseIsIncorrect",
		msg: "Fee inverse is incorrect"
	},
	{
		code: 6039,
		name: "PositionIsNotEmpty",
		msg: "Position is not empty"
	},
	{
		code: 6040,
		name: "InvalidPoolCreatorAuthority",
		msg: "Invalid pool creator authority"
	},
	{
		code: 6041,
		name: "InvalidConfigType",
		msg: "Invalid config type"
	},
	{
		code: 6042,
		name: "InvalidPoolCreator",
		msg: "Invalid pool creator"
	},
	{
		code: 6043,
		name: "RewardVaultFrozenSkipRequired",
		msg: "Reward vault is frozen, must skip reward to proceed"
	},
	{
		code: 6044,
		name: "InvalidSplitPositionParameters",
		msg: "Invalid parameters for split position"
	},
	{
		code: 6045,
		name: "UnsupportPositionHasVestingLock",
		msg: "Unsupported split position has vesting lock"
	},
	{
		code: 6046,
		name: "SamePosition",
		msg: "Same position"
	}
];
var types = [
	{
		name: "AddLiquidityParameters",
		type: {
			kind: "struct",
			fields: [
				{
					name: "liquidity_delta",
					docs: [
						"delta liquidity"
					],
					type: "u128"
				},
				{
					name: "token_a_amount_threshold",
					docs: [
						"maximum token a amount"
					],
					type: "u64"
				},
				{
					name: "token_b_amount_threshold",
					docs: [
						"maximum token b amount"
					],
					type: "u64"
				}
			]
		}
	},
	{
		name: "BaseFeeConfig",
		serialization: "bytemuck",
		repr: {
			kind: "c"
		},
		type: {
			kind: "struct",
			fields: [
				{
					name: "cliff_fee_numerator",
					type: "u64"
				},
				{
					name: "fee_scheduler_mode",
					type: "u8"
				},
				{
					name: "padding",
					type: {
						array: [
							"u8",
							5
						]
					}
				},
				{
					name: "number_of_period",
					type: "u16"
				},
				{
					name: "period_frequency",
					type: "u64"
				},
				{
					name: "reduction_factor",
					type: "u64"
				}
			]
		}
	},
	{
		name: "BaseFeeParameters",
		type: {
			kind: "struct",
			fields: [
				{
					name: "cliff_fee_numerator",
					type: "u64"
				},
				{
					name: "number_of_period",
					type: "u16"
				},
				{
					name: "period_frequency",
					type: "u64"
				},
				{
					name: "reduction_factor",
					type: "u64"
				},
				{
					name: "fee_scheduler_mode",
					type: "u8"
				}
			]
		}
	},
	{
		name: "BaseFeeStruct",
		serialization: "bytemuck",
		repr: {
			kind: "c"
		},
		type: {
			kind: "struct",
			fields: [
				{
					name: "cliff_fee_numerator",
					type: "u64"
				},
				{
					name: "fee_scheduler_mode",
					type: "u8"
				},
				{
					name: "padding_0",
					type: {
						array: [
							"u8",
							5
						]
					}
				},
				{
					name: "number_of_period",
					type: "u16"
				},
				{
					name: "period_frequency",
					type: "u64"
				},
				{
					name: "reduction_factor",
					type: "u64"
				},
				{
					name: "padding_1",
					type: "u64"
				}
			]
		}
	},
	{
		name: "ClaimFeeOperator",
		docs: [
			"Parameter that set by the protocol"
		],
		serialization: "bytemuck",
		repr: {
			kind: "c"
		},
		type: {
			kind: "struct",
			fields: [
				{
					name: "operator",
					docs: [
						"operator"
					],
					type: "pubkey"
				},
				{
					name: "_padding",
					docs: [
						"Reserve"
					],
					type: {
						array: [
							"u8",
							128
						]
					}
				}
			]
		}
	},
	{
		name: "Config",
		serialization: "bytemuck",
		repr: {
			kind: "c"
		},
		type: {
			kind: "struct",
			fields: [
				{
					name: "vault_config_key",
					docs: [
						"Vault config key"
					],
					type: "pubkey"
				},
				{
					name: "pool_creator_authority",
					docs: [
						"Only pool_creator_authority can use the current config to initialize new pool. When it's Pubkey::default, it's a public config."
					],
					type: "pubkey"
				},
				{
					name: "pool_fees",
					docs: [
						"Pool fee"
					],
					type: {
						defined: {
							name: "PoolFeesConfig"
						}
					}
				},
				{
					name: "activation_type",
					docs: [
						"Activation type"
					],
					type: "u8"
				},
				{
					name: "collect_fee_mode",
					docs: [
						"Collect fee mode"
					],
					type: "u8"
				},
				{
					name: "config_type",
					docs: [
						"Config type mode, 0 for static, 1 for dynamic"
					],
					type: "u8"
				},
				{
					name: "_padding_0",
					docs: [
						"padding 0"
					],
					type: {
						array: [
							"u8",
							5
						]
					}
				},
				{
					name: "index",
					docs: [
						"config index"
					],
					type: "u64"
				},
				{
					name: "sqrt_min_price",
					docs: [
						"sqrt min price"
					],
					type: "u128"
				},
				{
					name: "sqrt_max_price",
					docs: [
						"sqrt max price"
					],
					type: "u128"
				},
				{
					name: "_padding_1",
					docs: [
						"Fee curve point",
						"Padding for further use"
					],
					type: {
						array: [
							"u64",
							10
						]
					}
				}
			]
		}
	},
	{
		name: "DynamicConfigParameters",
		type: {
			kind: "struct",
			fields: [
				{
					name: "pool_creator_authority",
					type: "pubkey"
				}
			]
		}
	},
	{
		name: "DynamicFeeConfig",
		serialization: "bytemuck",
		repr: {
			kind: "c"
		},
		type: {
			kind: "struct",
			fields: [
				{
					name: "initialized",
					type: "u8"
				},
				{
					name: "padding",
					type: {
						array: [
							"u8",
							7
						]
					}
				},
				{
					name: "max_volatility_accumulator",
					type: "u32"
				},
				{
					name: "variable_fee_control",
					type: "u32"
				},
				{
					name: "bin_step",
					type: "u16"
				},
				{
					name: "filter_period",
					type: "u16"
				},
				{
					name: "decay_period",
					type: "u16"
				},
				{
					name: "reduction_factor",
					type: "u16"
				},
				{
					name: "padding_1",
					type: {
						array: [
							"u8",
							8
						]
					}
				},
				{
					name: "bin_step_u128",
					type: "u128"
				}
			]
		}
	},
	{
		name: "DynamicFeeParameters",
		type: {
			kind: "struct",
			fields: [
				{
					name: "bin_step",
					type: "u16"
				},
				{
					name: "bin_step_u128",
					type: "u128"
				},
				{
					name: "filter_period",
					type: "u16"
				},
				{
					name: "decay_period",
					type: "u16"
				},
				{
					name: "reduction_factor",
					type: "u16"
				},
				{
					name: "max_volatility_accumulator",
					type: "u32"
				},
				{
					name: "variable_fee_control",
					type: "u32"
				}
			]
		}
	},
	{
		name: "DynamicFeeStruct",
		serialization: "bytemuck",
		repr: {
			kind: "c"
		},
		type: {
			kind: "struct",
			fields: [
				{
					name: "initialized",
					type: "u8"
				},
				{
					name: "padding",
					type: {
						array: [
							"u8",
							7
						]
					}
				},
				{
					name: "max_volatility_accumulator",
					type: "u32"
				},
				{
					name: "variable_fee_control",
					type: "u32"
				},
				{
					name: "bin_step",
					type: "u16"
				},
				{
					name: "filter_period",
					type: "u16"
				},
				{
					name: "decay_period",
					type: "u16"
				},
				{
					name: "reduction_factor",
					type: "u16"
				},
				{
					name: "last_update_timestamp",
					type: "u64"
				},
				{
					name: "bin_step_u128",
					type: "u128"
				},
				{
					name: "sqrt_price_reference",
					type: "u128"
				},
				{
					name: "volatility_accumulator",
					type: "u128"
				},
				{
					name: "volatility_reference",
					type: "u128"
				}
			]
		}
	},
	{
		name: "EvtAddLiquidity",
		type: {
			kind: "struct",
			fields: [
				{
					name: "pool",
					type: "pubkey"
				},
				{
					name: "position",
					type: "pubkey"
				},
				{
					name: "owner",
					type: "pubkey"
				},
				{
					name: "params",
					type: {
						defined: {
							name: "AddLiquidityParameters"
						}
					}
				},
				{
					name: "token_a_amount",
					type: "u64"
				},
				{
					name: "token_b_amount",
					type: "u64"
				},
				{
					name: "total_amount_a",
					type: "u64"
				},
				{
					name: "total_amount_b",
					type: "u64"
				}
			]
		}
	},
	{
		name: "EvtClaimPartnerFee",
		type: {
			kind: "struct",
			fields: [
				{
					name: "pool",
					type: "pubkey"
				},
				{
					name: "token_a_amount",
					type: "u64"
				},
				{
					name: "token_b_amount",
					type: "u64"
				}
			]
		}
	},
	{
		name: "EvtClaimPositionFee",
		type: {
			kind: "struct",
			fields: [
				{
					name: "pool",
					type: "pubkey"
				},
				{
					name: "position",
					type: "pubkey"
				},
				{
					name: "owner",
					type: "pubkey"
				},
				{
					name: "fee_a_claimed",
					type: "u64"
				},
				{
					name: "fee_b_claimed",
					type: "u64"
				}
			]
		}
	},
	{
		name: "EvtClaimProtocolFee",
		type: {
			kind: "struct",
			fields: [
				{
					name: "pool",
					type: "pubkey"
				},
				{
					name: "token_a_amount",
					type: "u64"
				},
				{
					name: "token_b_amount",
					type: "u64"
				}
			]
		}
	},
	{
		name: "EvtClaimReward",
		type: {
			kind: "struct",
			fields: [
				{
					name: "pool",
					type: "pubkey"
				},
				{
					name: "position",
					type: "pubkey"
				},
				{
					name: "owner",
					type: "pubkey"
				},
				{
					name: "mint_reward",
					type: "pubkey"
				},
				{
					name: "reward_index",
					type: "u8"
				},
				{
					name: "total_reward",
					type: "u64"
				}
			]
		}
	},
	{
		name: "EvtCloseClaimFeeOperator",
		docs: [
			"Close claim fee operator"
		],
		type: {
			kind: "struct",
			fields: [
				{
					name: "claim_fee_operator",
					type: "pubkey"
				},
				{
					name: "operator",
					type: "pubkey"
				}
			]
		}
	},
	{
		name: "EvtCloseConfig",
		docs: [
			"Close config"
		],
		type: {
			kind: "struct",
			fields: [
				{
					name: "config",
					docs: [
						"Config pubkey"
					],
					type: "pubkey"
				},
				{
					name: "admin",
					docs: [
						"admin pk"
					],
					type: "pubkey"
				}
			]
		}
	},
	{
		name: "EvtClosePosition",
		type: {
			kind: "struct",
			fields: [
				{
					name: "pool",
					type: "pubkey"
				},
				{
					name: "owner",
					type: "pubkey"
				},
				{
					name: "position",
					type: "pubkey"
				},
				{
					name: "position_nft_mint",
					type: "pubkey"
				}
			]
		}
	},
	{
		name: "EvtCreateClaimFeeOperator",
		docs: [
			"Create claim fee operator"
		],
		type: {
			kind: "struct",
			fields: [
				{
					name: "operator",
					type: "pubkey"
				}
			]
		}
	},
	{
		name: "EvtCreateConfig",
		docs: [
			"Create static config"
		],
		type: {
			kind: "struct",
			fields: [
				{
					name: "pool_fees",
					type: {
						defined: {
							name: "PoolFeeParameters"
						}
					}
				},
				{
					name: "vault_config_key",
					type: "pubkey"
				},
				{
					name: "pool_creator_authority",
					type: "pubkey"
				},
				{
					name: "activation_type",
					type: "u8"
				},
				{
					name: "sqrt_min_price",
					type: "u128"
				},
				{
					name: "sqrt_max_price",
					type: "u128"
				},
				{
					name: "collect_fee_mode",
					type: "u8"
				},
				{
					name: "index",
					type: "u64"
				},
				{
					name: "config",
					type: "pubkey"
				}
			]
		}
	},
	{
		name: "EvtCreateDynamicConfig",
		docs: [
			"Create dynamic config"
		],
		type: {
			kind: "struct",
			fields: [
				{
					name: "config",
					type: "pubkey"
				},
				{
					name: "pool_creator_authority",
					type: "pubkey"
				},
				{
					name: "index",
					type: "u64"
				}
			]
		}
	},
	{
		name: "EvtCreatePosition",
		type: {
			kind: "struct",
			fields: [
				{
					name: "pool",
					type: "pubkey"
				},
				{
					name: "owner",
					type: "pubkey"
				},
				{
					name: "position",
					type: "pubkey"
				},
				{
					name: "position_nft_mint",
					type: "pubkey"
				}
			]
		}
	},
	{
		name: "EvtCreateTokenBadge",
		docs: [
			"Create token badge"
		],
		type: {
			kind: "struct",
			fields: [
				{
					name: "token_mint",
					type: "pubkey"
				}
			]
		}
	},
	{
		name: "EvtFundReward",
		type: {
			kind: "struct",
			fields: [
				{
					name: "pool",
					type: "pubkey"
				},
				{
					name: "funder",
					type: "pubkey"
				},
				{
					name: "mint_reward",
					type: "pubkey"
				},
				{
					name: "reward_index",
					type: "u8"
				},
				{
					name: "amount",
					type: "u64"
				},
				{
					name: "transfer_fee_excluded_amount_in",
					type: "u64"
				},
				{
					name: "reward_duration_end",
					type: "u64"
				},
				{
					name: "pre_reward_rate",
					type: "u128"
				},
				{
					name: "post_reward_rate",
					type: "u128"
				}
			]
		}
	},
	{
		name: "EvtInitializePool",
		type: {
			kind: "struct",
			fields: [
				{
					name: "pool",
					type: "pubkey"
				},
				{
					name: "token_a_mint",
					type: "pubkey"
				},
				{
					name: "token_b_mint",
					type: "pubkey"
				},
				{
					name: "creator",
					type: "pubkey"
				},
				{
					name: "payer",
					type: "pubkey"
				},
				{
					name: "alpha_vault",
					type: "pubkey"
				},
				{
					name: "pool_fees",
					type: {
						defined: {
							name: "PoolFeeParameters"
						}
					}
				},
				{
					name: "sqrt_min_price",
					type: "u128"
				},
				{
					name: "sqrt_max_price",
					type: "u128"
				},
				{
					name: "activation_type",
					type: "u8"
				},
				{
					name: "collect_fee_mode",
					type: "u8"
				},
				{
					name: "liquidity",
					type: "u128"
				},
				{
					name: "sqrt_price",
					type: "u128"
				},
				{
					name: "activation_point",
					type: "u64"
				},
				{
					name: "token_a_flag",
					type: "u8"
				},
				{
					name: "token_b_flag",
					type: "u8"
				},
				{
					name: "token_a_amount",
					type: "u64"
				},
				{
					name: "token_b_amount",
					type: "u64"
				},
				{
					name: "total_amount_a",
					type: "u64"
				},
				{
					name: "total_amount_b",
					type: "u64"
				},
				{
					name: "pool_type",
					type: "u8"
				}
			]
		}
	},
	{
		name: "EvtInitializeReward",
		type: {
			kind: "struct",
			fields: [
				{
					name: "pool",
					type: "pubkey"
				},
				{
					name: "reward_mint",
					type: "pubkey"
				},
				{
					name: "funder",
					type: "pubkey"
				},
				{
					name: "creator",
					type: "pubkey"
				},
				{
					name: "reward_index",
					type: "u8"
				},
				{
					name: "reward_duration",
					type: "u64"
				}
			]
		}
	},
	{
		name: "EvtLockPosition",
		type: {
			kind: "struct",
			fields: [
				{
					name: "pool",
					type: "pubkey"
				},
				{
					name: "position",
					type: "pubkey"
				},
				{
					name: "owner",
					type: "pubkey"
				},
				{
					name: "vesting",
					type: "pubkey"
				},
				{
					name: "cliff_point",
					type: "u64"
				},
				{
					name: "period_frequency",
					type: "u64"
				},
				{
					name: "cliff_unlock_liquidity",
					type: "u128"
				},
				{
					name: "liquidity_per_period",
					type: "u128"
				},
				{
					name: "number_of_period",
					type: "u16"
				}
			]
		}
	},
	{
		name: "EvtPermanentLockPosition",
		type: {
			kind: "struct",
			fields: [
				{
					name: "pool",
					type: "pubkey"
				},
				{
					name: "position",
					type: "pubkey"
				},
				{
					name: "lock_liquidity_amount",
					type: "u128"
				},
				{
					name: "total_permanent_locked_liquidity",
					type: "u128"
				}
			]
		}
	},
	{
		name: "EvtRemoveLiquidity",
		type: {
			kind: "struct",
			fields: [
				{
					name: "pool",
					type: "pubkey"
				},
				{
					name: "position",
					type: "pubkey"
				},
				{
					name: "owner",
					type: "pubkey"
				},
				{
					name: "params",
					type: {
						defined: {
							name: "RemoveLiquidityParameters"
						}
					}
				},
				{
					name: "token_a_amount",
					type: "u64"
				},
				{
					name: "token_b_amount",
					type: "u64"
				}
			]
		}
	},
	{
		name: "EvtSetPoolStatus",
		type: {
			kind: "struct",
			fields: [
				{
					name: "pool",
					type: "pubkey"
				},
				{
					name: "status",
					type: "u8"
				}
			]
		}
	},
	{
		name: "EvtSplitPosition",
		type: {
			kind: "struct",
			fields: [
				{
					name: "pool",
					type: "pubkey"
				},
				{
					name: "first_owner",
					type: "pubkey"
				},
				{
					name: "second_owner",
					type: "pubkey"
				},
				{
					name: "first_position",
					type: "pubkey"
				},
				{
					name: "second_position",
					type: "pubkey"
				},
				{
					name: "current_sqrt_price",
					type: "u128"
				},
				{
					name: "amount_splits",
					type: {
						defined: {
							name: "SplitAmountInfo"
						}
					}
				},
				{
					name: "first_position_info",
					type: {
						defined: {
							name: "SplitPositionInfo"
						}
					}
				},
				{
					name: "second_position_info",
					type: {
						defined: {
							name: "SplitPositionInfo"
						}
					}
				},
				{
					name: "split_position_parameters",
					type: {
						defined: {
							name: "SplitPositionParameters"
						}
					}
				}
			]
		}
	},
	{
		name: "EvtSwap",
		type: {
			kind: "struct",
			fields: [
				{
					name: "pool",
					type: "pubkey"
				},
				{
					name: "trade_direction",
					type: "u8"
				},
				{
					name: "has_referral",
					type: "bool"
				},
				{
					name: "params",
					type: {
						defined: {
							name: "SwapParameters"
						}
					}
				},
				{
					name: "swap_result",
					type: {
						defined: {
							name: "SwapResult"
						}
					}
				},
				{
					name: "actual_amount_in",
					type: "u64"
				},
				{
					name: "current_timestamp",
					type: "u64"
				}
			]
		}
	},
	{
		name: "EvtUpdateRewardDuration",
		type: {
			kind: "struct",
			fields: [
				{
					name: "pool",
					type: "pubkey"
				},
				{
					name: "reward_index",
					type: "u8"
				},
				{
					name: "old_reward_duration",
					type: "u64"
				},
				{
					name: "new_reward_duration",
					type: "u64"
				}
			]
		}
	},
	{
		name: "EvtUpdateRewardFunder",
		type: {
			kind: "struct",
			fields: [
				{
					name: "pool",
					type: "pubkey"
				},
				{
					name: "reward_index",
					type: "u8"
				},
				{
					name: "old_funder",
					type: "pubkey"
				},
				{
					name: "new_funder",
					type: "pubkey"
				}
			]
		}
	},
	{
		name: "EvtWithdrawIneligibleReward",
		type: {
			kind: "struct",
			fields: [
				{
					name: "pool",
					type: "pubkey"
				},
				{
					name: "reward_mint",
					type: "pubkey"
				},
				{
					name: "amount",
					type: "u64"
				}
			]
		}
	},
	{
		name: "InitializeCustomizablePoolParameters",
		type: {
			kind: "struct",
			fields: [
				{
					name: "pool_fees",
					docs: [
						"pool fees"
					],
					type: {
						defined: {
							name: "PoolFeeParameters"
						}
					}
				},
				{
					name: "sqrt_min_price",
					docs: [
						"sqrt min price"
					],
					type: "u128"
				},
				{
					name: "sqrt_max_price",
					docs: [
						"sqrt max price"
					],
					type: "u128"
				},
				{
					name: "has_alpha_vault",
					docs: [
						"has alpha vault"
					],
					type: "bool"
				},
				{
					name: "liquidity",
					docs: [
						"initialize liquidity"
					],
					type: "u128"
				},
				{
					name: "sqrt_price",
					docs: [
						"The init price of the pool as a sqrt(token_b/token_a) Q64.64 value"
					],
					type: "u128"
				},
				{
					name: "activation_type",
					docs: [
						"activation type"
					],
					type: "u8"
				},
				{
					name: "collect_fee_mode",
					docs: [
						"collect fee mode"
					],
					type: "u8"
				},
				{
					name: "activation_point",
					docs: [
						"activation point"
					],
					type: {
						option: "u64"
					}
				}
			]
		}
	},
	{
		name: "InitializePoolParameters",
		type: {
			kind: "struct",
			fields: [
				{
					name: "liquidity",
					docs: [
						"initialize liquidity"
					],
					type: "u128"
				},
				{
					name: "sqrt_price",
					docs: [
						"The init price of the pool as a sqrt(token_b/token_a) Q64.64 value"
					],
					type: "u128"
				},
				{
					name: "activation_point",
					docs: [
						"activation point"
					],
					type: {
						option: "u64"
					}
				}
			]
		}
	},
	{
		name: "Pool",
		serialization: "bytemuck",
		repr: {
			kind: "c"
		},
		type: {
			kind: "struct",
			fields: [
				{
					name: "pool_fees",
					docs: [
						"Pool fee"
					],
					type: {
						defined: {
							name: "PoolFeesStruct"
						}
					}
				},
				{
					name: "token_a_mint",
					docs: [
						"token a mint"
					],
					type: "pubkey"
				},
				{
					name: "token_b_mint",
					docs: [
						"token b mint"
					],
					type: "pubkey"
				},
				{
					name: "token_a_vault",
					docs: [
						"token a vault"
					],
					type: "pubkey"
				},
				{
					name: "token_b_vault",
					docs: [
						"token b vault"
					],
					type: "pubkey"
				},
				{
					name: "whitelisted_vault",
					docs: [
						"Whitelisted vault to be able to buy pool before activation_point"
					],
					type: "pubkey"
				},
				{
					name: "partner",
					docs: [
						"partner"
					],
					type: "pubkey"
				},
				{
					name: "liquidity",
					docs: [
						"liquidity share"
					],
					type: "u128"
				},
				{
					name: "_padding",
					docs: [
						"padding, previous reserve amount, be careful to use that field"
					],
					type: "u128"
				},
				{
					name: "protocol_a_fee",
					docs: [
						"protocol a fee"
					],
					type: "u64"
				},
				{
					name: "protocol_b_fee",
					docs: [
						"protocol b fee"
					],
					type: "u64"
				},
				{
					name: "partner_a_fee",
					docs: [
						"partner a fee"
					],
					type: "u64"
				},
				{
					name: "partner_b_fee",
					docs: [
						"partner b fee"
					],
					type: "u64"
				},
				{
					name: "sqrt_min_price",
					docs: [
						"min price"
					],
					type: "u128"
				},
				{
					name: "sqrt_max_price",
					docs: [
						"max price"
					],
					type: "u128"
				},
				{
					name: "sqrt_price",
					docs: [
						"current price"
					],
					type: "u128"
				},
				{
					name: "activation_point",
					docs: [
						"Activation point, can be slot or timestamp"
					],
					type: "u64"
				},
				{
					name: "activation_type",
					docs: [
						"Activation type, 0 means by slot, 1 means by timestamp"
					],
					type: "u8"
				},
				{
					name: "pool_status",
					docs: [
						"pool status, 0: enable, 1 disable"
					],
					type: "u8"
				},
				{
					name: "token_a_flag",
					docs: [
						"token a flag"
					],
					type: "u8"
				},
				{
					name: "token_b_flag",
					docs: [
						"token b flag"
					],
					type: "u8"
				},
				{
					name: "collect_fee_mode",
					docs: [
						"0 is collect fee in both token, 1 only collect fee in token a, 2 only collect fee in token b"
					],
					type: "u8"
				},
				{
					name: "pool_type",
					docs: [
						"pool type"
					],
					type: "u8"
				},
				{
					name: "_padding_0",
					docs: [
						"padding"
					],
					type: {
						array: [
							"u8",
							2
						]
					}
				},
				{
					name: "fee_a_per_liquidity",
					docs: [
						"cumulative"
					],
					type: {
						array: [
							"u8",
							32
						]
					}
				},
				{
					name: "fee_b_per_liquidity",
					docs: [
						"cumulative"
					],
					type: {
						array: [
							"u8",
							32
						]
					}
				},
				{
					name: "permanent_lock_liquidity",
					type: "u128"
				},
				{
					name: "metrics",
					docs: [
						"metrics"
					],
					type: {
						defined: {
							name: "PoolMetrics"
						}
					}
				},
				{
					name: "creator",
					docs: [
						"pool creator"
					],
					type: "pubkey"
				},
				{
					name: "_padding_1",
					docs: [
						"Padding for further use"
					],
					type: {
						array: [
							"u64",
							6
						]
					}
				},
				{
					name: "reward_infos",
					docs: [
						"Farming reward information"
					],
					type: {
						array: [
							{
								defined: {
									name: "RewardInfo"
								}
							},
							2
						]
					}
				}
			]
		}
	},
	{
		name: "PoolFeeParameters",
		docs: [
			"Information regarding fee charges"
		],
		type: {
			kind: "struct",
			fields: [
				{
					name: "base_fee",
					docs: [
						"Base fee"
					],
					type: {
						defined: {
							name: "BaseFeeParameters"
						}
					}
				},
				{
					name: "padding",
					docs: [
						"padding"
					],
					type: {
						array: [
							"u8",
							3
						]
					}
				},
				{
					name: "dynamic_fee",
					docs: [
						"dynamic fee"
					],
					type: {
						option: {
							defined: {
								name: "DynamicFeeParameters"
							}
						}
					}
				}
			]
		}
	},
	{
		name: "PoolFeesConfig",
		serialization: "bytemuck",
		repr: {
			kind: "c"
		},
		type: {
			kind: "struct",
			fields: [
				{
					name: "base_fee",
					type: {
						defined: {
							name: "BaseFeeConfig"
						}
					}
				},
				{
					name: "dynamic_fee",
					type: {
						defined: {
							name: "DynamicFeeConfig"
						}
					}
				},
				{
					name: "protocol_fee_percent",
					type: "u8"
				},
				{
					name: "partner_fee_percent",
					type: "u8"
				},
				{
					name: "referral_fee_percent",
					type: "u8"
				},
				{
					name: "padding_0",
					type: {
						array: [
							"u8",
							5
						]
					}
				},
				{
					name: "padding_1",
					type: {
						array: [
							"u64",
							5
						]
					}
				}
			]
		}
	},
	{
		name: "PoolFeesStruct",
		docs: [
			"Information regarding fee charges",
			"trading_fee = amount * trade_fee_numerator / denominator",
			"protocol_fee = trading_fee * protocol_fee_percentage / 100",
			"referral_fee = protocol_fee * referral_percentage / 100",
			"partner_fee = (protocol_fee - referral_fee) * partner_fee_percentage / denominator"
		],
		serialization: "bytemuck",
		repr: {
			kind: "c"
		},
		type: {
			kind: "struct",
			fields: [
				{
					name: "base_fee",
					docs: [
						"Trade fees are extra token amounts that are held inside the token",
						"accounts during a trade, making the value of liquidity tokens rise.",
						"Trade fee numerator"
					],
					type: {
						defined: {
							name: "BaseFeeStruct"
						}
					}
				},
				{
					name: "protocol_fee_percent",
					docs: [
						"Protocol trading fees are extra token amounts that are held inside the token",
						"accounts during a trade, with the equivalent in pool tokens minted to",
						"the protocol of the program.",
						"Protocol trade fee numerator"
					],
					type: "u8"
				},
				{
					name: "partner_fee_percent",
					docs: [
						"partner fee"
					],
					type: "u8"
				},
				{
					name: "referral_fee_percent",
					docs: [
						"referral fee"
					],
					type: "u8"
				},
				{
					name: "padding_0",
					docs: [
						"padding"
					],
					type: {
						array: [
							"u8",
							5
						]
					}
				},
				{
					name: "dynamic_fee",
					docs: [
						"dynamic fee"
					],
					type: {
						defined: {
							name: "DynamicFeeStruct"
						}
					}
				},
				{
					name: "padding_1",
					docs: [
						"padding"
					],
					type: {
						array: [
							"u64",
							2
						]
					}
				}
			]
		}
	},
	{
		name: "PoolMetrics",
		serialization: "bytemuck",
		repr: {
			kind: "c"
		},
		type: {
			kind: "struct",
			fields: [
				{
					name: "total_lp_a_fee",
					type: "u128"
				},
				{
					name: "total_lp_b_fee",
					type: "u128"
				},
				{
					name: "total_protocol_a_fee",
					type: "u64"
				},
				{
					name: "total_protocol_b_fee",
					type: "u64"
				},
				{
					name: "total_partner_a_fee",
					type: "u64"
				},
				{
					name: "total_partner_b_fee",
					type: "u64"
				},
				{
					name: "total_position",
					type: "u64"
				},
				{
					name: "padding",
					type: "u64"
				}
			]
		}
	},
	{
		name: "Position",
		serialization: "bytemuck",
		repr: {
			kind: "c"
		},
		type: {
			kind: "struct",
			fields: [
				{
					name: "pool",
					type: "pubkey"
				},
				{
					name: "nft_mint",
					docs: [
						"nft mint"
					],
					type: "pubkey"
				},
				{
					name: "fee_a_per_token_checkpoint",
					docs: [
						"fee a checkpoint"
					],
					type: {
						array: [
							"u8",
							32
						]
					}
				},
				{
					name: "fee_b_per_token_checkpoint",
					docs: [
						"fee b checkpoint"
					],
					type: {
						array: [
							"u8",
							32
						]
					}
				},
				{
					name: "fee_a_pending",
					docs: [
						"fee a pending"
					],
					type: "u64"
				},
				{
					name: "fee_b_pending",
					docs: [
						"fee b pending"
					],
					type: "u64"
				},
				{
					name: "unlocked_liquidity",
					docs: [
						"unlock liquidity"
					],
					type: "u128"
				},
				{
					name: "vested_liquidity",
					docs: [
						"vesting liquidity"
					],
					type: "u128"
				},
				{
					name: "permanent_locked_liquidity",
					docs: [
						"permanent locked liquidity"
					],
					type: "u128"
				},
				{
					name: "metrics",
					docs: [
						"metrics"
					],
					type: {
						defined: {
							name: "PositionMetrics"
						}
					}
				},
				{
					name: "reward_infos",
					docs: [
						"Farming reward information"
					],
					type: {
						array: [
							{
								defined: {
									name: "UserRewardInfo"
								}
							},
							2
						]
					}
				},
				{
					name: "padding",
					docs: [
						"padding for future usage"
					],
					type: {
						array: [
							"u128",
							6
						]
					}
				}
			]
		}
	},
	{
		name: "PositionMetrics",
		serialization: "bytemuck",
		repr: {
			kind: "c"
		},
		type: {
			kind: "struct",
			fields: [
				{
					name: "total_claimed_a_fee",
					type: "u64"
				},
				{
					name: "total_claimed_b_fee",
					type: "u64"
				}
			]
		}
	},
	{
		name: "RemoveLiquidityParameters",
		type: {
			kind: "struct",
			fields: [
				{
					name: "liquidity_delta",
					docs: [
						"delta liquidity"
					],
					type: "u128"
				},
				{
					name: "token_a_amount_threshold",
					docs: [
						"minimum token a amount"
					],
					type: "u64"
				},
				{
					name: "token_b_amount_threshold",
					docs: [
						"minimum token b amount"
					],
					type: "u64"
				}
			]
		}
	},
	{
		name: "RewardInfo",
		docs: [
			"Stores the state relevant for tracking liquidity mining rewards"
		],
		serialization: "bytemuck",
		repr: {
			kind: "c"
		},
		type: {
			kind: "struct",
			fields: [
				{
					name: "initialized",
					docs: [
						"Indicates if the reward has been initialized"
					],
					type: "u8"
				},
				{
					name: "reward_token_flag",
					docs: [
						"reward token flag"
					],
					type: "u8"
				},
				{
					name: "_padding_0",
					docs: [
						"padding"
					],
					type: {
						array: [
							"u8",
							6
						]
					}
				},
				{
					name: "_padding_1",
					docs: [
						"Padding to ensure `reward_rate: u128` is 16-byte aligned"
					],
					type: {
						array: [
							"u8",
							8
						]
					}
				},
				{
					name: "mint",
					docs: [
						"Reward token mint."
					],
					type: "pubkey"
				},
				{
					name: "vault",
					docs: [
						"Reward vault token account."
					],
					type: "pubkey"
				},
				{
					name: "funder",
					docs: [
						"Authority account that allows to fund rewards"
					],
					type: "pubkey"
				},
				{
					name: "reward_duration",
					docs: [
						"reward duration"
					],
					type: "u64"
				},
				{
					name: "reward_duration_end",
					docs: [
						"reward duration end"
					],
					type: "u64"
				},
				{
					name: "reward_rate",
					docs: [
						"reward rate"
					],
					type: "u128"
				},
				{
					name: "reward_per_token_stored",
					docs: [
						"Reward per token stored"
					],
					type: {
						array: [
							"u8",
							32
						]
					}
				},
				{
					name: "last_update_time",
					docs: [
						"The last time reward states were updated."
					],
					type: "u64"
				},
				{
					name: "cumulative_seconds_with_empty_liquidity_reward",
					docs: [
						"Accumulated seconds when the farm distributed rewards but the bin was empty.",
						"These rewards will be carried over to the next reward time window."
					],
					type: "u64"
				}
			]
		}
	},
	{
		name: "SplitAmountInfo",
		type: {
			kind: "struct",
			fields: [
				{
					name: "permanent_locked_liquidity",
					type: "u128"
				},
				{
					name: "unlocked_liquidity",
					type: "u128"
				},
				{
					name: "fee_a",
					type: "u64"
				},
				{
					name: "fee_b",
					type: "u64"
				},
				{
					name: "reward_0",
					type: "u64"
				},
				{
					name: "reward_1",
					type: "u64"
				}
			]
		}
	},
	{
		name: "SplitPositionInfo",
		type: {
			kind: "struct",
			fields: [
				{
					name: "liquidity",
					type: "u128"
				},
				{
					name: "fee_a",
					type: "u64"
				},
				{
					name: "fee_b",
					type: "u64"
				},
				{
					name: "reward_0",
					type: "u64"
				},
				{
					name: "reward_1",
					type: "u64"
				}
			]
		}
	},
	{
		name: "SplitPositionParameters",
		type: {
			kind: "struct",
			fields: [
				{
					name: "unlocked_liquidity_percentage",
					docs: [
						"Percentage of unlocked liquidity to split to the second position"
					],
					type: "u8"
				},
				{
					name: "permanent_locked_liquidity_percentage",
					docs: [
						"Percentage of permanent locked liquidity to split to the second position"
					],
					type: "u8"
				},
				{
					name: "fee_a_percentage",
					docs: [
						"Percentage of fee A pending to split to the second position"
					],
					type: "u8"
				},
				{
					name: "fee_b_percentage",
					docs: [
						"Percentage of fee B pending to split to the second position"
					],
					type: "u8"
				},
				{
					name: "reward_0_percentage",
					docs: [
						"Percentage of reward 0 pending to split to the second position"
					],
					type: "u8"
				},
				{
					name: "reward_1_percentage",
					docs: [
						"Percentage of reward 1 pending to split to the second position"
					],
					type: "u8"
				},
				{
					name: "padding",
					docs: [
						"padding for future"
					],
					type: {
						array: [
							"u8",
							16
						]
					}
				}
			]
		}
	},
	{
		name: "StaticConfigParameters",
		type: {
			kind: "struct",
			fields: [
				{
					name: "pool_fees",
					type: {
						defined: {
							name: "PoolFeeParameters"
						}
					}
				},
				{
					name: "sqrt_min_price",
					type: "u128"
				},
				{
					name: "sqrt_max_price",
					type: "u128"
				},
				{
					name: "vault_config_key",
					type: "pubkey"
				},
				{
					name: "pool_creator_authority",
					type: "pubkey"
				},
				{
					name: "activation_type",
					type: "u8"
				},
				{
					name: "collect_fee_mode",
					type: "u8"
				}
			]
		}
	},
	{
		name: "SwapParameters",
		type: {
			kind: "struct",
			fields: [
				{
					name: "amount_in",
					type: "u64"
				},
				{
					name: "minimum_amount_out",
					type: "u64"
				}
			]
		}
	},
	{
		name: "SwapResult",
		docs: [
			"Encodes all results of swapping"
		],
		type: {
			kind: "struct",
			fields: [
				{
					name: "output_amount",
					type: "u64"
				},
				{
					name: "next_sqrt_price",
					type: "u128"
				},
				{
					name: "lp_fee",
					type: "u64"
				},
				{
					name: "protocol_fee",
					type: "u64"
				},
				{
					name: "partner_fee",
					type: "u64"
				},
				{
					name: "referral_fee",
					type: "u64"
				}
			]
		}
	},
	{
		name: "TokenBadge",
		docs: [
			"Parameter that set by the protocol"
		],
		serialization: "bytemuck",
		repr: {
			kind: "c"
		},
		type: {
			kind: "struct",
			fields: [
				{
					name: "token_mint",
					docs: [
						"token mint"
					],
					type: "pubkey"
				},
				{
					name: "_padding",
					docs: [
						"Reserve"
					],
					type: {
						array: [
							"u8",
							128
						]
					}
				}
			]
		}
	},
	{
		name: "UserRewardInfo",
		serialization: "bytemuck",
		repr: {
			kind: "c"
		},
		type: {
			kind: "struct",
			fields: [
				{
					name: "reward_per_token_checkpoint",
					docs: [
						"The latest update reward checkpoint"
					],
					type: {
						array: [
							"u8",
							32
						]
					}
				},
				{
					name: "reward_pendings",
					docs: [
						"Current pending rewards"
					],
					type: "u64"
				},
				{
					name: "total_claimed_rewards",
					docs: [
						"Total claimed rewards"
					],
					type: "u64"
				}
			]
		}
	},
	{
		name: "Vesting",
		serialization: "bytemuck",
		repr: {
			kind: "c"
		},
		type: {
			kind: "struct",
			fields: [
				{
					name: "position",
					type: "pubkey"
				},
				{
					name: "cliff_point",
					type: "u64"
				},
				{
					name: "period_frequency",
					type: "u64"
				},
				{
					name: "cliff_unlock_liquidity",
					type: "u128"
				},
				{
					name: "liquidity_per_period",
					type: "u128"
				},
				{
					name: "total_released_liquidity",
					type: "u128"
				},
				{
					name: "number_of_period",
					type: "u16"
				},
				{
					name: "padding",
					type: {
						array: [
							"u8",
							14
						]
					}
				},
				{
					name: "padding2",
					type: {
						array: [
							"u128",
							4
						]
					}
				}
			]
		}
	},
	{
		name: "VestingParameters",
		type: {
			kind: "struct",
			fields: [
				{
					name: "cliff_point",
					type: {
						option: "u64"
					}
				},
				{
					name: "period_frequency",
					type: "u64"
				},
				{
					name: "cliff_unlock_liquidity",
					type: "u128"
				},
				{
					name: "liquidity_per_period",
					type: "u128"
				},
				{
					name: "number_of_period",
					type: "u16"
				}
			]
		}
	}
];
var CpAmmIDL = {
	address: address,
	metadata: metadata,
	instructions: instructions,
	accounts: accounts,
	events: events,
	errors: errors,
	types: types
};

export { ActivationPoint, ActivationType, type AddLiquidityParams, type AmmProgram, BASIS_POINT_MAX, BIN_STEP_BPS_DEFAULT, BIN_STEP_BPS_U128_DEFAULT, type BaseFee, type BuildAddLiquidityParams, type BuildLiquidatePositionInstructionParams, type BuildRemoveAllLiquidityInstructionParams, CP_AMM_PROGRAM_ID, type ClaimPartnerFeeParams, type ClaimPositionFeeInstructionParams, type ClaimPositionFeeParams, type ClaimPositionFeeParams2, type ClaimRewardParams, type ClosePositionInstructionParams, type ClosePositionParams, CollectFeeMode, type ConfigState, CpAmm, type CpAmm$1 as CpAmmTypes, type CreatePoolParams, type CreatePositionAndAddLiquidity, type CreatePositionParams, DYNAMIC_FEE_DECAY_PERIOD_DEFAULT, DYNAMIC_FEE_FILTER_PERIOD_DEFAULT, DYNAMIC_FEE_REDUCTION_FACTOR_DEFAULT, type DepositQuote, type DynamicFee, type DynamicFeeParams, FEE_DENOMINATOR, type FeeMode, FeeSchedulerMode, type FundRewardParams, type GetDepositQuoteParams, type GetQuoteExactOutParams, type GetQuoteParams, type GetWithdrawQuoteParams, type InitializeCustomizeablePoolParams, type InitializeCustomizeablePoolWithDynamicConfigParams, type InitializeRewardParams, LIQUIDITY_SCALE, type LiquidityDeltaParams, type LockPositionParams, MAX_CU_BUFFER, MAX_FEE_NUMERATOR, MAX_PRICE_CHANGE_BPS_DEFAULT, MAX_SQRT_PRICE, MIN_CU_BUFFER, MIN_SQRT_PRICE, type MergePositionParams, ONE, type PermanentLockParams, type PoolFeesParams, type PoolState, type PositionState, type PrepareCustomizablePoolParams, type PreparePoolCreationParams, type PreparePoolCreationSingleSide, type PrepareTokenAccountParams, type PreparedPoolCreation, type QuoteExactOutResult, type RefreshVestingParams, type RemoveAllLiquidityAndClosePositionParams, type RemoveAllLiquidityParams, type RemoveLiquidityParams, type RewardInfo, Rounding, SCALE_OFFSET, type SetupFeeClaimAccountsParams, type SplitPositionParams, type SwapAmount, type SwapParams, type SwapQuotes, type SwapResult, type TokenBadgeState, TradeDirection, type TxBuilder, type UpdateRewardDurationParams, type UpdateRewardFunderParams, type VestingState, type WithdrawIneligibleRewardParams, type WithdrawQuote, bpsToFeeNumerator, calculateInitSqrtPrice, calculateTransferFeeExcludedAmount, calculateTransferFeeIncludedAmount, decimalToQ64, CpAmmIDL as default, deriveClaimFeeOperatorAddress, deriveConfigAddress, deriveCustomizablePoolAddress, derivePoolAddress, derivePoolAuthority, derivePositionAddress, derivePositionNftAccount, deriveRewardVaultAddress, deriveTokenBadgeAddress, deriveTokenVaultAddress, feeNumeratorToBps, getAllPositionNftAccountByOwner, getAllUserPositionNftAccount, getAmountAFromLiquidityDelta, getAmountBFromLiquidityDelta, getAvailableVestingLiquidity, getBaseFeeNumerator, getBaseFeeParams, getDynamicFeeNumerator, getDynamicFeeParams, getEstimatedComputeUnitIxWithBuffer, getEstimatedComputeUnitUsageWithBuffer, getExcludedFeeAmount, getFeeMode, getFeeNumerator, getFirstKey, getIncludedFeeAmount, getLiquidityDeltaFromAmountA, getLiquidityDeltaFromAmountB, getMaxAmountWithSlippage, getMinAmountWithSlippage, getNextSqrtPrice, getNextSqrtPriceFromAmountARoundingDown, getNextSqrtPriceFromAmountBRoundingUp, getNextSqrtPriceFromOutput, getOrCreateATAInstruction, getPriceFromSqrtPrice, getPriceImpact, getSecondKey, getSimulationComputeUnits, getSqrtPriceFromPrice, getSwapAmount, getSwapResultFromOutAmount, getTokenDecimals, getTokenProgram, getTotalLockedLiquidity, getUnClaimReward, isVestingComplete, mulDiv, positionByPoolFilter, pow, q64ToDecimal, unwrapSOLInstruction, vestingByPositionFilter, wrapSOLInstruction };
